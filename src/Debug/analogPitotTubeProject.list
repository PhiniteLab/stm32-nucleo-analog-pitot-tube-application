
analogPitotTubeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009828  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080099f8  080099f8  000199f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009edc  08009edc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009edc  08009edc  00019edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee4  08009ee4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009ee4  08009ee4  00019ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eec  08009eec  00019eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001e0  0800a0d0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800a0d0  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef12  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223f  00000000  00000000  0002f122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00031368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  00031d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d91  00000000  00000000  00032650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc1a  00000000  00000000  0005b3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0111  00000000  00000000  00066ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015710c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d10  00000000  00000000  00157160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080099e0 	.word	0x080099e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080099e0 	.word	0x080099e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZN20fast_kalman_filter_tC1Edddddd>:
	    this->Hparam = 1;
	    this->Rparam = 0.1;

	}

	fast_kalman_filter_t(double Qparam, double Rparam, double samplingPeriod,
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0
 8001032:	6378      	str	r0, [r7, #52]	; 0x34
 8001034:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8001038:	ed87 1b08 	vstr	d1, [r7, #32]
 800103c:	ed87 2b06 	vstr	d2, [r7, #24]
 8001040:	ed87 3b04 	vstr	d3, [r7, #16]
 8001044:	ed87 4b02 	vstr	d4, [r7, #8]
 8001048:	ed87 5b00 	vstr	d5, [r7]
			double PNStd, double MNstd, double initialValue) {

	    this->Fparam = 1;
 800104c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <_ZN20fast_kalman_filter_tC1Edddddd+0x118>)
 8001054:	e9c1 2302 	strd	r2, r3, [r1, #8]
	    this->Hparam = 1;
 8001058:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b39      	ldr	r3, [pc, #228]	; (8001144 <_ZN20fast_kalman_filter_tC1Edddddd+0x118>)
 8001060:	e9c1 2306 	strd	r2, r3, [r1, #24]
	    this->Y = 0.0;
 8001064:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	    this->Bparam = samplingPeriod;
 8001072:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001078:	e9c1 2300 	strd	r2, r3, [r1]
	    this->Qparam = Qparam * PNStd * PNStd;
 800107c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001080:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001084:	f7ff fad8 	bl	8000638 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001094:	f7ff fad0 	bl	8000638 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800109e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	    this->Rparam = Rparam * MNstd * MNstd;
 80010a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010aa:	f7ff fac5 	bl	8000638 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010ba:	f7ff fabd 	bl	8000638 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010c4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	    this->PPresent = MNstd * MNstd;
 80010c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010d0:	f7ff fab2 	bl	8000638 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010da:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	    // system dynamic parameters
	    this->XHatPresent = initialValue;
 80010de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	    this->SPresent = MNstd * MNstd;
 80010e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010f0:	f7ff faa2 	bl	8000638 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010fa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	    this->RefPPresent = MNstd * MNstd;
 80010fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001106:	f7ff fa97 	bl	8000638 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001110:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	    this->RefY = 0;
 8001114:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	    this->RefXHatPresent = initialValue;
 8001122:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001128:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	    this->RefSPresent = 0;
 800112c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	}
 800113a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113c:	4618      	mov	r0, r3
 800113e:	3738      	adds	r7, #56	; 0x38
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	3ff00000 	.word	0x3ff00000

08001148 <_ZN20fast_kalman_filter_t14get_estimationEdd>:
	double get_estimation(double measuredData, double FinputValue ){
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6178      	str	r0, [r7, #20]
 8001150:	ed87 0b02 	vstr	d0, [r7, #8]
 8001154:	ed87 1b00 	vstr	d1, [r7]

	    // state
	    this->RefXHatForward = this->Fparam * this->RefXHatPresent + this->Bparam * FinputValue;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001164:	f7ff fa68 	bl	8000638 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4614      	mov	r4, r2
 800116e:	461d      	mov	r5, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800117a:	f7ff fa5d 	bl	8000638 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4620      	mov	r0, r4
 8001184:	4629      	mov	r1, r5
 8001186:	f7ff f8a1 	bl	80002cc <__adddf3>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	6979      	ldr	r1, [r7, #20]
 8001190:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	    // state uncertainty
	    this->RefPForward = this->Fparam * this->RefPPresent * this->Fparam + this->Qparam;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80011a0:	f7ff fa4a 	bl	8000638 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011b2:	f7ff fa41 	bl	8000638 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011c4:	f7ff f882 	bl	80002cc <__adddf3>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	6979      	ldr	r1, [r7, #20]
 80011ce:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

	    // update
	    this->RefY = measuredData - this->Hparam * this->RefXHatForward;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80011de:	f7ff fa2b 	bl	8000638 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ea:	f7ff f86d 	bl	80002c8 <__aeabi_dsub>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	6979      	ldr	r1, [r7, #20]
 80011f4:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

	    // innovation
	    this->RefSForward = this->Hparam * this->RefPForward * this->Hparam + this->Rparam;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001204:	f7ff fa18 	bl	8000638 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001216:	f7ff fa0f 	bl	8000638 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001228:	f7ff f850 	bl	80002cc <__adddf3>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	6979      	ldr	r1, [r7, #20]
 8001232:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	    // coefficient
	    this->Kparam = this->RefPForward * this->Hparam * 1.0 / this->RefSForward;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001242:	f7ff f9f9 	bl	8000638 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8001254:	f7ff fb1a 	bl	800088c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	6979      	ldr	r1, [r7, #20]
 800125e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	    this->RefXHatForward = this->RefXHatForward + this->Kparam * this->RefY;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001274:	f7ff f9e0 	bl	8000638 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f824 	bl	80002cc <__adddf3>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	6979      	ldr	r1, [r7, #20]
 800128a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	    this->RefPForward = (1.0 - this->Kparam * this->Hparam) * this->RefPForward;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800129a:	f7ff f9cd 	bl	8000638 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	f04f 0000 	mov.w	r0, #0
 80012a6:	4917      	ldr	r1, [pc, #92]	; (8001304 <_ZN20fast_kalman_filter_t14get_estimationEdd+0x1bc>)
 80012a8:	f7ff f80e 	bl	80002c8 <__aeabi_dsub>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80012ba:	f7ff f9bd 	bl	8000638 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	6979      	ldr	r1, [r7, #20]
 80012c4:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

	    // update previous values
	    this->RefPPresent = this->RefPForward;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80012ce:	6979      	ldr	r1, [r7, #20]
 80012d0:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	    this->RefXHatPresent = this->RefXHatForward;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80012da:	6979      	ldr	r1, [r7, #20]
 80012dc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	    this->RefSPresent = this->RefSForward;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80012e6:	6979      	ldr	r1, [r7, #20]
 80012e8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	    return this->RefXHatForward;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80012f2:	ec43 2b17 	vmov	d7, r2, r3

	}
 80012f6:	eeb0 0a47 	vmov.f32	s0, s14
 80012fa:	eef0 0a67 	vmov.f32	s1, s15
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}
 8001304:	3ff00000 	.word	0x3ff00000

08001308 <_ZN26measurement_analog_value_cC1EP17ADC_HandleTypeDefmt>:

	double wind_speed_d64;
	double filtered_wind_speed_d64;


	measurement_analog_value_c(ADC_HandleTypeDef *__hadc,
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	807b      	strh	r3, [r7, #2]
			uint32_t __adc_channel, uint16_t adc_resolation) {

		this->hadc = __hadc;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	601a      	str	r2, [r3, #0]
		this->adc_channel_u32 = __adc_channel;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	605a      	str	r2, [r3, #4]
		this->adc_resolotion_u16 = adc_resolation;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	887a      	ldrh	r2, [r7, #2]
 8001326:	811a      	strh	r2, [r3, #8]

		this->Vs_voltage_d64 = 5;
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <_ZN26measurement_analog_value_cC1EP17ADC_HandleTypeDefmt+0xd0>)
 8001330:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		this->voltage_divider_ratio = 0.5;
 8001334:	68f9      	ldr	r1, [r7, #12]
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <_ZN26measurement_analog_value_cC1EP17ADC_HandleTypeDefmt+0xd4>)
 800133c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		this->reference_voltage_d64 = 3.3;
 8001340:	68f9      	ldr	r1, [r7, #12]
 8001342:	a321      	add	r3, pc, #132	; (adr r3, 80013c8 <_ZN26measurement_analog_value_cC1EP17ADC_HandleTypeDefmt+0xc0>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		this->analog_value_d64 = 0;
 800134c:	68f9      	ldr	r1, [r7, #12]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9c1 2304 	strd	r2, r3, [r1, #16]
		this->analog_voltage_d64 = 0;
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e9c1 2306 	strd	r2, r3, [r1, #24]
		this->real_voltage_out_d64 = 0;
 8001368:	68f9      	ldr	r1, [r7, #12]
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		this->pressure_d64 = 0;
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9c1 2308 	strd	r2, r3, [r1, #32]
		this->wind_speed_d64 = 0;
 8001384:	68f9      	ldr	r1, [r7, #12]
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		this->density_of_air_d64 = 1.293;
 8001392:	68f9      	ldr	r1, [r7, #12]
 8001394:	a30e      	add	r3, pc, #56	; (adr r3, 80013d0 <_ZN26measurement_analog_value_cC1EP17ADC_HandleTypeDefmt+0xc8>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		this->wind_speed_ofset_d64 = 0;
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		this->filtered_wind_speed_d64 = 0;
 80013ac:	68f9      	ldr	r1, [r7, #12]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	}
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	66666666 	.word	0x66666666
 80013cc:	400a6666 	.word	0x400a6666
 80013d0:	c49ba5e3 	.word	0xc49ba5e3
 80013d4:	3ff4b020 	.word	0x3ff4b020
 80013d8:	40140000 	.word	0x40140000
 80013dc:	3fe00000 	.word	0x3fe00000

080013e0 <_ZN26measurement_analog_value_c17read_analog_valueEv>:

	void read_analog_value() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

		ADC_ChannelConfTypeDef sConfig = { 0 };
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
		uint32_t adc_sample_period_u32 = ADC_SAMPLETIME_480CYCLES;
 80013f6:	2307      	movs	r3, #7
 80013f8:	61fb      	str	r3, [r7, #28]
		sConfig.Channel = this->adc_channel_u32;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8001400:	2301      	movs	r3, #1
 8001402:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = adc_sample_period_u32;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	617b      	str	r3, [r7, #20]

		if (HAL_ADC_ConfigChannel(this->hadc, &sConfig) != HAL_OK) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f107 020c 	add.w	r2, r7, #12
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f001 f864 	bl	80024e0 <HAL_ADC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	bf14      	ite	ne
 800141e:	2301      	movne	r3, #1
 8001420:	2300      	moveq	r3, #0
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <_ZN26measurement_analog_value_c17read_analog_valueEv+0x4c>
			Error_Handler();
 8001428:	f000 fb8e 	bl	8001b48 <Error_Handler>
		}

		HAL_ADC_Start(this->hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 febb 	bl	80021ac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(this->hadc, HAL_MAX_DELAY);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f04f 31ff 	mov.w	r1, #4294967295
 800143e:	4618      	mov	r0, r3
 8001440:	f000 ffb6 	bl	80023b0 <HAL_ADC_PollForConversion>
		this->analog_value_d64 = HAL_ADC_GetValue(this->hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f001 f83c 	bl	80024c6 <HAL_ADC_GetValue>
 800144e:	4603      	mov	r3, r0
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f877 	bl	8000544 <__aeabi_ui2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		HAL_ADC_Stop(this->hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 ff6f 	bl	8002348 <HAL_ADC_Stop>

	}
 800146a:	bf00      	nop
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <_ZN26measurement_analog_value_c10get_offsetEv>:


	void get_offset(){
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]


		for(int i = 0; i<2000; i++){
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001486:	da13      	bge.n	80014b0 <_ZN26measurement_analog_value_c10get_offsetEv+0x3c>

			this->get_wind_speed();
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f825 	bl	80014d8 <_ZN26measurement_analog_value_c14get_wind_speedEv>

			this->wind_speed_ofset_d64 += this->wind_speed_d64;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800149a:	f7fe ff17 	bl	80002cc <__adddf3>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		for(int i = 0; i<2000; i++){
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	e7e7      	b.n	8001480 <_ZN26measurement_analog_value_c10get_offsetEv+0xc>

		}

		this->wind_speed_ofset_d64 = this->wind_speed_ofset_d64/2000;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <_ZN26measurement_analog_value_c10get_offsetEv+0x60>)
 80014bc:	f7ff f9e6 	bl	800088c <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50


	}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	409f4000 	.word	0x409f4000

080014d8 <_ZN26measurement_analog_value_c14get_wind_speedEv>:

	void get_wind_speed() {
 80014d8:	b5b0      	push	{r4, r5, r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

		this->read_analog_value();
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff7d 	bl	80013e0 <_ZN26measurement_analog_value_c17read_analog_valueEv>

		this->analog_voltage_d64 = (this->analog_value_d64
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
				/ (this->adc_resolotion_u16 - 1)) * this->reference_voltage_d64;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	891b      	ldrh	r3, [r3, #8]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f836 	bl	8000564 <__aeabi_i2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4620      	mov	r0, r4
 80014fe:	4629      	mov	r1, r5
 8001500:	f7ff f9c4 	bl	800088c <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001512:	f7ff f891 	bl	8000638 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
		this->analog_voltage_d64 = (this->analog_value_d64
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	e9c1 2306 	strd	r2, r3, [r1, #24]

		this->real_voltage_out_d64 = this->analog_voltage_d64 / this->voltage_divider_ratio;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800152c:	f7ff f9ae 	bl	800088c <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

		this->pressure_d64 = (((this->real_voltage_out_d64 / this->Vs_voltage_d64)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001546:	f7ff f9a1 	bl	800088c <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
				- 0.5) / 0.2)*1000;
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <_ZN26measurement_analog_value_c14get_wind_speedEv+0x138>)
 8001558:	f7fe feb6 	bl	80002c8 <__aeabi_dsub>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	a328      	add	r3, pc, #160	; (adr r3, 8001608 <_ZN26measurement_analog_value_c14get_wind_speedEv+0x130>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f98f 	bl	800088c <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <_ZN26measurement_analog_value_c14get_wind_speedEv+0x13c>)
 800157c:	f7ff f85c 	bl	8000638 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
		this->pressure_d64 = (((this->real_voltage_out_d64 / this->Vs_voltage_d64)
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if(this->pressure_d64 >= 0)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	f7ff fad4 	bl	8000b44 <__aeabi_dcmpge>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d026      	beq.n	80015f0 <_ZN26measurement_analog_value_c14get_wind_speedEv+0x118>
		{
			this->wind_speed_d64 = sqrt(
					2 * this->pressure_d64 / this->density_of_air_d64) - this->wind_speed_ofset_d64; //m/s
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	f7fe fe8e 	bl	80002cc <__adddf3>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
			this->wind_speed_d64 = sqrt(
 80015be:	f7ff f965 	bl	800088c <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	ec43 2b17 	vmov	d7, r2, r3
 80015ca:	eeb0 0a47 	vmov.f32	s0, s14
 80015ce:	eef0 0a67 	vmov.f32	s1, s15
 80015d2:	f003 fcc7 	bl	8004f64 <sqrt>
 80015d6:	ec51 0b10 	vmov	r0, r1, d0
					2 * this->pressure_d64 / this->density_of_air_d64) - this->wind_speed_ofset_d64; //m/s
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80015e0:	f7fe fe72 	bl	80002c8 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
			this->wind_speed_d64 = sqrt(
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			this->wind_speed_d64 = 0;

		}


	}
 80015ee:	e006      	b.n	80015fe <_ZN26measurement_analog_value_c14get_wind_speedEv+0x126>
			this->wind_speed_d64 = 0;
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bdb0      	pop	{r4, r5, r7, pc}
 8001606:	bf00      	nop
 8001608:	9999999a 	.word	0x9999999a
 800160c:	3fc99999 	.word	0x3fc99999
 8001610:	3fe00000 	.word	0x3fe00000
 8001614:	408f4000 	.word	0x408f4000

08001618 <main>:
uint16_t t_start_time_u16;
uint16_t t_final_time_u16;

char send_temp_values[100];

int main(void) {
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af04      	add	r7, sp, #16

	HAL_Init();
 800161e:	f000 fcf7 	bl	8002010 <HAL_Init>

	SystemClock_Config();
 8001622:	f000 f8a7 	bl	8001774 <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 8001626:	f000 f9ed 	bl	8001a04 <_ZL12MX_GPIO_Initv>
	MX_USART3_UART_Init();
 800162a:	f000 f999 	bl	8001960 <_ZL19MX_USART3_UART_Initv>
	MX_DMA_Init();
 800162e:	f000 f9cb 	bl	80019c8 <_ZL11MX_DMA_Initv>
	MX_ADC1_Init();
 8001632:	f000 f939 	bl	80018a8 <_ZL12MX_ADC1_Initv>

	time_ms = 0;
 8001636:	4946      	ldr	r1, [pc, #280]	; (8001750 <main+0x138>)
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9c1 2300 	strd	r2, r3, [r1]
	t_start_time_u16 = 0;
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <main+0x13c>)
 8001646:	2200      	movs	r2, #0
 8001648:	801a      	strh	r2, [r3, #0]
	t_final_time_u16 = 0;
 800164a:	4b43      	ldr	r3, [pc, #268]	; (8001758 <main+0x140>)
 800164c:	2200      	movs	r2, #0
 800164e:	801a      	strh	r2, [r3, #0]
	sampling_period = 0;
 8001650:	4942      	ldr	r1, [pc, #264]	; (800175c <main+0x144>)
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c1 2300 	strd	r2, r3, [r1]
	memset(send_temp_values, 0, 100);
 800165e:	2264      	movs	r2, #100	; 0x64
 8001660:	2100      	movs	r1, #0
 8001662:	483f      	ldr	r0, [pc, #252]	; (8001760 <main+0x148>)
 8001664:	f003 fd90 	bl	8005188 <memset>

	pitot_tube.get_offset();
 8001668:	483e      	ldr	r0, [pc, #248]	; (8001764 <main+0x14c>)
 800166a:	f7ff ff03 	bl	8001474 <_ZN26measurement_analog_value_c10get_offsetEv>

	while (1) {

		pitot_tube.get_wind_speed();
 800166e:	483d      	ldr	r0, [pc, #244]	; (8001764 <main+0x14c>)
 8001670:	f7ff ff32 	bl	80014d8 <_ZN26measurement_analog_value_c14get_wind_speedEv>
		pitot_tube.filtered_wind_speed_d64 = kalman_filter_ct.get_estimation(
 8001674:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <main+0x14c>)
 8001676:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800167a:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8001740 <main+0x128>
 800167e:	eeb0 0a47 	vmov.f32	s0, s14
 8001682:	eef0 0a67 	vmov.f32	s1, s15
 8001686:	4838      	ldr	r0, [pc, #224]	; (8001768 <main+0x150>)
 8001688:	f7ff fd5e 	bl	8001148 <_ZN20fast_kalman_filter_t14get_estimationEdd>
 800168c:	eeb0 7a40 	vmov.f32	s14, s0
 8001690:	eef0 7a60 	vmov.f32	s15, s1
 8001694:	4b33      	ldr	r3, [pc, #204]	; (8001764 <main+0x14c>)
 8001696:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
				pitot_tube.wind_speed_d64, 0.0);



		t_start_time_u16 = t_final_time_u16;
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <main+0x140>)
 800169c:	881a      	ldrh	r2, [r3, #0]
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <main+0x13c>)
 80016a0:	801a      	strh	r2, [r3, #0]
		t_final_time_u16 = HAL_GetTick();
 80016a2:	f000 fd0f 	bl	80020c4 <HAL_GetTick>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <main+0x140>)
 80016ac:	801a      	strh	r2, [r3, #0]

		if (t_final_time_u16 == 0) {
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <main+0x140>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d106      	bne.n	80016c4 <main+0xac>
			sampling_period = 0.001;
 80016b6:	4929      	ldr	r1, [pc, #164]	; (800175c <main+0x144>)
 80016b8:	a323      	add	r3, pc, #140	; (adr r3, 8001748 <main+0x130>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	e9c1 2300 	strd	r2, r3, [r1]
 80016c2:	e00d      	b.n	80016e0 <main+0xc8>
		} else {
			sampling_period = (double) (t_final_time_u16 - t_start_time_u16);
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <main+0x140>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <main+0x13c>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff47 	bl	8000564 <__aeabi_i2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4920      	ldr	r1, [pc, #128]	; (800175c <main+0x144>)
 80016dc:	e9c1 2300 	strd	r2, r3, [r1]
		}

		time_ms += sampling_period;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <main+0x138>)
 80016e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <main+0x144>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7fe fdee 	bl	80002cc <__adddf3>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4916      	ldr	r1, [pc, #88]	; (8001750 <main+0x138>)
 80016f6:	e9c1 2300 	strd	r2, r3, [r1]

		sprintf(send_temp_values, "%lf %lf %lf\r\n", time_ms,
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <main+0x138>)
 80016fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <main+0x14c>)
 8001702:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001706:	4917      	ldr	r1, [pc, #92]	; (8001764 <main+0x14c>)
 8001708:	e9d1 0118 	ldrd	r0, r1, [r1, #96]	; 0x60
 800170c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001710:	e9cd 2300 	strd	r2, r3, [sp]
 8001714:	4622      	mov	r2, r4
 8001716:	462b      	mov	r3, r5
 8001718:	4914      	ldr	r1, [pc, #80]	; (800176c <main+0x154>)
 800171a:	4811      	ldr	r0, [pc, #68]	; (8001760 <main+0x148>)
 800171c:	f004 fbbc 	bl	8005e98 <siprintf>
				pitot_tube.wind_speed_d64,
				pitot_tube.filtered_wind_speed_d64);

		HAL_UART_Transmit(&huart3, (uint8_t*) send_temp_values,
				strlen(send_temp_values), HAL_MAX_DELAY);
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <main+0x148>)
 8001722:	f7fe fd75 	bl	8000210 <strlen>
 8001726:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart3, (uint8_t*) send_temp_values,
 8001728:	b29a      	uxth	r2, r3
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	490c      	ldr	r1, [pc, #48]	; (8001760 <main+0x148>)
 8001730:	480f      	ldr	r0, [pc, #60]	; (8001770 <main+0x158>)
 8001732:	f002 ffcf 	bl	80046d4 <HAL_UART_Transmit>

		HAL_Delay(5);
 8001736:	2005      	movs	r0, #5
 8001738:	f000 fcd0 	bl	80020dc <HAL_Delay>
		pitot_tube.get_wind_speed();
 800173c:	e797      	b.n	800166e <main+0x56>
 800173e:	bf00      	nop
	...
 8001748:	d2f1a9fc 	.word	0xd2f1a9fc
 800174c:	3f50624d 	.word	0x3f50624d
 8001750:	20000430 	.word	0x20000430
 8001754:	20000440 	.word	0x20000440
 8001758:	20000442 	.word	0x20000442
 800175c:	20000438 	.word	0x20000438
 8001760:	20000444 	.word	0x20000444
 8001764:	200003c8 	.word	0x200003c8
 8001768:	20000328 	.word	0x20000328
 800176c:	080099f8 	.word	0x080099f8
 8001770:	20000244 	.word	0x20000244

08001774 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b0b4      	sub	sp, #208	; 0xd0
 8001778:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800177a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800177e:	2230      	movs	r2, #48	; 0x30
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f003 fd00 	bl	8005188 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001788:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	2284      	movs	r2, #132	; 0x84
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fcf1 	bl	8005188 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80017a6:	f001 fea1 	bl	80034ec <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <_Z18SystemClock_Configv+0x12c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a3c      	ldr	r2, [pc, #240]	; (80018a0 <_Z18SystemClock_Configv+0x12c>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <_Z18SystemClock_Configv+0x12c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <_Z18SystemClock_Configv+0x130>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017ca:	4a36      	ldr	r2, [pc, #216]	; (80018a4 <_Z18SystemClock_Configv+0x130>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <_Z18SystemClock_Configv+0x130>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017de:	2301      	movs	r3, #1
 80017e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 4;
 80017fa:	2304      	movs	r3, #4
 80017fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001800:	2348      	movs	r3, #72	; 0x48
 8001802:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 3;
 800180c:	2303      	movs	r3, #3
 800180e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001812:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001816:	4618      	mov	r0, r3
 8001818:	f001 fe78 	bl	800350c <HAL_RCC_OscConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 800182c:	f000 f98c 	bl	8001b48 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001830:	230f      	movs	r3, #15
 8001832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001836:	2302      	movs	r3, #2
 8001838:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001846:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001850:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001854:	2102      	movs	r1, #2
 8001856:	4618      	mov	r0, r3
 8001858:	f002 f8fc 	bl	8003a54 <HAL_RCC_ClockConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf14      	ite	ne
 8001862:	2301      	movne	r3, #1
 8001864:	2300      	moveq	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <_Z18SystemClock_Configv+0xfc>
		Error_Handler();
 800186c:	f000 f96c 	bl	8001b48 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001874:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001876:	2300      	movs	r3, #0
 8001878:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	4618      	mov	r0, r3
 8001880:	f002 faea 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <_Z18SystemClock_Configv+0x124>
		Error_Handler();
 8001894:	f000 f958 	bl	8001b48 <Error_Handler>
	}
}
 8001898:	bf00      	nop
 800189a:	37d0      	adds	r7, #208	; 0xd0
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000

080018a8 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80018ae:	463b      	mov	r3, r7
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018bc:	4a26      	ldr	r2, [pc, #152]	; (8001958 <_ZL12MX_ADC1_Initv+0xb0>)
 80018be:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018e8:	4a1c      	ldr	r2, [pc, #112]	; (800195c <_ZL12MX_ADC1_Initv+0xb4>)
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 8001902:	2201      	movs	r2, #1
 8001904:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001906:	4813      	ldr	r0, [pc, #76]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 8001908:	f000 fc0c 	bl	8002124 <HAL_ADC_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf14      	ite	ne
 8001912:	2301      	movne	r3, #1
 8001914:	2300      	moveq	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <_ZL12MX_ADC1_Initv+0x78>
		Error_Handler();
 800191c:	f000 f914 	bl	8001b48 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001920:	2303      	movs	r3, #3
 8001922:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001924:	2301      	movs	r3, #1
 8001926:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <_ZL12MX_ADC1_Initv+0xac>)
 8001932:	f000 fdd5 	bl	80024e0 <HAL_ADC_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf14      	ite	ne
 800193c:	2301      	movne	r3, #1
 800193e:	2300      	moveq	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <_ZL12MX_ADC1_Initv+0xa2>
		Error_Handler();
 8001946:	f000 f8ff 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200001fc 	.word	0x200001fc
 8001958:	40012000 	.word	0x40012000
 800195c:	0f000001 	.word	0x0f000001

08001960 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <_ZL19MX_USART3_UART_Initv+0x64>)
 8001968:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80019a4:	f002 fe48 	bl	8004638 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <_ZL19MX_USART3_UART_Initv+0x5c>
		Error_Handler();
 80019b8:	f000 f8c6 	bl	8001b48 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000244 	.word	0x20000244
 80019c4:	40004800 	.word	0x40004800

080019c8 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <_ZL11MX_DMA_Initv+0x38>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <_ZL11MX_DMA_Initv+0x38>)
 80019d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <_ZL11MX_DMA_Initv+0x38>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	200c      	movs	r0, #12
 80019ec:	f001 f897 	bl	8002b1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (DMA1_Stream1_IRQn);
 80019f0:	200c      	movs	r0, #12
 80019f2:	f001 f8b0 	bl	8002b56 <HAL_NVIC_EnableIRQ>

}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	; 0x30
 8001a08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a45      	ldr	r2, [pc, #276]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a32:	4b40      	ldr	r3, [pc, #256]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a3f      	ldr	r2, [pc, #252]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a39      	ldr	r2, [pc, #228]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <_ZL12MX_GPIO_Initv+0x130>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ab0:	4821      	ldr	r0, [pc, #132]	; (8001b38 <_ZL12MX_GPIO_Initv+0x134>)
 8001ab2:	f001 fd01 	bl	80034b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2140      	movs	r1, #64	; 0x40
 8001aba:	4820      	ldr	r0, [pc, #128]	; (8001b3c <_ZL12MX_GPIO_Initv+0x138>)
 8001abc:	f001 fcfc 	bl	80034b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <_ZL12MX_GPIO_Initv+0x13c>)
 8001ac8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	481b      	ldr	r0, [pc, #108]	; (8001b44 <_ZL12MX_GPIO_Initv+0x140>)
 8001ad6:	f001 fb43 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001ada:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ade:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4811      	ldr	r0, [pc, #68]	; (8001b38 <_ZL12MX_GPIO_Initv+0x134>)
 8001af4:	f001 fb34 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001af8:	2340      	movs	r3, #64	; 0x40
 8001afa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480b      	ldr	r0, [pc, #44]	; (8001b3c <_ZL12MX_GPIO_Initv+0x138>)
 8001b10:	f001 fb26 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	4619      	mov	r1, r3
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <_ZL12MX_GPIO_Initv+0x138>)
 8001b28:	f001 fb1a 	bl	8003160 <HAL_GPIO_Init>

}
 8001b2c:	bf00      	nop
 8001b2e:	3730      	adds	r7, #48	; 0x30
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40021800 	.word	0x40021800
 8001b40:	10110000 	.word	0x10110000
 8001b44:	40020800 	.word	0x40020800

08001b48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b50:	e7fe      	b.n	8001b50 <Error_Handler+0x8>
 8001b52:	0000      	movs	r0, r0
 8001b54:	0000      	movs	r0, r0
	...

08001b58 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d11a      	bne.n	8001b9e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d115      	bne.n	8001b9e <_Z41__static_initialization_and_destruction_0ii+0x46>
fast_kalman_filter_t kalman_filter_ct(0.1, 10, 0.01, 0.04, 0.04, 25);
 8001b72:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001ba8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8001b76:	ed9f 4b0e 	vldr	d4, [pc, #56]	; 8001bb0 <_Z41__static_initialization_and_destruction_0ii+0x58>
 8001b7a:	ed9f 3b0d 	vldr	d3, [pc, #52]	; 8001bb0 <_Z41__static_initialization_and_destruction_0ii+0x58>
 8001b7e:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 8001bb8 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8001b82:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001bc0 <_Z41__static_initialization_and_destruction_0ii+0x68>
 8001b86:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8001bc8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8001b8a:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001b8c:	f7ff fa4e 	bl	800102c <_ZN20fast_kalman_filter_tC1Edddddd>
measurement_analog_value_c pitot_tube(&hadc1, ADC_CHANNEL_3, 4096);
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	2203      	movs	r2, #3
 8001b96:	490f      	ldr	r1, [pc, #60]	; (8001bd4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001b98:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001b9a:	f7ff fbb5 	bl	8001308 <_ZN26measurement_analog_value_cC1EP17ADC_HandleTypeDefmt>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	40390000 	.word	0x40390000
 8001bb0:	47ae147b 	.word	0x47ae147b
 8001bb4:	3fa47ae1 	.word	0x3fa47ae1
 8001bb8:	47ae147b 	.word	0x47ae147b
 8001bbc:	3f847ae1 	.word	0x3f847ae1
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	40240000 	.word	0x40240000
 8001bc8:	9999999a 	.word	0x9999999a
 8001bcc:	3fb99999 	.word	0x3fb99999
 8001bd0:	20000328 	.word	0x20000328
 8001bd4:	200001fc 	.word	0x200001fc
 8001bd8:	200003c8 	.word	0x200003c8

08001bdc <_GLOBAL__sub_I_hadc1>:
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff ffb7 	bl	8001b58 <_Z41__static_initialization_and_destruction_0ii>
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_MspInit+0x44>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_MspInit+0x44>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_MspInit+0x44>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_MspInit+0x44>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_MspInit+0x44>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_MspInit+0x44>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_ADC_MspInit+0x74>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d123      	bne.n	8001c9e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_ADC_MspInit+0x78>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_ADC_MspInit+0x78>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_ADC_MspInit+0x78>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_ADC_MspInit+0x78>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_ADC_MspInit+0x78>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_ADC_MspInit+0x78>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c86:	2308      	movs	r3, #8
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <HAL_ADC_MspInit+0x7c>)
 8001c9a:	f001 fa61 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	; 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40012000 	.word	0x40012000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <HAL_UART_MspInit+0xdc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d157      	bne.n	8001d86 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_UART_MspInit+0xe0>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a2e      	ldr	r2, [pc, #184]	; (8001d94 <HAL_UART_MspInit+0xe0>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_UART_MspInit+0xe0>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HAL_UART_MspInit+0xe0>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a28      	ldr	r2, [pc, #160]	; (8001d94 <HAL_UART_MspInit+0xe0>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_UART_MspInit+0xe0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	481d      	ldr	r0, [pc, #116]	; (8001d98 <HAL_UART_MspInit+0xe4>)
 8001d24:	f001 fa1c 	bl	8003160 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d28:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d2a:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_UART_MspInit+0xec>)
 8001d2c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d34:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d48:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d5c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d6a:	480c      	ldr	r0, [pc, #48]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d6c:	f000 ff0e 	bl	8002b8c <HAL_DMA_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001d76:	f7ff fee7 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d7e:	671a      	str	r2, [r3, #112]	; 0x70
 8001d80:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <HAL_UART_MspInit+0xe8>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40004800 	.word	0x40004800
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	200002c8 	.word	0x200002c8
 8001da0:	40026028 	.word	0x40026028

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler+0x4>

08001daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <MemManage_Handler+0x4>

08001db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 f954 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <DMA1_Stream1_IRQHandler+0x10>)
 8001dfe:	f000 ff73 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200002c8 	.word	0x200002c8

08001e0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	return 1;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_kill>:

int _kill(int pid, int sig)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e26:	f003 f985 	bl	8005134 <__errno>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2216      	movs	r2, #22
 8001e2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_exit>:

void _exit (int status)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ffe7 	bl	8001e1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e4e:	e7fe      	b.n	8001e4e <_exit+0x12>

08001e50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	e00a      	b.n	8001e78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e62:	f3af 8000 	nop.w
 8001e66:	4601      	mov	r1, r0
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	60ba      	str	r2, [r7, #8]
 8001e6e:	b2ca      	uxtb	r2, r1
 8001e70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbf0      	blt.n	8001e62 <_read+0x12>
	}

return len;
 8001e80:	687b      	ldr	r3, [r7, #4]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e009      	b.n	8001eb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	60ba      	str	r2, [r7, #8]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	dbf1      	blt.n	8001e9c <_write+0x12>
	}
	return len;
 8001eb8:	687b      	ldr	r3, [r7, #4]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_close>:

int _close(int file)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eea:	605a      	str	r2, [r3, #4]
	return 0;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_isatty>:

int _isatty(int file)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
	return 1;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f003 f8ea 	bl	8005134 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20050000 	.word	0x20050000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	200004a8 	.word	0x200004a8
 8001f94:	200004c8 	.word	0x200004c8

08001f98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <SystemInit+0x20>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <SystemInit+0x20>)
 8001fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fc2:	490e      	ldr	r1, [pc, #56]	; (8001ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fc4:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fd8:	4c0b      	ldr	r4, [pc, #44]	; (8002008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fe6:	f7ff ffd7 	bl	8001f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fea:	f003 f8a9 	bl	8005140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fee:	f7ff fb13 	bl	8001618 <main>
  bx  lr    
 8001ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002000:	08009ef0 	.word	0x08009ef0
  ldr r2, =_sbss
 8002004:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002008:	200004c8 	.word	0x200004c8

0800200c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_Init+0x28>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_Init+0x28>)
 800201a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 fd71 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	2000      	movs	r0, #0
 8002028:	f000 f808 	bl	800203c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fdde 	bl	8001bec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00

0800203c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x54>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x58>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fd89 	bl	8002b72 <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 fd51 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_InitTick+0x5c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000000 	.word	0x20000000
 8002094:	20000008 	.word	0x20000008
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000008 	.word	0x20000008
 80020c0:	200004b4 	.word	0x200004b4

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	200004b4 	.word	0x200004b4

080020dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff ffee 	bl	80020c4 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d005      	beq.n	8002102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_Delay+0x44>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002102:	bf00      	nop
 8002104:	f7ff ffde 	bl	80020c4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d8f7      	bhi.n	8002104 <HAL_Delay+0x28>
  {
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000008 	.word	0x20000008

08002124 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e031      	b.n	800219e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fd76 	bl	8001c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HAL_ADC_Init+0x84>)
 8002168:	4013      	ands	r3, r2
 800216a:	f043 0202 	orr.w	r2, r3, #2
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fafe 	bl	8002774 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
 800218e:	e001      	b.n	8002194 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	ffffeefd 	.word	0xffffeefd

080021ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Start+0x1a>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0ad      	b.n	8002322 <HAL_ADC_Start+0x176>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d018      	beq.n	800220e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_ADC_Start+0x184>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a50      	ldr	r2, [pc, #320]	; (8002334 <HAL_ADC_Start+0x188>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9a      	lsrs	r2, r3, #18
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002200:	e002      	b.n	8002208 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3b01      	subs	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d175      	bne.n	8002308 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002220:	4b45      	ldr	r3, [pc, #276]	; (8002338 <HAL_ADC_Start+0x18c>)
 8002222:	4013      	ands	r3, r2
 8002224:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002242:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002256:	d106      	bne.n	8002266 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	f023 0206 	bic.w	r2, r3, #6
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
 8002264:	e002      	b.n	800226c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800227c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_ADC_Start+0x190>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d143      	bne.n	8002320 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	e03a      	b.n	8002320 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a24      	ldr	r2, [pc, #144]	; (8002340 <HAL_ADC_Start+0x194>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d10e      	bne.n	80022d2 <HAL_ADC_Start+0x126>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022d0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_ADC_Start+0x190>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d120      	bne.n	8002320 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_ADC_Start+0x198>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d11b      	bne.n	8002320 <HAL_ADC_Start+0x174>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d114      	bne.n	8002320 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	e00b      	b.n	8002320 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f043 0210 	orr.w	r2, r3, #16
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000000 	.word	0x20000000
 8002334:	431bde83 	.word	0x431bde83
 8002338:	fffff8fe 	.word	0xfffff8fe
 800233c:	40012300 	.word	0x40012300
 8002340:	40012000 	.word	0x40012000
 8002344:	40012200 	.word	0x40012200

08002348 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_Stop+0x16>
 800235a:	2302      	movs	r3, #2
 800235c:	e01f      	b.n	800239e <HAL_ADC_Stop+0x56>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_ADC_Stop+0x64>)
 800238a:	4013      	ands	r3, r2
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	ffffeefe 	.word	0xffffeefe

080023b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023cc:	d113      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023dc:	d10b      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f043 0220 	orr.w	r2, r3, #32
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e063      	b.n	80024be <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80023f6:	f7ff fe65 	bl	80020c4 <HAL_GetTick>
 80023fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023fc:	e021      	b.n	8002442 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d01d      	beq.n	8002442 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_ADC_PollForConversion+0x6c>
 800240c:	f7ff fe5a 	bl	80020c4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d212      	bcs.n	8002442 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d00b      	beq.n	8002442 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f043 0204 	orr.w	r2, r3, #4
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e03d      	b.n	80024be <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b02      	cmp	r3, #2
 800244e:	d1d6      	bne.n	80023fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0212 	mvn.w	r2, #18
 8002458:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d123      	bne.n	80024bc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	d11f      	bne.n	80024bc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e12a      	b.n	8002752 <HAL_ADC_ConfigChannel+0x272>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b09      	cmp	r3, #9
 800250a:	d93a      	bls.n	8002582 <HAL_ADC_ConfigChannel+0xa2>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002514:	d035      	beq.n	8002582 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68d9      	ldr	r1, [r3, #12]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	3b1e      	subs	r3, #30
 800252c:	2207      	movs	r2, #7
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	400a      	ands	r2, r1
 800253a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a87      	ldr	r2, [pc, #540]	; (8002760 <HAL_ADC_ConfigChannel+0x280>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10a      	bne.n	800255c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68d9      	ldr	r1, [r3, #12]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	061a      	lsls	r2, r3, #24
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255a:	e035      	b.n	80025c8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68d9      	ldr	r1, [r3, #12]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	4618      	mov	r0, r3
 800256e:	4603      	mov	r3, r0
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4403      	add	r3, r0
 8002574:	3b1e      	subs	r3, #30
 8002576:	409a      	lsls	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002580:	e022      	b.n	80025c8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6919      	ldr	r1, [r3, #16]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	2207      	movs	r2, #7
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43da      	mvns	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	400a      	ands	r2, r1
 80025a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6919      	ldr	r1, [r3, #16]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	4603      	mov	r3, r0
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4403      	add	r3, r0
 80025be:	409a      	lsls	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d824      	bhi.n	800261a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3b05      	subs	r3, #5
 80025e2:	221f      	movs	r2, #31
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43da      	mvns	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	400a      	ands	r2, r1
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4618      	mov	r0, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	3b05      	subs	r3, #5
 800260c:	fa00 f203 	lsl.w	r2, r0, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	635a      	str	r2, [r3, #52]	; 0x34
 8002618:	e04c      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d824      	bhi.n	800266c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b23      	subs	r3, #35	; 0x23
 8002634:	221f      	movs	r2, #31
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	400a      	ands	r2, r1
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b23      	subs	r3, #35	; 0x23
 800265e:	fa00 f203 	lsl.w	r2, r0, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
 800266a:	e023      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b41      	subs	r3, #65	; 0x41
 800267e:	221f      	movs	r2, #31
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43da      	mvns	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	400a      	ands	r2, r1
 800268c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	4618      	mov	r0, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3b41      	subs	r3, #65	; 0x41
 80026a8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2a      	ldr	r2, [pc, #168]	; (8002764 <HAL_ADC_ConfigChannel+0x284>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10a      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1f4>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026c6:	d105      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_ADC_ConfigChannel+0x288>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a26      	ldr	r2, [pc, #152]	; (8002768 <HAL_ADC_ConfigChannel+0x288>)
 80026ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80026d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a22      	ldr	r2, [pc, #136]	; (8002764 <HAL_ADC_ConfigChannel+0x284>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d109      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x212>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b12      	cmp	r3, #18
 80026e4:	d105      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_ADC_ConfigChannel+0x288>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <HAL_ADC_ConfigChannel+0x288>)
 80026ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026f0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_ADC_ConfigChannel+0x284>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d125      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x268>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a17      	ldr	r2, [pc, #92]	; (8002760 <HAL_ADC_ConfigChannel+0x280>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d003      	beq.n	800270e <HAL_ADC_ConfigChannel+0x22e>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b11      	cmp	r3, #17
 800270c:	d11c      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_ADC_ConfigChannel+0x288>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a15      	ldr	r2, [pc, #84]	; (8002768 <HAL_ADC_ConfigChannel+0x288>)
 8002714:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002718:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a10      	ldr	r2, [pc, #64]	; (8002760 <HAL_ADC_ConfigChannel+0x280>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d111      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_ADC_ConfigChannel+0x28c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a11      	ldr	r2, [pc, #68]	; (8002770 <HAL_ADC_ConfigChannel+0x290>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0c9a      	lsrs	r2, r3, #18
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800273a:	e002      	b.n	8002742 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3b01      	subs	r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f9      	bne.n	800273c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	10000012 	.word	0x10000012
 8002764:	40012000 	.word	0x40012000
 8002768:	40012300 	.word	0x40012300
 800276c:	20000000 	.word	0x20000000
 8002770:	431bde83 	.word	0x431bde83

08002774 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800277c:	4b78      	ldr	r3, [pc, #480]	; (8002960 <ADC_Init+0x1ec>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a77      	ldr	r2, [pc, #476]	; (8002960 <ADC_Init+0x1ec>)
 8002782:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002786:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002788:	4b75      	ldr	r3, [pc, #468]	; (8002960 <ADC_Init+0x1ec>)
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4973      	ldr	r1, [pc, #460]	; (8002960 <ADC_Init+0x1ec>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	021a      	lsls	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	4a58      	ldr	r2, [pc, #352]	; (8002964 <ADC_Init+0x1f0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d022      	beq.n	800284e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002816:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6899      	ldr	r1, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002838:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6899      	ldr	r1, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	e00f      	b.n	800286e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800285c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800286c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0202 	bic.w	r2, r2, #2
 800287c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6899      	ldr	r1, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	005a      	lsls	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01b      	beq.n	80028d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	3b01      	subs	r3, #1
 80028c8:	035a      	lsls	r2, r3, #13
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e007      	b.n	80028e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	3b01      	subs	r3, #1
 8002900:	051a      	lsls	r2, r3, #20
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002918:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6899      	ldr	r1, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002926:	025a      	lsls	r2, r3, #9
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	029a      	lsls	r2, r3, #10
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	609a      	str	r2, [r3, #8]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40012300 	.word	0x40012300
 8002964:	0f000001 	.word	0x0f000001

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00
 80029ac:	05fa0000 	.word	0x05fa0000

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4907      	ldr	r1, [pc, #28]	; (8002a04 <__NVIC_EnableIRQ+0x38>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
         );
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f7ff ff8e 	bl	8002a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff29 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b30:	f7ff ff3e 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7ff ff8e 	bl	8002a5c <NVIC_EncodePriority>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff5d 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff31 	bl	80029cc <__NVIC_EnableIRQ>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffa2 	bl	8002ac4 <SysTick_Config>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff fa94 	bl	80020c4 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e099      	b.n	8002cdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc8:	e00f      	b.n	8002bea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bca:	f7ff fa7b 	bl	80020c4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d908      	bls.n	8002bea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2203      	movs	r2, #3
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e078      	b.n	8002cdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e8      	bne.n	8002bca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <HAL_DMA_Init+0x158>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d107      	bne.n	8002c54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f023 0307 	bic.w	r3, r3, #7
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d117      	bne.n	8002cae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00e      	beq.n	8002cae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f9e9 	bl	8003068 <DMA_CheckFifoParam>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2240      	movs	r2, #64	; 0x40
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002caa:	2301      	movs	r3, #1
 8002cac:	e016      	b.n	8002cdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9a0 	bl	8002ffc <DMA_CalcBaseAndBitshift>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	223f      	movs	r2, #63	; 0x3f
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	f010803f 	.word	0xf010803f

08002ce8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cf4:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <HAL_DMA_IRQHandler+0x258>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a92      	ldr	r2, [pc, #584]	; (8002f44 <HAL_DMA_IRQHandler+0x25c>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0a9b      	lsrs	r3, r3, #10
 8002d00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	2208      	movs	r2, #8
 8002d14:	409a      	lsls	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01a      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0204 	bic.w	r2, r2, #4
 8002d3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	2208      	movs	r2, #8
 8002d42:	409a      	lsls	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	2201      	movs	r2, #1
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2201      	movs	r2, #1
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f043 0202 	orr.w	r2, r3, #2
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	2204      	movs	r2, #4
 8002d90:	409a      	lsls	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d012      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	2204      	movs	r2, #4
 8002dae:	409a      	lsls	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d043      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d03c      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	2210      	movs	r2, #16
 8002de4:	409a      	lsls	r2, r3
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d018      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d108      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d024      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
 8002e16:	e01f      	b.n	8002e58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01b      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
 8002e28:	e016      	b.n	8002e58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d107      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0208 	bic.w	r2, r2, #8
 8002e46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 808e 	beq.w	8002f86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8086 	beq.w	8002f86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	2220      	movs	r2, #32
 8002e80:	409a      	lsls	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d136      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0216 	bic.w	r2, r2, #22
 8002ea0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_DMA_IRQHandler+0x1da>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0208 	bic.w	r2, r2, #8
 8002ed0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	223f      	movs	r2, #63	; 0x3f
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d07d      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
        }
        return;
 8002efe:	e078      	b.n	8002ff2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01c      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d108      	bne.n	8002f2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d030      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
 8002f2c:	e02b      	b.n	8002f86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d027      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
 8002f3e:	e022      	b.n	8002f86 <HAL_DMA_IRQHandler+0x29e>
 8002f40:	20000000 	.word	0x20000000
 8002f44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0210 	bic.w	r2, r2, #16
 8002f64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d032      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d022      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d307      	bcc.n	8002fce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f2      	bne.n	8002fb2 <HAL_DMA_IRQHandler+0x2ca>
 8002fcc:	e000      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
 8002ff0:	e000      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ff2:	bf00      	nop
    }
  }
}
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop

08002ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3b10      	subs	r3, #16
 800300c:	4a13      	ldr	r2, [pc, #76]	; (800305c <DMA_CalcBaseAndBitshift+0x60>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <DMA_CalcBaseAndBitshift+0x64>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d908      	bls.n	800303c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <DMA_CalcBaseAndBitshift+0x68>)
 8003032:	4013      	ands	r3, r2
 8003034:	1d1a      	adds	r2, r3, #4
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	659a      	str	r2, [r3, #88]	; 0x58
 800303a:	e006      	b.n	800304a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <DMA_CalcBaseAndBitshift+0x68>)
 8003044:	4013      	ands	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	aaaaaaab 	.word	0xaaaaaaab
 8003060:	08009a20 	.word	0x08009a20
 8003064:	fffffc00 	.word	0xfffffc00

08003068 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11f      	bne.n	80030c2 <DMA_CheckFifoParam+0x5a>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d856      	bhi.n	8003136 <DMA_CheckFifoParam+0xce>
 8003088:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <DMA_CheckFifoParam+0x28>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030b3 	.word	0x080030b3
 8003098:	080030a1 	.word	0x080030a1
 800309c:	08003137 	.word	0x08003137
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d046      	beq.n	800313a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e043      	b.n	800313a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030ba:	d140      	bne.n	800313e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c0:	e03d      	b.n	800313e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ca:	d121      	bne.n	8003110 <DMA_CheckFifoParam+0xa8>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d837      	bhi.n	8003142 <DMA_CheckFifoParam+0xda>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <DMA_CheckFifoParam+0x70>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030ef 	.word	0x080030ef
 80030e0:	080030e9 	.word	0x080030e9
 80030e4:	08003101 	.word	0x08003101
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e030      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d025      	beq.n	8003146 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fe:	e022      	b.n	8003146 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003108:	d11f      	bne.n	800314a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800310e:	e01c      	b.n	800314a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d903      	bls.n	800311e <DMA_CheckFifoParam+0xb6>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d003      	beq.n	8003124 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800311c:	e018      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
      break;
 8003122:	e015      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e00b      	b.n	800314e <DMA_CheckFifoParam+0xe6>
      break;
 8003136:	bf00      	nop
 8003138:	e00a      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
 800313c:	e008      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
 8003140:	e006      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 8003142:	bf00      	nop
 8003144:	e004      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;   
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
    }
  } 
  
  return status; 
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	e175      	b.n	800346c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003180:	2201      	movs	r2, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	f040 8164 	bne.w	8003466 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d00b      	beq.n	80031be <HAL_GPIO_Init+0x5e>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d007      	beq.n	80031be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031b2:	2b11      	cmp	r3, #17
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b12      	cmp	r3, #18
 80031bc:	d130      	bne.n	8003220 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	2203      	movs	r2, #3
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f4:	2201      	movs	r2, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 0201 	and.w	r2, r3, #1
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x100>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b12      	cmp	r3, #18
 800325e:	d123      	bne.n	80032a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	08da      	lsrs	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3208      	adds	r2, #8
 8003268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	220f      	movs	r2, #15
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	08da      	lsrs	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3208      	adds	r2, #8
 80032a2:	69b9      	ldr	r1, [r7, #24]
 80032a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2203      	movs	r2, #3
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0203 	and.w	r2, r3, #3
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80be 	beq.w	8003466 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ea:	4b66      	ldr	r3, [pc, #408]	; (8003484 <HAL_GPIO_Init+0x324>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	4a65      	ldr	r2, [pc, #404]	; (8003484 <HAL_GPIO_Init+0x324>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	; 0x44
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_GPIO_Init+0x324>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003302:	4a61      	ldr	r2, [pc, #388]	; (8003488 <HAL_GPIO_Init+0x328>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a58      	ldr	r2, [pc, #352]	; (800348c <HAL_GPIO_Init+0x32c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d037      	beq.n	800339e <HAL_GPIO_Init+0x23e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a57      	ldr	r2, [pc, #348]	; (8003490 <HAL_GPIO_Init+0x330>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d031      	beq.n	800339a <HAL_GPIO_Init+0x23a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a56      	ldr	r2, [pc, #344]	; (8003494 <HAL_GPIO_Init+0x334>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d02b      	beq.n	8003396 <HAL_GPIO_Init+0x236>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a55      	ldr	r2, [pc, #340]	; (8003498 <HAL_GPIO_Init+0x338>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d025      	beq.n	8003392 <HAL_GPIO_Init+0x232>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a54      	ldr	r2, [pc, #336]	; (800349c <HAL_GPIO_Init+0x33c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01f      	beq.n	800338e <HAL_GPIO_Init+0x22e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a53      	ldr	r2, [pc, #332]	; (80034a0 <HAL_GPIO_Init+0x340>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d019      	beq.n	800338a <HAL_GPIO_Init+0x22a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a52      	ldr	r2, [pc, #328]	; (80034a4 <HAL_GPIO_Init+0x344>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a51      	ldr	r2, [pc, #324]	; (80034a8 <HAL_GPIO_Init+0x348>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00d      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a50      	ldr	r2, [pc, #320]	; (80034ac <HAL_GPIO_Init+0x34c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4f      	ldr	r2, [pc, #316]	; (80034b0 <HAL_GPIO_Init+0x350>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_GPIO_Init+0x21a>
 8003376:	2309      	movs	r3, #9
 8003378:	e012      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800337a:	230a      	movs	r3, #10
 800337c:	e010      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800337e:	2308      	movs	r3, #8
 8003380:	e00e      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 8003382:	2307      	movs	r3, #7
 8003384:	e00c      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 8003386:	2306      	movs	r3, #6
 8003388:	e00a      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800338a:	2305      	movs	r3, #5
 800338c:	e008      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800338e:	2304      	movs	r3, #4
 8003390:	e006      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 8003392:	2303      	movs	r3, #3
 8003394:	e004      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 8003396:	2302      	movs	r3, #2
 8003398:	e002      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_GPIO_Init+0x240>
 800339e:	2300      	movs	r3, #0
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	f002 0203 	and.w	r2, r2, #3
 80033a6:	0092      	lsls	r2, r2, #2
 80033a8:	4093      	lsls	r3, r2
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033b0:	4935      	ldr	r1, [pc, #212]	; (8003488 <HAL_GPIO_Init+0x328>)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	3302      	adds	r3, #2
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033be:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <HAL_GPIO_Init+0x354>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e2:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <HAL_GPIO_Init+0x354>)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033e8:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <HAL_GPIO_Init+0x354>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340c:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <HAL_GPIO_Init+0x354>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003412:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <HAL_GPIO_Init+0x354>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003436:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <HAL_GPIO_Init+0x354>)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_GPIO_Init+0x354>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <HAL_GPIO_Init+0x354>)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3301      	adds	r3, #1
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b0f      	cmp	r3, #15
 8003470:	f67f ae86 	bls.w	8003180 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3724      	adds	r7, #36	; 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	40013800 	.word	0x40013800
 800348c:	40020000 	.word	0x40020000
 8003490:	40020400 	.word	0x40020400
 8003494:	40020800 	.word	0x40020800
 8003498:	40020c00 	.word	0x40020c00
 800349c:	40021000 	.word	0x40021000
 80034a0:	40021400 	.word	0x40021400
 80034a4:	40021800 	.word	0x40021800
 80034a8:	40021c00 	.word	0x40021c00
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40022400 	.word	0x40022400
 80034b4:	40013c00 	.word	0x40013c00

080034b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
 80034c4:	4613      	mov	r3, r2
 80034c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c8:	787b      	ldrb	r3, [r7, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034d4:	e003      	b.n	80034de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034d6:	887b      	ldrh	r3, [r7, #2]
 80034d8:	041a      	lsls	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	619a      	str	r2, [r3, #24]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a04      	ldr	r2, [pc, #16]	; (8003508 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fa:	6013      	str	r3, [r2, #0]
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40007000 	.word	0x40007000

0800350c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003514:	2300      	movs	r3, #0
 8003516:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e291      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 8087 	beq.w	800363e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003530:	4b96      	ldr	r3, [pc, #600]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b04      	cmp	r3, #4
 800353a:	d00c      	beq.n	8003556 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353c:	4b93      	ldr	r3, [pc, #588]	; (800378c <HAL_RCC_OscConfig+0x280>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b08      	cmp	r3, #8
 8003546:	d112      	bne.n	800356e <HAL_RCC_OscConfig+0x62>
 8003548:	4b90      	ldr	r3, [pc, #576]	; (800378c <HAL_RCC_OscConfig+0x280>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003554:	d10b      	bne.n	800356e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003556:	4b8d      	ldr	r3, [pc, #564]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d06c      	beq.n	800363c <HAL_RCC_OscConfig+0x130>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d168      	bne.n	800363c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e26b      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x7a>
 8003578:	4b84      	ldr	r3, [pc, #528]	; (800378c <HAL_RCC_OscConfig+0x280>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a83      	ldr	r2, [pc, #524]	; (800378c <HAL_RCC_OscConfig+0x280>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	e02e      	b.n	80035e4 <HAL_RCC_OscConfig+0xd8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x9c>
 800358e:	4b7f      	ldr	r3, [pc, #508]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7e      	ldr	r2, [pc, #504]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b7c      	ldr	r3, [pc, #496]	; (800378c <HAL_RCC_OscConfig+0x280>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7b      	ldr	r2, [pc, #492]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80035a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e01d      	b.n	80035e4 <HAL_RCC_OscConfig+0xd8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0xc0>
 80035b2:	4b76      	ldr	r3, [pc, #472]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a75      	ldr	r2, [pc, #468]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b73      	ldr	r3, [pc, #460]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a72      	ldr	r2, [pc, #456]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0xd8>
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a6e      	ldr	r2, [pc, #440]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b6c      	ldr	r3, [pc, #432]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a6b      	ldr	r2, [pc, #428]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80035de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fe fd6a 	bl	80020c4 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fe fd66 	bl	80020c4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e21f      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0xe8>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe fd56 	bl	80020c4 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800361c:	f7fe fd52 	bl	80020c4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e20b      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	4b57      	ldr	r3, [pc, #348]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x110>
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d069      	beq.n	800371e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364a:	4b50      	ldr	r3, [pc, #320]	; (800378c <HAL_RCC_OscConfig+0x280>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b4d      	ldr	r3, [pc, #308]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11c      	bne.n	800369c <HAL_RCC_OscConfig+0x190>
 8003662:	4b4a      	ldr	r3, [pc, #296]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_RCC_OscConfig+0x17a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e1df      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	4b41      	ldr	r3, [pc, #260]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	493d      	ldr	r1, [pc, #244]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	e040      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d023      	beq.n	80036ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a4:	4b39      	ldr	r3, [pc, #228]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a38      	ldr	r2, [pc, #224]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe fd08 	bl	80020c4 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b8:	f7fe fd04 	bl	80020c4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1bd      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	4b30      	ldr	r3, [pc, #192]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b2d      	ldr	r3, [pc, #180]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4929      	ldr	r1, [pc, #164]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
 80036ea:	e018      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ec:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a26      	ldr	r2, [pc, #152]	; (800378c <HAL_RCC_OscConfig+0x280>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe fce4 	bl	80020c4 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003700:	f7fe fce0 	bl	80020c4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e199      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d038      	beq.n	800379c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d019      	beq.n	8003766 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003732:	4b16      	ldr	r3, [pc, #88]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003736:	4a15      	ldr	r2, [pc, #84]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373e:	f7fe fcc1 	bl	80020c4 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003746:	f7fe fcbd 	bl	80020c4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e176      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_RCC_OscConfig+0x280>)
 800375a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x23a>
 8003764:	e01a      	b.n	800379c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <HAL_RCC_OscConfig+0x280>)
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	4a08      	ldr	r2, [pc, #32]	; (800378c <HAL_RCC_OscConfig+0x280>)
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fe fca7 	bl	80020c4 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377a:	f7fe fca3 	bl	80020c4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d903      	bls.n	8003790 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e15c      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
 800378c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003790:	4b91      	ldr	r3, [pc, #580]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ee      	bne.n	800377a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80a4 	beq.w	80038f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037aa:	4b8b      	ldr	r3, [pc, #556]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	4b88      	ldr	r3, [pc, #544]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a87      	ldr	r2, [pc, #540]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
 80037c2:	4b85      	ldr	r3, [pc, #532]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ce:	2301      	movs	r3, #1
 80037d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d2:	4b82      	ldr	r3, [pc, #520]	; (80039dc <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d118      	bne.n	8003810 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037de:	4b7f      	ldr	r3, [pc, #508]	; (80039dc <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7e      	ldr	r2, [pc, #504]	; (80039dc <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ea:	f7fe fc6b 	bl	80020c4 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f2:	f7fe fc67 	bl	80020c4 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b64      	cmp	r3, #100	; 0x64
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e120      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003804:	4b75      	ldr	r3, [pc, #468]	; (80039dc <HAL_RCC_OscConfig+0x4d0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d106      	bne.n	8003826 <HAL_RCC_OscConfig+0x31a>
 8003818:	4b6f      	ldr	r3, [pc, #444]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	4a6e      	ldr	r2, [pc, #440]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6713      	str	r3, [r2, #112]	; 0x70
 8003824:	e02d      	b.n	8003882 <HAL_RCC_OscConfig+0x376>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0x33c>
 800382e:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	6713      	str	r3, [r2, #112]	; 0x70
 800383a:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a66      	ldr	r2, [pc, #408]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003840:	f023 0304 	bic.w	r3, r3, #4
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
 8003846:	e01c      	b.n	8003882 <HAL_RCC_OscConfig+0x376>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b05      	cmp	r3, #5
 800384e:	d10c      	bne.n	800386a <HAL_RCC_OscConfig+0x35e>
 8003850:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a60      	ldr	r2, [pc, #384]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003856:	f043 0304 	orr.w	r3, r3, #4
 800385a:	6713      	str	r3, [r2, #112]	; 0x70
 800385c:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	4a5d      	ldr	r2, [pc, #372]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
 8003868:	e00b      	b.n	8003882 <HAL_RCC_OscConfig+0x376>
 800386a:	4b5b      	ldr	r3, [pc, #364]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	4a5a      	ldr	r2, [pc, #360]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6713      	str	r3, [r2, #112]	; 0x70
 8003876:	4b58      	ldr	r3, [pc, #352]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 800387c:	f023 0304 	bic.w	r3, r3, #4
 8003880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d015      	beq.n	80038b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388a:	f7fe fc1b 	bl	80020c4 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fe fc17 	bl	80020c4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e0ce      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a8:	4b4b      	ldr	r3, [pc, #300]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ee      	beq.n	8003892 <HAL_RCC_OscConfig+0x386>
 80038b4:	e014      	b.n	80038e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7fe fc05 	bl	80020c4 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fe fc01 	bl	80020c4 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e0b8      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d4:	4b40      	ldr	r3, [pc, #256]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ee      	bne.n	80038be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	4a3b      	ldr	r2, [pc, #236]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80a4 	beq.w	8003a44 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d06b      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d149      	bne.n	80039a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a30      	ldr	r2, [pc, #192]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800391a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe fbd2 	bl	80020c4 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe fbce 	bl	80020c4 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e087      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	4b28      	ldr	r3, [pc, #160]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69da      	ldr	r2, [r3, #28]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	019b      	lsls	r3, r3, #6
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	3b01      	subs	r3, #1
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	061b      	lsls	r3, r3, #24
 8003966:	4313      	orrs	r3, r2
 8003968:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 800396a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800396e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe fba2 	bl	80020c4 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe fb9e 	bl	80020c4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e057      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x478>
 80039a2:	e04f      	b.n	8003a44 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80039aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fb88 	bl	80020c4 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe fb84 	bl	80020c4 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e03d      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCC_OscConfig+0x4cc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4ac>
 80039d6:	e035      	b.n	8003a44 <HAL_RCC_OscConfig+0x538>
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_RCC_OscConfig+0x544>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d028      	beq.n	8003a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d121      	bne.n	8003a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d11a      	bne.n	8003a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a10:	4013      	ands	r3, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d111      	bne.n	8003a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800

08003a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0d0      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b6a      	ldr	r3, [pc, #424]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d910      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b67      	ldr	r3, [pc, #412]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 020f 	bic.w	r2, r3, #15
 8003a82:	4965      	ldr	r1, [pc, #404]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b63      	ldr	r3, [pc, #396]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0b8      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab4:	4b59      	ldr	r3, [pc, #356]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a58      	ldr	r2, [pc, #352]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003acc:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a52      	ldr	r2, [pc, #328]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad8:	4b50      	ldr	r3, [pc, #320]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	494d      	ldr	r1, [pc, #308]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d040      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d115      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e07f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d107      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e073      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b26:	4b3d      	ldr	r3, [pc, #244]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e06b      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b36:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f023 0203 	bic.w	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4936      	ldr	r1, [pc, #216]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b48:	f7fe fabc 	bl	80020c4 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b50:	f7fe fab8 	bl	80020c4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e053      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 020c 	and.w	r2, r3, #12
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d1eb      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b78:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d210      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 020f 	bic.w	r2, r3, #15
 8003b8e:	4922      	ldr	r1, [pc, #136]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e032      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4916      	ldr	r1, [pc, #88]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	490e      	ldr	r1, [pc, #56]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003be6:	f000 f821 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003bea:	4602      	mov	r2, r0
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	490a      	ldr	r1, [pc, #40]	; (8003c20 <HAL_RCC_ClockConfig+0x1cc>)
 8003bf8:	5ccb      	ldrb	r3, [r1, r3]
 8003bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <HAL_RCC_ClockConfig+0x1d0>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1d4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fa18 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	08009a08 	.word	0x08009a08
 8003c24:	20000000 	.word	0x20000000
 8003c28:	20000004 	.word	0x20000004

08003c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c44:	4b67      	ldr	r3, [pc, #412]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d00d      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x40>
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	f200 80bd 	bhi.w	8003dd0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x34>
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c5e:	e0b7      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b61      	ldr	r3, [pc, #388]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c62:	60bb      	str	r3, [r7, #8]
      break;
 8003c64:	e0b7      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c66:	4b61      	ldr	r3, [pc, #388]	; (8003dec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c68:	60bb      	str	r3, [r7, #8]
      break;
 8003c6a:	e0b4      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c6c:	4b5d      	ldr	r3, [pc, #372]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c74:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c76:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d04d      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c82:	4b58      	ldr	r3, [pc, #352]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	ea02 0800 	and.w	r8, r2, r0
 8003c9a:	ea03 0901 	and.w	r9, r3, r1
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	014b      	lsls	r3, r1, #5
 8003cac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cb0:	0142      	lsls	r2, r0, #5
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	ebb0 0008 	subs.w	r0, r0, r8
 8003cba:	eb61 0109 	sbc.w	r1, r1, r9
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	018b      	lsls	r3, r1, #6
 8003cc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ccc:	0182      	lsls	r2, r0, #6
 8003cce:	1a12      	subs	r2, r2, r0
 8003cd0:	eb63 0301 	sbc.w	r3, r3, r1
 8003cd4:	f04f 0000 	mov.w	r0, #0
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	00d9      	lsls	r1, r3, #3
 8003cde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ce2:	00d0      	lsls	r0, r2, #3
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	eb12 0208 	adds.w	r2, r2, r8
 8003cec:	eb43 0309 	adc.w	r3, r3, r9
 8003cf0:	f04f 0000 	mov.w	r0, #0
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	0259      	lsls	r1, r3, #9
 8003cfa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003cfe:	0250      	lsls	r0, r2, #9
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	f7fc ffda 	bl	8000cc8 <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4613      	mov	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e04a      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	099b      	lsrs	r3, r3, #6
 8003d24:	461a      	mov	r2, r3
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	ea02 0400 	and.w	r4, r2, r0
 8003d36:	ea03 0501 	and.w	r5, r3, r1
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	014b      	lsls	r3, r1, #5
 8003d48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d4c:	0142      	lsls	r2, r0, #5
 8003d4e:	4610      	mov	r0, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	1b00      	subs	r0, r0, r4
 8003d54:	eb61 0105 	sbc.w	r1, r1, r5
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	018b      	lsls	r3, r1, #6
 8003d62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d66:	0182      	lsls	r2, r0, #6
 8003d68:	1a12      	subs	r2, r2, r0
 8003d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d6e:	f04f 0000 	mov.w	r0, #0
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	00d9      	lsls	r1, r3, #3
 8003d78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d7c:	00d0      	lsls	r0, r2, #3
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	1912      	adds	r2, r2, r4
 8003d84:	eb45 0303 	adc.w	r3, r5, r3
 8003d88:	f04f 0000 	mov.w	r0, #0
 8003d8c:	f04f 0100 	mov.w	r1, #0
 8003d90:	0299      	lsls	r1, r3, #10
 8003d92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d96:	0290      	lsls	r0, r2, #10
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	f7fc ff8e 	bl	8000cc8 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4613      	mov	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	60bb      	str	r3, [r7, #8]
      break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dd2:	60bb      	str	r3, [r7, #8]
      break;
 8003dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	00f42400 	.word	0x00f42400
 8003dec:	007a1200 	.word	0x007a1200

08003df0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000000 	.word	0x20000000

08003e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e0c:	f7ff fff0 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0a9b      	lsrs	r3, r3, #10
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4903      	ldr	r1, [pc, #12]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	08009a18 	.word	0x08009a18

08003e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e34:	f7ff ffdc 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0b5b      	lsrs	r3, r3, #13
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	08009a18 	.word	0x08009a18

08003e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e80:	4b69      	ldr	r3, [pc, #420]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a68      	ldr	r2, [pc, #416]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e8a:	6093      	str	r3, [r2, #8]
 8003e8c:	4b66      	ldr	r3, [pc, #408]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	4964      	ldr	r1, [pc, #400]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb2:	4b5d      	ldr	r3, [pc, #372]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	4959      	ldr	r1, [pc, #356]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d017      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	494a      	ldr	r1, [pc, #296]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 808b 	beq.w	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f3c:	4b3a      	ldr	r3, [pc, #232]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	4a39      	ldr	r2, [pc, #228]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6413      	str	r3, [r2, #64]	; 0x40
 8003f48:	4b37      	ldr	r3, [pc, #220]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f54:	4b35      	ldr	r3, [pc, #212]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a34      	ldr	r2, [pc, #208]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f60:	f7fe f8b0 	bl	80020c4 <HAL_GetTick>
 8003f64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f68:	f7fe f8ac 	bl	80020c4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	; 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e357      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d035      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d02e      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa4:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fcc:	4b16      	ldr	r3, [pc, #88]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d114      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fe f874 	bl	80020c4 <HAL_GetTick>
 8003fdc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fe f870 	bl	80020c4 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e319      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0ee      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400e:	d111      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800401e:	400b      	ands	r3, r1
 8004020:	4901      	ldr	r1, [pc, #4]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
 8004026:	e00b      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004028:	40023800 	.word	0x40023800
 800402c:	40007000 	.word	0x40007000
 8004030:	0ffffcff 	.word	0x0ffffcff
 8004034:	4bb1      	ldr	r3, [pc, #708]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4ab0      	ldr	r2, [pc, #704]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800403a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800403e:	6093      	str	r3, [r2, #8]
 8004040:	4bae      	ldr	r3, [pc, #696]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004042:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	49ab      	ldr	r1, [pc, #684]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	d010      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800405e:	4ba7      	ldr	r3, [pc, #668]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004064:	4aa5      	ldr	r2, [pc, #660]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800406e:	4ba3      	ldr	r3, [pc, #652]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004070:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	49a0      	ldr	r1, [pc, #640]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800408c:	4b9b      	ldr	r3, [pc, #620]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409a:	4998      	ldr	r1, [pc, #608]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040ae:	4b93      	ldr	r3, [pc, #588]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040bc:	498f      	ldr	r1, [pc, #572]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d0:	4b8a      	ldr	r3, [pc, #552]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040de:	4987      	ldr	r1, [pc, #540]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040f2:	4b82      	ldr	r3, [pc, #520]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	497e      	ldr	r1, [pc, #504]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004114:	4b79      	ldr	r3, [pc, #484]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f023 0203 	bic.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	4976      	ldr	r1, [pc, #472]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004136:	4b71      	ldr	r3, [pc, #452]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f023 020c 	bic.w	r2, r3, #12
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004144:	496d      	ldr	r1, [pc, #436]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004158:	4b68      	ldr	r3, [pc, #416]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	4965      	ldr	r1, [pc, #404]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800417a:	4b60      	ldr	r3, [pc, #384]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	495c      	ldr	r1, [pc, #368]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800419c:	4b57      	ldr	r3, [pc, #348]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	4954      	ldr	r1, [pc, #336]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041be:	4b4f      	ldr	r3, [pc, #316]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	494b      	ldr	r1, [pc, #300]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041e0:	4b46      	ldr	r3, [pc, #280]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	4943      	ldr	r1, [pc, #268]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004202:	4b3e      	ldr	r3, [pc, #248]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	493a      	ldr	r1, [pc, #232]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004224:	4b35      	ldr	r3, [pc, #212]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004232:	4932      	ldr	r1, [pc, #200]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d011      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004246:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004254:	4929      	ldr	r1, [pc, #164]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004264:	d101      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004276:	2301      	movs	r3, #1
 8004278:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004286:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	4919      	ldr	r1, [pc, #100]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042a8:	4b14      	ldr	r3, [pc, #80]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b8:	4910      	ldr	r1, [pc, #64]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d006      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80d9 	beq.w	8004486 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e0:	f7fd fef0 	bl	80020c4 <HAL_GetTick>
 80042e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042e6:	e00b      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042e8:	f7fd feec 	bl	80020c4 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d904      	bls.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e197      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80042fa:	bf00      	nop
 80042fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004300:	4b6c      	ldr	r3, [pc, #432]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ed      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d021      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	2b00      	cmp	r3, #0
 800431e:	d11d      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004320:	4b64      	ldr	r3, [pc, #400]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800432e:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004334:	0e1b      	lsrs	r3, r3, #24
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	019a      	lsls	r2, r3, #6
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	431a      	orrs	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	061b      	lsls	r3, r3, #24
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	071b      	lsls	r3, r3, #28
 8004354:	4957      	ldr	r1, [pc, #348]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800437a:	2b00      	cmp	r3, #0
 800437c:	d02e      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004386:	d129      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004388:	4b4a      	ldr	r3, [pc, #296]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004396:	4b47      	ldr	r3, [pc, #284]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439c:	0f1b      	lsrs	r3, r3, #28
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	019a      	lsls	r2, r3, #6
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	431a      	orrs	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	071b      	lsls	r3, r3, #28
 80043bc:	493d      	ldr	r1, [pc, #244]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043c4:	4b3b      	ldr	r3, [pc, #236]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ca:	f023 021f 	bic.w	r2, r3, #31
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	3b01      	subs	r3, #1
 80043d4:	4937      	ldr	r1, [pc, #220]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01d      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043e8:	4b32      	ldr	r3, [pc, #200]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ee:	0e1b      	lsrs	r3, r3, #24
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fc:	0f1b      	lsrs	r3, r3, #28
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	019a      	lsls	r2, r3, #6
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	431a      	orrs	r2, r3
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	431a      	orrs	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	071b      	lsls	r3, r3, #28
 800441c:	4925      	ldr	r1, [pc, #148]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d011      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	019a      	lsls	r2, r3, #6
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	071b      	lsls	r3, r3, #28
 800444c:	4919      	ldr	r1, [pc, #100]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800445e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004460:	f7fd fe30 	bl	80020c4 <HAL_GetTick>
 8004464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004468:	f7fd fe2c 	bl	80020c4 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e0d7      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800447a:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b01      	cmp	r3, #1
 800448a:	f040 80cd 	bne.w	8004628 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449a:	f7fd fe13 	bl	80020c4 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044a2:	f7fd fe0f 	bl	80020c4 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b64      	cmp	r3, #100	; 0x64
 80044ae:	d903      	bls.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e0ba      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80044b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044b8:	4b5e      	ldr	r3, [pc, #376]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044c4:	d0ed      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x682>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d02e      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d12a      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044ee:	4b51      	ldr	r3, [pc, #324]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044fc:	4b4d      	ldr	r3, [pc, #308]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	0f1b      	lsrs	r3, r3, #28
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	019a      	lsls	r2, r3, #6
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	061b      	lsls	r3, r3, #24
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	071b      	lsls	r3, r3, #28
 8004522:	4944      	ldr	r1, [pc, #272]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800452a:	4b42      	ldr	r3, [pc, #264]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800452c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004530:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	3b01      	subs	r3, #1
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	493d      	ldr	r1, [pc, #244]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d022      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004558:	d11d      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800455a:	4b36      	ldr	r3, [pc, #216]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	0e1b      	lsrs	r3, r3, #24
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004568:	4b32      	ldr	r3, [pc, #200]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	0f1b      	lsrs	r3, r3, #28
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	019a      	lsls	r2, r3, #6
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	431a      	orrs	r2, r3
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	061b      	lsls	r3, r3, #24
 8004588:	431a      	orrs	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	071b      	lsls	r3, r3, #28
 800458e:	4929      	ldr	r1, [pc, #164]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d028      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045a2:	4b24      	ldr	r3, [pc, #144]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	0e1b      	lsrs	r3, r3, #24
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045b0:	4b20      	ldr	r3, [pc, #128]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	0c1b      	lsrs	r3, r3, #16
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	019a      	lsls	r2, r3, #6
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	041b      	lsls	r3, r3, #16
 80045c8:	431a      	orrs	r2, r3
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	071b      	lsls	r3, r3, #28
 80045d6:	4917      	ldr	r1, [pc, #92]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	4911      	ldr	r1, [pc, #68]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045f4:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a0e      	ldr	r2, [pc, #56]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004600:	f7fd fd60 	bl	80020c4 <HAL_GetTick>
 8004604:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004608:	f7fd fd5c 	bl	80020c4 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e007      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800461a:	4b06      	ldr	r3, [pc, #24]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004626:	d1ef      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800

08004638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e040      	b.n	80046cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fd fb2a 	bl	8001cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2224      	movs	r2, #36	; 0x24
 8004664:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8c0 	bl	80047fc <UART_SetConfig>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e022      	b.n	80046cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fb16 	bl	8004cc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb9d 	bl	8004e04 <UART_CheckIdleState>
 80046ca:	4603      	mov	r3, r0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	; 0x28
 80046d8:	af02      	add	r7, sp, #8
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	f040 8081 	bne.w	80047f0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_UART_Transmit+0x26>
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e079      	b.n	80047f2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_UART_Transmit+0x38>
 8004708:	2302      	movs	r3, #2
 800470a:	e072      	b.n	80047f2 <HAL_UART_Transmit+0x11e>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2221      	movs	r2, #33	; 0x21
 8004720:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004722:	f7fd fccf 	bl	80020c4 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	88fa      	ldrh	r2, [r7, #6]
 800472c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004740:	d108      	bne.n	8004754 <HAL_UART_Transmit+0x80>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	e003      	b.n	800475c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004758:	2300      	movs	r3, #0
 800475a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004764:	e02c      	b.n	80047c0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2200      	movs	r2, #0
 800476e:	2180      	movs	r1, #128	; 0x80
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fb7a 	bl	8004e6a <UART_WaitOnFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e038      	b.n	80047f2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10b      	bne.n	800479e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004794:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	3302      	adds	r3, #2
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	e007      	b.n	80047ae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	3301      	adds	r3, #1
 80047ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1cc      	bne.n	8004766 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2200      	movs	r2, #0
 80047d4:	2140      	movs	r1, #64	; 0x40
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fb47 	bl	8004e6a <UART_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e005      	b.n	80047f2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4ba7      	ldr	r3, [pc, #668]	; (8004ac4 <UART_SetConfig+0x2c8>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	6979      	ldr	r1, [r7, #20]
 8004830:	430b      	orrs	r3, r1
 8004832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	430a      	orrs	r2, r1
 800486c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a95      	ldr	r2, [pc, #596]	; (8004ac8 <UART_SetConfig+0x2cc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d120      	bne.n	80048ba <UART_SetConfig+0xbe>
 8004878:	4b94      	ldr	r3, [pc, #592]	; (8004acc <UART_SetConfig+0x2d0>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b03      	cmp	r3, #3
 8004884:	d816      	bhi.n	80048b4 <UART_SetConfig+0xb8>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0x90>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048a9 	.word	0x080048a9
 8004894:	080048a3 	.word	0x080048a3
 8004898:	080048af 	.word	0x080048af
 800489c:	2301      	movs	r3, #1
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e14f      	b.n	8004b42 <UART_SetConfig+0x346>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e14c      	b.n	8004b42 <UART_SetConfig+0x346>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e149      	b.n	8004b42 <UART_SetConfig+0x346>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e146      	b.n	8004b42 <UART_SetConfig+0x346>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e143      	b.n	8004b42 <UART_SetConfig+0x346>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a84      	ldr	r2, [pc, #528]	; (8004ad0 <UART_SetConfig+0x2d4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d132      	bne.n	800492a <UART_SetConfig+0x12e>
 80048c4:	4b81      	ldr	r3, [pc, #516]	; (8004acc <UART_SetConfig+0x2d0>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d828      	bhi.n	8004924 <UART_SetConfig+0x128>
 80048d2:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <UART_SetConfig+0xdc>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	0800490d 	.word	0x0800490d
 80048dc:	08004925 	.word	0x08004925
 80048e0:	08004925 	.word	0x08004925
 80048e4:	08004925 	.word	0x08004925
 80048e8:	08004919 	.word	0x08004919
 80048ec:	08004925 	.word	0x08004925
 80048f0:	08004925 	.word	0x08004925
 80048f4:	08004925 	.word	0x08004925
 80048f8:	08004913 	.word	0x08004913
 80048fc:	08004925 	.word	0x08004925
 8004900:	08004925 	.word	0x08004925
 8004904:	08004925 	.word	0x08004925
 8004908:	0800491f 	.word	0x0800491f
 800490c:	2300      	movs	r3, #0
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e117      	b.n	8004b42 <UART_SetConfig+0x346>
 8004912:	2302      	movs	r3, #2
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e114      	b.n	8004b42 <UART_SetConfig+0x346>
 8004918:	2304      	movs	r3, #4
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e111      	b.n	8004b42 <UART_SetConfig+0x346>
 800491e:	2308      	movs	r3, #8
 8004920:	77fb      	strb	r3, [r7, #31]
 8004922:	e10e      	b.n	8004b42 <UART_SetConfig+0x346>
 8004924:	2310      	movs	r3, #16
 8004926:	77fb      	strb	r3, [r7, #31]
 8004928:	e10b      	b.n	8004b42 <UART_SetConfig+0x346>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a69      	ldr	r2, [pc, #420]	; (8004ad4 <UART_SetConfig+0x2d8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d120      	bne.n	8004976 <UART_SetConfig+0x17a>
 8004934:	4b65      	ldr	r3, [pc, #404]	; (8004acc <UART_SetConfig+0x2d0>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800493e:	2b30      	cmp	r3, #48	; 0x30
 8004940:	d013      	beq.n	800496a <UART_SetConfig+0x16e>
 8004942:	2b30      	cmp	r3, #48	; 0x30
 8004944:	d814      	bhi.n	8004970 <UART_SetConfig+0x174>
 8004946:	2b20      	cmp	r3, #32
 8004948:	d009      	beq.n	800495e <UART_SetConfig+0x162>
 800494a:	2b20      	cmp	r3, #32
 800494c:	d810      	bhi.n	8004970 <UART_SetConfig+0x174>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <UART_SetConfig+0x15c>
 8004952:	2b10      	cmp	r3, #16
 8004954:	d006      	beq.n	8004964 <UART_SetConfig+0x168>
 8004956:	e00b      	b.n	8004970 <UART_SetConfig+0x174>
 8004958:	2300      	movs	r3, #0
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e0f1      	b.n	8004b42 <UART_SetConfig+0x346>
 800495e:	2302      	movs	r3, #2
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e0ee      	b.n	8004b42 <UART_SetConfig+0x346>
 8004964:	2304      	movs	r3, #4
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e0eb      	b.n	8004b42 <UART_SetConfig+0x346>
 800496a:	2308      	movs	r3, #8
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e0e8      	b.n	8004b42 <UART_SetConfig+0x346>
 8004970:	2310      	movs	r3, #16
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e0e5      	b.n	8004b42 <UART_SetConfig+0x346>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a57      	ldr	r2, [pc, #348]	; (8004ad8 <UART_SetConfig+0x2dc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d120      	bne.n	80049c2 <UART_SetConfig+0x1c6>
 8004980:	4b52      	ldr	r3, [pc, #328]	; (8004acc <UART_SetConfig+0x2d0>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800498a:	2bc0      	cmp	r3, #192	; 0xc0
 800498c:	d013      	beq.n	80049b6 <UART_SetConfig+0x1ba>
 800498e:	2bc0      	cmp	r3, #192	; 0xc0
 8004990:	d814      	bhi.n	80049bc <UART_SetConfig+0x1c0>
 8004992:	2b80      	cmp	r3, #128	; 0x80
 8004994:	d009      	beq.n	80049aa <UART_SetConfig+0x1ae>
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d810      	bhi.n	80049bc <UART_SetConfig+0x1c0>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <UART_SetConfig+0x1a8>
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d006      	beq.n	80049b0 <UART_SetConfig+0x1b4>
 80049a2:	e00b      	b.n	80049bc <UART_SetConfig+0x1c0>
 80049a4:	2300      	movs	r3, #0
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e0cb      	b.n	8004b42 <UART_SetConfig+0x346>
 80049aa:	2302      	movs	r3, #2
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e0c8      	b.n	8004b42 <UART_SetConfig+0x346>
 80049b0:	2304      	movs	r3, #4
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e0c5      	b.n	8004b42 <UART_SetConfig+0x346>
 80049b6:	2308      	movs	r3, #8
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e0c2      	b.n	8004b42 <UART_SetConfig+0x346>
 80049bc:	2310      	movs	r3, #16
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e0bf      	b.n	8004b42 <UART_SetConfig+0x346>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a45      	ldr	r2, [pc, #276]	; (8004adc <UART_SetConfig+0x2e0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d125      	bne.n	8004a18 <UART_SetConfig+0x21c>
 80049cc:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <UART_SetConfig+0x2d0>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049da:	d017      	beq.n	8004a0c <UART_SetConfig+0x210>
 80049dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049e0:	d817      	bhi.n	8004a12 <UART_SetConfig+0x216>
 80049e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e6:	d00b      	beq.n	8004a00 <UART_SetConfig+0x204>
 80049e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ec:	d811      	bhi.n	8004a12 <UART_SetConfig+0x216>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <UART_SetConfig+0x1fe>
 80049f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f6:	d006      	beq.n	8004a06 <UART_SetConfig+0x20a>
 80049f8:	e00b      	b.n	8004a12 <UART_SetConfig+0x216>
 80049fa:	2300      	movs	r3, #0
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e0a0      	b.n	8004b42 <UART_SetConfig+0x346>
 8004a00:	2302      	movs	r3, #2
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e09d      	b.n	8004b42 <UART_SetConfig+0x346>
 8004a06:	2304      	movs	r3, #4
 8004a08:	77fb      	strb	r3, [r7, #31]
 8004a0a:	e09a      	b.n	8004b42 <UART_SetConfig+0x346>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e097      	b.n	8004b42 <UART_SetConfig+0x346>
 8004a12:	2310      	movs	r3, #16
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e094      	b.n	8004b42 <UART_SetConfig+0x346>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a30      	ldr	r2, [pc, #192]	; (8004ae0 <UART_SetConfig+0x2e4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d125      	bne.n	8004a6e <UART_SetConfig+0x272>
 8004a22:	4b2a      	ldr	r3, [pc, #168]	; (8004acc <UART_SetConfig+0x2d0>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a30:	d017      	beq.n	8004a62 <UART_SetConfig+0x266>
 8004a32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a36:	d817      	bhi.n	8004a68 <UART_SetConfig+0x26c>
 8004a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3c:	d00b      	beq.n	8004a56 <UART_SetConfig+0x25a>
 8004a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a42:	d811      	bhi.n	8004a68 <UART_SetConfig+0x26c>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <UART_SetConfig+0x254>
 8004a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4c:	d006      	beq.n	8004a5c <UART_SetConfig+0x260>
 8004a4e:	e00b      	b.n	8004a68 <UART_SetConfig+0x26c>
 8004a50:	2301      	movs	r3, #1
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e075      	b.n	8004b42 <UART_SetConfig+0x346>
 8004a56:	2302      	movs	r3, #2
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e072      	b.n	8004b42 <UART_SetConfig+0x346>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e06f      	b.n	8004b42 <UART_SetConfig+0x346>
 8004a62:	2308      	movs	r3, #8
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e06c      	b.n	8004b42 <UART_SetConfig+0x346>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e069      	b.n	8004b42 <UART_SetConfig+0x346>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1c      	ldr	r2, [pc, #112]	; (8004ae4 <UART_SetConfig+0x2e8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d137      	bne.n	8004ae8 <UART_SetConfig+0x2ec>
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <UART_SetConfig+0x2d0>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a86:	d017      	beq.n	8004ab8 <UART_SetConfig+0x2bc>
 8004a88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a8c:	d817      	bhi.n	8004abe <UART_SetConfig+0x2c2>
 8004a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a92:	d00b      	beq.n	8004aac <UART_SetConfig+0x2b0>
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a98:	d811      	bhi.n	8004abe <UART_SetConfig+0x2c2>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <UART_SetConfig+0x2aa>
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d006      	beq.n	8004ab2 <UART_SetConfig+0x2b6>
 8004aa4:	e00b      	b.n	8004abe <UART_SetConfig+0x2c2>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e04a      	b.n	8004b42 <UART_SetConfig+0x346>
 8004aac:	2302      	movs	r3, #2
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e047      	b.n	8004b42 <UART_SetConfig+0x346>
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e044      	b.n	8004b42 <UART_SetConfig+0x346>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e041      	b.n	8004b42 <UART_SetConfig+0x346>
 8004abe:	2310      	movs	r3, #16
 8004ac0:	77fb      	strb	r3, [r7, #31]
 8004ac2:	e03e      	b.n	8004b42 <UART_SetConfig+0x346>
 8004ac4:	efff69f3 	.word	0xefff69f3
 8004ac8:	40011000 	.word	0x40011000
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40004400 	.word	0x40004400
 8004ad4:	40004800 	.word	0x40004800
 8004ad8:	40004c00 	.word	0x40004c00
 8004adc:	40005000 	.word	0x40005000
 8004ae0:	40011400 	.word	0x40011400
 8004ae4:	40007800 	.word	0x40007800
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a71      	ldr	r2, [pc, #452]	; (8004cb4 <UART_SetConfig+0x4b8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d125      	bne.n	8004b3e <UART_SetConfig+0x342>
 8004af2:	4b71      	ldr	r3, [pc, #452]	; (8004cb8 <UART_SetConfig+0x4bc>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004afc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b00:	d017      	beq.n	8004b32 <UART_SetConfig+0x336>
 8004b02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b06:	d817      	bhi.n	8004b38 <UART_SetConfig+0x33c>
 8004b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b0c:	d00b      	beq.n	8004b26 <UART_SetConfig+0x32a>
 8004b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b12:	d811      	bhi.n	8004b38 <UART_SetConfig+0x33c>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <UART_SetConfig+0x324>
 8004b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b1c:	d006      	beq.n	8004b2c <UART_SetConfig+0x330>
 8004b1e:	e00b      	b.n	8004b38 <UART_SetConfig+0x33c>
 8004b20:	2300      	movs	r3, #0
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e00d      	b.n	8004b42 <UART_SetConfig+0x346>
 8004b26:	2302      	movs	r3, #2
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e00a      	b.n	8004b42 <UART_SetConfig+0x346>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e007      	b.n	8004b42 <UART_SetConfig+0x346>
 8004b32:	2308      	movs	r3, #8
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e004      	b.n	8004b42 <UART_SetConfig+0x346>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e001      	b.n	8004b42 <UART_SetConfig+0x346>
 8004b3e:	2310      	movs	r3, #16
 8004b40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4a:	d15b      	bne.n	8004c04 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004b4c:	7ffb      	ldrb	r3, [r7, #31]
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d827      	bhi.n	8004ba2 <UART_SetConfig+0x3a6>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0x35c>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b85 	.word	0x08004b85
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	08004ba3 	.word	0x08004ba3
 8004b68:	08004b93 	.word	0x08004b93
 8004b6c:	08004ba3 	.word	0x08004ba3
 8004b70:	08004ba3 	.word	0x08004ba3
 8004b74:	08004ba3 	.word	0x08004ba3
 8004b78:	08004b9b 	.word	0x08004b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f7ff f944 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8004b80:	61b8      	str	r0, [r7, #24]
        break;
 8004b82:	e013      	b.n	8004bac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b84:	f7ff f954 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004b88:	61b8      	str	r0, [r7, #24]
        break;
 8004b8a:	e00f      	b.n	8004bac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b8c:	4b4b      	ldr	r3, [pc, #300]	; (8004cbc <UART_SetConfig+0x4c0>)
 8004b8e:	61bb      	str	r3, [r7, #24]
        break;
 8004b90:	e00c      	b.n	8004bac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b92:	f7ff f84b 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8004b96:	61b8      	str	r0, [r7, #24]
        break;
 8004b98:	e008      	b.n	8004bac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ba0:	e004      	b.n	8004bac <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	77bb      	strb	r3, [r7, #30]
        break;
 8004baa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d074      	beq.n	8004c9c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	005a      	lsls	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	441a      	add	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	d916      	bls.n	8004bfe <UART_SetConfig+0x402>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd6:	d212      	bcs.n	8004bfe <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f023 030f 	bic.w	r3, r3, #15
 8004be0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	89fb      	ldrh	r3, [r7, #14]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	89fa      	ldrh	r2, [r7, #14]
 8004bfa:	60da      	str	r2, [r3, #12]
 8004bfc:	e04e      	b.n	8004c9c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	77bb      	strb	r3, [r7, #30]
 8004c02:	e04b      	b.n	8004c9c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c04:	7ffb      	ldrb	r3, [r7, #31]
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d827      	bhi.n	8004c5a <UART_SetConfig+0x45e>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <UART_SetConfig+0x414>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c3d 	.word	0x08004c3d
 8004c18:	08004c45 	.word	0x08004c45
 8004c1c:	08004c5b 	.word	0x08004c5b
 8004c20:	08004c4b 	.word	0x08004c4b
 8004c24:	08004c5b 	.word	0x08004c5b
 8004c28:	08004c5b 	.word	0x08004c5b
 8004c2c:	08004c5b 	.word	0x08004c5b
 8004c30:	08004c53 	.word	0x08004c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c34:	f7ff f8e8 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8004c38:	61b8      	str	r0, [r7, #24]
        break;
 8004c3a:	e013      	b.n	8004c64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c3c:	f7ff f8f8 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004c40:	61b8      	str	r0, [r7, #24]
        break;
 8004c42:	e00f      	b.n	8004c64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c44:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <UART_SetConfig+0x4c0>)
 8004c46:	61bb      	str	r3, [r7, #24]
        break;
 8004c48:	e00c      	b.n	8004c64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4a:	f7fe ffef 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8004c4e:	61b8      	str	r0, [r7, #24]
        break;
 8004c50:	e008      	b.n	8004c64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c56:	61bb      	str	r3, [r7, #24]
        break;
 8004c58:	e004      	b.n	8004c64 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	77bb      	strb	r3, [r7, #30]
        break;
 8004c62:	bf00      	nop
    }

    if (pclk != 0U)
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d018      	beq.n	8004c9c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	085a      	lsrs	r2, r3, #1
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	441a      	add	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b0f      	cmp	r3, #15
 8004c84:	d908      	bls.n	8004c98 <UART_SetConfig+0x49c>
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8c:	d204      	bcs.n	8004c98 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	e001      	b.n	8004c9c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ca8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40007c00 	.word	0x40007c00
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	00f42400 	.word	0x00f42400

08004cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01a      	beq.n	8004dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dbe:	d10a      	bne.n	8004dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e14:	f7fd f956 	bl	80020c4 <HAL_GetTick>
 8004e18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d10e      	bne.n	8004e46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f817 	bl	8004e6a <UART_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e00d      	b.n	8004e62 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	4613      	mov	r3, r2
 8004e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7a:	e05e      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e82:	d05a      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e84:	f7fd f91e 	bl	80020c4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d302      	bcc.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d11b      	bne.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ea8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e043      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d02c      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eee:	d124      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e00f      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4013      	ands	r3, r2
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	bf0c      	ite	eq
 8004f4a:	2301      	moveq	r3, #1
 8004f4c:	2300      	movne	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d091      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <sqrt>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	ed2d 8b02 	vpush	{d8}
 8004f6a:	ec55 4b10 	vmov	r4, r5, d0
 8004f6e:	f000 f82d 	bl	8004fcc <__ieee754_sqrt>
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <sqrt+0x64>)
 8004f74:	eeb0 8a40 	vmov.f32	s16, s0
 8004f78:	eef0 8a60 	vmov.f32	s17, s1
 8004f7c:	f993 3000 	ldrsb.w	r3, [r3]
 8004f80:	3301      	adds	r3, #1
 8004f82:	d019      	beq.n	8004fb8 <sqrt+0x54>
 8004f84:	4622      	mov	r2, r4
 8004f86:	462b      	mov	r3, r5
 8004f88:	4620      	mov	r0, r4
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	f7fb fdee 	bl	8000b6c <__aeabi_dcmpun>
 8004f90:	b990      	cbnz	r0, 8004fb8 <sqrt+0x54>
 8004f92:	2200      	movs	r2, #0
 8004f94:	2300      	movs	r3, #0
 8004f96:	4620      	mov	r0, r4
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f7fb fdbf 	bl	8000b1c <__aeabi_dcmplt>
 8004f9e:	b158      	cbz	r0, 8004fb8 <sqrt+0x54>
 8004fa0:	f000 f8c8 	bl	8005134 <__errno>
 8004fa4:	2321      	movs	r3, #33	; 0x21
 8004fa6:	6003      	str	r3, [r0, #0]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2300      	movs	r3, #0
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	f7fb fc6c 	bl	800088c <__aeabi_ddiv>
 8004fb4:	ec41 0b18 	vmov	d8, r0, r1
 8004fb8:	eeb0 0a48 	vmov.f32	s0, s16
 8004fbc:	eef0 0a68 	vmov.f32	s1, s17
 8004fc0:	ecbd 8b02 	vpop	{d8}
 8004fc4:	bd38      	pop	{r3, r4, r5, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000009 	.word	0x20000009

08004fcc <__ieee754_sqrt>:
 8004fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd0:	ec55 4b10 	vmov	r4, r5, d0
 8004fd4:	4e56      	ldr	r6, [pc, #344]	; (8005130 <__ieee754_sqrt+0x164>)
 8004fd6:	43ae      	bics	r6, r5
 8004fd8:	ee10 0a10 	vmov	r0, s0
 8004fdc:	ee10 3a10 	vmov	r3, s0
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	462a      	mov	r2, r5
 8004fe4:	d110      	bne.n	8005008 <__ieee754_sqrt+0x3c>
 8004fe6:	ee10 2a10 	vmov	r2, s0
 8004fea:	462b      	mov	r3, r5
 8004fec:	f7fb fb24 	bl	8000638 <__aeabi_dmul>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	f7fb f968 	bl	80002cc <__adddf3>
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	460d      	mov	r5, r1
 8005000:	ec45 4b10 	vmov	d0, r4, r5
 8005004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005008:	2d00      	cmp	r5, #0
 800500a:	dc10      	bgt.n	800502e <__ieee754_sqrt+0x62>
 800500c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005010:	4330      	orrs	r0, r6
 8005012:	d0f5      	beq.n	8005000 <__ieee754_sqrt+0x34>
 8005014:	b15d      	cbz	r5, 800502e <__ieee754_sqrt+0x62>
 8005016:	ee10 2a10 	vmov	r2, s0
 800501a:	462b      	mov	r3, r5
 800501c:	ee10 0a10 	vmov	r0, s0
 8005020:	f7fb f952 	bl	80002c8 <__aeabi_dsub>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	f7fb fc30 	bl	800088c <__aeabi_ddiv>
 800502c:	e7e6      	b.n	8004ffc <__ieee754_sqrt+0x30>
 800502e:	1509      	asrs	r1, r1, #20
 8005030:	d076      	beq.n	8005120 <__ieee754_sqrt+0x154>
 8005032:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005036:	07ce      	lsls	r6, r1, #31
 8005038:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800503c:	bf5e      	ittt	pl
 800503e:	0fda      	lsrpl	r2, r3, #31
 8005040:	005b      	lslpl	r3, r3, #1
 8005042:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005046:	0fda      	lsrs	r2, r3, #31
 8005048:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800504c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005050:	2000      	movs	r0, #0
 8005052:	106d      	asrs	r5, r5, #1
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	f04f 0e16 	mov.w	lr, #22
 800505a:	4684      	mov	ip, r0
 800505c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005060:	eb0c 0401 	add.w	r4, ip, r1
 8005064:	4294      	cmp	r4, r2
 8005066:	bfde      	ittt	le
 8005068:	1b12      	suble	r2, r2, r4
 800506a:	eb04 0c01 	addle.w	ip, r4, r1
 800506e:	1840      	addle	r0, r0, r1
 8005070:	0052      	lsls	r2, r2, #1
 8005072:	f1be 0e01 	subs.w	lr, lr, #1
 8005076:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800507a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800507e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005082:	d1ed      	bne.n	8005060 <__ieee754_sqrt+0x94>
 8005084:	4671      	mov	r1, lr
 8005086:	2720      	movs	r7, #32
 8005088:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800508c:	4562      	cmp	r2, ip
 800508e:	eb04 060e 	add.w	r6, r4, lr
 8005092:	dc02      	bgt.n	800509a <__ieee754_sqrt+0xce>
 8005094:	d113      	bne.n	80050be <__ieee754_sqrt+0xf2>
 8005096:	429e      	cmp	r6, r3
 8005098:	d811      	bhi.n	80050be <__ieee754_sqrt+0xf2>
 800509a:	2e00      	cmp	r6, #0
 800509c:	eb06 0e04 	add.w	lr, r6, r4
 80050a0:	da43      	bge.n	800512a <__ieee754_sqrt+0x15e>
 80050a2:	f1be 0f00 	cmp.w	lr, #0
 80050a6:	db40      	blt.n	800512a <__ieee754_sqrt+0x15e>
 80050a8:	f10c 0801 	add.w	r8, ip, #1
 80050ac:	eba2 020c 	sub.w	r2, r2, ip
 80050b0:	429e      	cmp	r6, r3
 80050b2:	bf88      	it	hi
 80050b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80050b8:	1b9b      	subs	r3, r3, r6
 80050ba:	4421      	add	r1, r4
 80050bc:	46c4      	mov	ip, r8
 80050be:	0052      	lsls	r2, r2, #1
 80050c0:	3f01      	subs	r7, #1
 80050c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80050c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80050ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80050ce:	d1dd      	bne.n	800508c <__ieee754_sqrt+0xc0>
 80050d0:	4313      	orrs	r3, r2
 80050d2:	d006      	beq.n	80050e2 <__ieee754_sqrt+0x116>
 80050d4:	1c4c      	adds	r4, r1, #1
 80050d6:	bf13      	iteet	ne
 80050d8:	3101      	addne	r1, #1
 80050da:	3001      	addeq	r0, #1
 80050dc:	4639      	moveq	r1, r7
 80050de:	f021 0101 	bicne.w	r1, r1, #1
 80050e2:	1043      	asrs	r3, r0, #1
 80050e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80050e8:	0849      	lsrs	r1, r1, #1
 80050ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80050ee:	07c2      	lsls	r2, r0, #31
 80050f0:	bf48      	it	mi
 80050f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80050f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80050fa:	460c      	mov	r4, r1
 80050fc:	463d      	mov	r5, r7
 80050fe:	e77f      	b.n	8005000 <__ieee754_sqrt+0x34>
 8005100:	0ada      	lsrs	r2, r3, #11
 8005102:	3815      	subs	r0, #21
 8005104:	055b      	lsls	r3, r3, #21
 8005106:	2a00      	cmp	r2, #0
 8005108:	d0fa      	beq.n	8005100 <__ieee754_sqrt+0x134>
 800510a:	02d7      	lsls	r7, r2, #11
 800510c:	d50a      	bpl.n	8005124 <__ieee754_sqrt+0x158>
 800510e:	f1c1 0420 	rsb	r4, r1, #32
 8005112:	fa23 f404 	lsr.w	r4, r3, r4
 8005116:	1e4d      	subs	r5, r1, #1
 8005118:	408b      	lsls	r3, r1
 800511a:	4322      	orrs	r2, r4
 800511c:	1b41      	subs	r1, r0, r5
 800511e:	e788      	b.n	8005032 <__ieee754_sqrt+0x66>
 8005120:	4608      	mov	r0, r1
 8005122:	e7f0      	b.n	8005106 <__ieee754_sqrt+0x13a>
 8005124:	0052      	lsls	r2, r2, #1
 8005126:	3101      	adds	r1, #1
 8005128:	e7ef      	b.n	800510a <__ieee754_sqrt+0x13e>
 800512a:	46e0      	mov	r8, ip
 800512c:	e7be      	b.n	80050ac <__ieee754_sqrt+0xe0>
 800512e:	bf00      	nop
 8005130:	7ff00000 	.word	0x7ff00000

08005134 <__errno>:
 8005134:	4b01      	ldr	r3, [pc, #4]	; (800513c <__errno+0x8>)
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	2000000c 	.word	0x2000000c

08005140 <__libc_init_array>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4d0d      	ldr	r5, [pc, #52]	; (8005178 <__libc_init_array+0x38>)
 8005144:	4c0d      	ldr	r4, [pc, #52]	; (800517c <__libc_init_array+0x3c>)
 8005146:	1b64      	subs	r4, r4, r5
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	2600      	movs	r6, #0
 800514c:	42a6      	cmp	r6, r4
 800514e:	d109      	bne.n	8005164 <__libc_init_array+0x24>
 8005150:	4d0b      	ldr	r5, [pc, #44]	; (8005180 <__libc_init_array+0x40>)
 8005152:	4c0c      	ldr	r4, [pc, #48]	; (8005184 <__libc_init_array+0x44>)
 8005154:	f004 fc44 	bl	80099e0 <_init>
 8005158:	1b64      	subs	r4, r4, r5
 800515a:	10a4      	asrs	r4, r4, #2
 800515c:	2600      	movs	r6, #0
 800515e:	42a6      	cmp	r6, r4
 8005160:	d105      	bne.n	800516e <__libc_init_array+0x2e>
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	f855 3b04 	ldr.w	r3, [r5], #4
 8005168:	4798      	blx	r3
 800516a:	3601      	adds	r6, #1
 800516c:	e7ee      	b.n	800514c <__libc_init_array+0xc>
 800516e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005172:	4798      	blx	r3
 8005174:	3601      	adds	r6, #1
 8005176:	e7f2      	b.n	800515e <__libc_init_array+0x1e>
 8005178:	08009ee4 	.word	0x08009ee4
 800517c:	08009ee4 	.word	0x08009ee4
 8005180:	08009ee4 	.word	0x08009ee4
 8005184:	08009eec 	.word	0x08009eec

08005188 <memset>:
 8005188:	4402      	add	r2, r0
 800518a:	4603      	mov	r3, r0
 800518c:	4293      	cmp	r3, r2
 800518e:	d100      	bne.n	8005192 <memset+0xa>
 8005190:	4770      	bx	lr
 8005192:	f803 1b01 	strb.w	r1, [r3], #1
 8005196:	e7f9      	b.n	800518c <memset+0x4>

08005198 <__cvt>:
 8005198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	ec55 4b10 	vmov	r4, r5, d0
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	460e      	mov	r6, r1
 80051a4:	4619      	mov	r1, r3
 80051a6:	462b      	mov	r3, r5
 80051a8:	bfbb      	ittet	lt
 80051aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051ae:	461d      	movlt	r5, r3
 80051b0:	2300      	movge	r3, #0
 80051b2:	232d      	movlt	r3, #45	; 0x2d
 80051b4:	700b      	strb	r3, [r1, #0]
 80051b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051bc:	4691      	mov	r9, r2
 80051be:	f023 0820 	bic.w	r8, r3, #32
 80051c2:	bfbc      	itt	lt
 80051c4:	4622      	movlt	r2, r4
 80051c6:	4614      	movlt	r4, r2
 80051c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051cc:	d005      	beq.n	80051da <__cvt+0x42>
 80051ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051d2:	d100      	bne.n	80051d6 <__cvt+0x3e>
 80051d4:	3601      	adds	r6, #1
 80051d6:	2102      	movs	r1, #2
 80051d8:	e000      	b.n	80051dc <__cvt+0x44>
 80051da:	2103      	movs	r1, #3
 80051dc:	ab03      	add	r3, sp, #12
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	ab02      	add	r3, sp, #8
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	ec45 4b10 	vmov	d0, r4, r5
 80051e8:	4653      	mov	r3, sl
 80051ea:	4632      	mov	r2, r6
 80051ec:	f001 fdb4 	bl	8006d58 <_dtoa_r>
 80051f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051f4:	4607      	mov	r7, r0
 80051f6:	d102      	bne.n	80051fe <__cvt+0x66>
 80051f8:	f019 0f01 	tst.w	r9, #1
 80051fc:	d022      	beq.n	8005244 <__cvt+0xac>
 80051fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005202:	eb07 0906 	add.w	r9, r7, r6
 8005206:	d110      	bne.n	800522a <__cvt+0x92>
 8005208:	783b      	ldrb	r3, [r7, #0]
 800520a:	2b30      	cmp	r3, #48	; 0x30
 800520c:	d10a      	bne.n	8005224 <__cvt+0x8c>
 800520e:	2200      	movs	r2, #0
 8005210:	2300      	movs	r3, #0
 8005212:	4620      	mov	r0, r4
 8005214:	4629      	mov	r1, r5
 8005216:	f7fb fc77 	bl	8000b08 <__aeabi_dcmpeq>
 800521a:	b918      	cbnz	r0, 8005224 <__cvt+0x8c>
 800521c:	f1c6 0601 	rsb	r6, r6, #1
 8005220:	f8ca 6000 	str.w	r6, [sl]
 8005224:	f8da 3000 	ldr.w	r3, [sl]
 8005228:	4499      	add	r9, r3
 800522a:	2200      	movs	r2, #0
 800522c:	2300      	movs	r3, #0
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb fc69 	bl	8000b08 <__aeabi_dcmpeq>
 8005236:	b108      	cbz	r0, 800523c <__cvt+0xa4>
 8005238:	f8cd 900c 	str.w	r9, [sp, #12]
 800523c:	2230      	movs	r2, #48	; 0x30
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	454b      	cmp	r3, r9
 8005242:	d307      	bcc.n	8005254 <__cvt+0xbc>
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005248:	1bdb      	subs	r3, r3, r7
 800524a:	4638      	mov	r0, r7
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	b004      	add	sp, #16
 8005250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005254:	1c59      	adds	r1, r3, #1
 8005256:	9103      	str	r1, [sp, #12]
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e7f0      	b.n	800523e <__cvt+0xa6>

0800525c <__exponent>:
 800525c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800525e:	4603      	mov	r3, r0
 8005260:	2900      	cmp	r1, #0
 8005262:	bfb8      	it	lt
 8005264:	4249      	neglt	r1, r1
 8005266:	f803 2b02 	strb.w	r2, [r3], #2
 800526a:	bfb4      	ite	lt
 800526c:	222d      	movlt	r2, #45	; 0x2d
 800526e:	222b      	movge	r2, #43	; 0x2b
 8005270:	2909      	cmp	r1, #9
 8005272:	7042      	strb	r2, [r0, #1]
 8005274:	dd2a      	ble.n	80052cc <__exponent+0x70>
 8005276:	f10d 0407 	add.w	r4, sp, #7
 800527a:	46a4      	mov	ip, r4
 800527c:	270a      	movs	r7, #10
 800527e:	46a6      	mov	lr, r4
 8005280:	460a      	mov	r2, r1
 8005282:	fb91 f6f7 	sdiv	r6, r1, r7
 8005286:	fb07 1516 	mls	r5, r7, r6, r1
 800528a:	3530      	adds	r5, #48	; 0x30
 800528c:	2a63      	cmp	r2, #99	; 0x63
 800528e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005292:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005296:	4631      	mov	r1, r6
 8005298:	dcf1      	bgt.n	800527e <__exponent+0x22>
 800529a:	3130      	adds	r1, #48	; 0x30
 800529c:	f1ae 0502 	sub.w	r5, lr, #2
 80052a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052a4:	1c44      	adds	r4, r0, #1
 80052a6:	4629      	mov	r1, r5
 80052a8:	4561      	cmp	r1, ip
 80052aa:	d30a      	bcc.n	80052c2 <__exponent+0x66>
 80052ac:	f10d 0209 	add.w	r2, sp, #9
 80052b0:	eba2 020e 	sub.w	r2, r2, lr
 80052b4:	4565      	cmp	r5, ip
 80052b6:	bf88      	it	hi
 80052b8:	2200      	movhi	r2, #0
 80052ba:	4413      	add	r3, r2
 80052bc:	1a18      	subs	r0, r3, r0
 80052be:	b003      	add	sp, #12
 80052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80052ca:	e7ed      	b.n	80052a8 <__exponent+0x4c>
 80052cc:	2330      	movs	r3, #48	; 0x30
 80052ce:	3130      	adds	r1, #48	; 0x30
 80052d0:	7083      	strb	r3, [r0, #2]
 80052d2:	70c1      	strb	r1, [r0, #3]
 80052d4:	1d03      	adds	r3, r0, #4
 80052d6:	e7f1      	b.n	80052bc <__exponent+0x60>

080052d8 <_printf_float>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	ed2d 8b02 	vpush	{d8}
 80052e0:	b08d      	sub	sp, #52	; 0x34
 80052e2:	460c      	mov	r4, r1
 80052e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052e8:	4616      	mov	r6, r2
 80052ea:	461f      	mov	r7, r3
 80052ec:	4605      	mov	r5, r0
 80052ee:	f002 fe8f 	bl	8008010 <_localeconv_r>
 80052f2:	f8d0 a000 	ldr.w	sl, [r0]
 80052f6:	4650      	mov	r0, sl
 80052f8:	f7fa ff8a 	bl	8000210 <strlen>
 80052fc:	2300      	movs	r3, #0
 80052fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	9305      	str	r3, [sp, #20]
 8005304:	f8d8 3000 	ldr.w	r3, [r8]
 8005308:	f894 b018 	ldrb.w	fp, [r4, #24]
 800530c:	3307      	adds	r3, #7
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	f103 0208 	add.w	r2, r3, #8
 8005316:	f8c8 2000 	str.w	r2, [r8]
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005322:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005326:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800532a:	9307      	str	r3, [sp, #28]
 800532c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005330:	ee08 0a10 	vmov	s16, r0
 8005334:	4b9f      	ldr	r3, [pc, #636]	; (80055b4 <_printf_float+0x2dc>)
 8005336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800533a:	f04f 32ff 	mov.w	r2, #4294967295
 800533e:	f7fb fc15 	bl	8000b6c <__aeabi_dcmpun>
 8005342:	bb88      	cbnz	r0, 80053a8 <_printf_float+0xd0>
 8005344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005348:	4b9a      	ldr	r3, [pc, #616]	; (80055b4 <_printf_float+0x2dc>)
 800534a:	f04f 32ff 	mov.w	r2, #4294967295
 800534e:	f7fb fbef 	bl	8000b30 <__aeabi_dcmple>
 8005352:	bb48      	cbnz	r0, 80053a8 <_printf_float+0xd0>
 8005354:	2200      	movs	r2, #0
 8005356:	2300      	movs	r3, #0
 8005358:	4640      	mov	r0, r8
 800535a:	4649      	mov	r1, r9
 800535c:	f7fb fbde 	bl	8000b1c <__aeabi_dcmplt>
 8005360:	b110      	cbz	r0, 8005368 <_printf_float+0x90>
 8005362:	232d      	movs	r3, #45	; 0x2d
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005368:	4b93      	ldr	r3, [pc, #588]	; (80055b8 <_printf_float+0x2e0>)
 800536a:	4894      	ldr	r0, [pc, #592]	; (80055bc <_printf_float+0x2e4>)
 800536c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005370:	bf94      	ite	ls
 8005372:	4698      	movls	r8, r3
 8005374:	4680      	movhi	r8, r0
 8005376:	2303      	movs	r3, #3
 8005378:	6123      	str	r3, [r4, #16]
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	f023 0204 	bic.w	r2, r3, #4
 8005380:	6022      	str	r2, [r4, #0]
 8005382:	f04f 0900 	mov.w	r9, #0
 8005386:	9700      	str	r7, [sp, #0]
 8005388:	4633      	mov	r3, r6
 800538a:	aa0b      	add	r2, sp, #44	; 0x2c
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f9d8 	bl	8005744 <_printf_common>
 8005394:	3001      	adds	r0, #1
 8005396:	f040 8090 	bne.w	80054ba <_printf_float+0x1e2>
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	b00d      	add	sp, #52	; 0x34
 80053a0:	ecbd 8b02 	vpop	{d8}
 80053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a8:	4642      	mov	r2, r8
 80053aa:	464b      	mov	r3, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	4649      	mov	r1, r9
 80053b0:	f7fb fbdc 	bl	8000b6c <__aeabi_dcmpun>
 80053b4:	b140      	cbz	r0, 80053c8 <_printf_float+0xf0>
 80053b6:	464b      	mov	r3, r9
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bfbc      	itt	lt
 80053bc:	232d      	movlt	r3, #45	; 0x2d
 80053be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053c2:	487f      	ldr	r0, [pc, #508]	; (80055c0 <_printf_float+0x2e8>)
 80053c4:	4b7f      	ldr	r3, [pc, #508]	; (80055c4 <_printf_float+0x2ec>)
 80053c6:	e7d1      	b.n	800536c <_printf_float+0x94>
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053ce:	9206      	str	r2, [sp, #24]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	d13f      	bne.n	8005454 <_printf_float+0x17c>
 80053d4:	2306      	movs	r3, #6
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	9b05      	ldr	r3, [sp, #20]
 80053da:	6861      	ldr	r1, [r4, #4]
 80053dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053e0:	2300      	movs	r3, #0
 80053e2:	9303      	str	r3, [sp, #12]
 80053e4:	ab0a      	add	r3, sp, #40	; 0x28
 80053e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053ea:	ab09      	add	r3, sp, #36	; 0x24
 80053ec:	ec49 8b10 	vmov	d0, r8, r9
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053f8:	4628      	mov	r0, r5
 80053fa:	f7ff fecd 	bl	8005198 <__cvt>
 80053fe:	9b06      	ldr	r3, [sp, #24]
 8005400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005402:	2b47      	cmp	r3, #71	; 0x47
 8005404:	4680      	mov	r8, r0
 8005406:	d108      	bne.n	800541a <_printf_float+0x142>
 8005408:	1cc8      	adds	r0, r1, #3
 800540a:	db02      	blt.n	8005412 <_printf_float+0x13a>
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	4299      	cmp	r1, r3
 8005410:	dd41      	ble.n	8005496 <_printf_float+0x1be>
 8005412:	f1ab 0b02 	sub.w	fp, fp, #2
 8005416:	fa5f fb8b 	uxtb.w	fp, fp
 800541a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800541e:	d820      	bhi.n	8005462 <_printf_float+0x18a>
 8005420:	3901      	subs	r1, #1
 8005422:	465a      	mov	r2, fp
 8005424:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005428:	9109      	str	r1, [sp, #36]	; 0x24
 800542a:	f7ff ff17 	bl	800525c <__exponent>
 800542e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005430:	1813      	adds	r3, r2, r0
 8005432:	2a01      	cmp	r2, #1
 8005434:	4681      	mov	r9, r0
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	dc02      	bgt.n	8005440 <_printf_float+0x168>
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	07d2      	lsls	r2, r2, #31
 800543e:	d501      	bpl.n	8005444 <_printf_float+0x16c>
 8005440:	3301      	adds	r3, #1
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005448:	2b00      	cmp	r3, #0
 800544a:	d09c      	beq.n	8005386 <_printf_float+0xae>
 800544c:	232d      	movs	r3, #45	; 0x2d
 800544e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005452:	e798      	b.n	8005386 <_printf_float+0xae>
 8005454:	9a06      	ldr	r2, [sp, #24]
 8005456:	2a47      	cmp	r2, #71	; 0x47
 8005458:	d1be      	bne.n	80053d8 <_printf_float+0x100>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1bc      	bne.n	80053d8 <_printf_float+0x100>
 800545e:	2301      	movs	r3, #1
 8005460:	e7b9      	b.n	80053d6 <_printf_float+0xfe>
 8005462:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005466:	d118      	bne.n	800549a <_printf_float+0x1c2>
 8005468:	2900      	cmp	r1, #0
 800546a:	6863      	ldr	r3, [r4, #4]
 800546c:	dd0b      	ble.n	8005486 <_printf_float+0x1ae>
 800546e:	6121      	str	r1, [r4, #16]
 8005470:	b913      	cbnz	r3, 8005478 <_printf_float+0x1a0>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	07d0      	lsls	r0, r2, #31
 8005476:	d502      	bpl.n	800547e <_printf_float+0x1a6>
 8005478:	3301      	adds	r3, #1
 800547a:	440b      	add	r3, r1
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005480:	f04f 0900 	mov.w	r9, #0
 8005484:	e7de      	b.n	8005444 <_printf_float+0x16c>
 8005486:	b913      	cbnz	r3, 800548e <_printf_float+0x1b6>
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	07d2      	lsls	r2, r2, #31
 800548c:	d501      	bpl.n	8005492 <_printf_float+0x1ba>
 800548e:	3302      	adds	r3, #2
 8005490:	e7f4      	b.n	800547c <_printf_float+0x1a4>
 8005492:	2301      	movs	r3, #1
 8005494:	e7f2      	b.n	800547c <_printf_float+0x1a4>
 8005496:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800549a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549c:	4299      	cmp	r1, r3
 800549e:	db05      	blt.n	80054ac <_printf_float+0x1d4>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	6121      	str	r1, [r4, #16]
 80054a4:	07d8      	lsls	r0, r3, #31
 80054a6:	d5ea      	bpl.n	800547e <_printf_float+0x1a6>
 80054a8:	1c4b      	adds	r3, r1, #1
 80054aa:	e7e7      	b.n	800547c <_printf_float+0x1a4>
 80054ac:	2900      	cmp	r1, #0
 80054ae:	bfd4      	ite	le
 80054b0:	f1c1 0202 	rsble	r2, r1, #2
 80054b4:	2201      	movgt	r2, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	e7e0      	b.n	800547c <_printf_float+0x1a4>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	055a      	lsls	r2, r3, #21
 80054be:	d407      	bmi.n	80054d0 <_printf_float+0x1f8>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	4642      	mov	r2, r8
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	d12c      	bne.n	8005528 <_printf_float+0x250>
 80054ce:	e764      	b.n	800539a <_printf_float+0xc2>
 80054d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054d4:	f240 80e0 	bls.w	8005698 <_printf_float+0x3c0>
 80054d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054dc:	2200      	movs	r2, #0
 80054de:	2300      	movs	r3, #0
 80054e0:	f7fb fb12 	bl	8000b08 <__aeabi_dcmpeq>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d034      	beq.n	8005552 <_printf_float+0x27a>
 80054e8:	4a37      	ldr	r2, [pc, #220]	; (80055c8 <_printf_float+0x2f0>)
 80054ea:	2301      	movs	r3, #1
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f af51 	beq.w	800539a <_printf_float+0xc2>
 80054f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054fc:	429a      	cmp	r2, r3
 80054fe:	db02      	blt.n	8005506 <_printf_float+0x22e>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	07d8      	lsls	r0, r3, #31
 8005504:	d510      	bpl.n	8005528 <_printf_float+0x250>
 8005506:	ee18 3a10 	vmov	r3, s16
 800550a:	4652      	mov	r2, sl
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	f43f af41 	beq.w	800539a <_printf_float+0xc2>
 8005518:	f04f 0800 	mov.w	r8, #0
 800551c:	f104 091a 	add.w	r9, r4, #26
 8005520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005522:	3b01      	subs	r3, #1
 8005524:	4543      	cmp	r3, r8
 8005526:	dc09      	bgt.n	800553c <_printf_float+0x264>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	079b      	lsls	r3, r3, #30
 800552c:	f100 8105 	bmi.w	800573a <_printf_float+0x462>
 8005530:	68e0      	ldr	r0, [r4, #12]
 8005532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005534:	4298      	cmp	r0, r3
 8005536:	bfb8      	it	lt
 8005538:	4618      	movlt	r0, r3
 800553a:	e730      	b.n	800539e <_printf_float+0xc6>
 800553c:	2301      	movs	r3, #1
 800553e:	464a      	mov	r2, r9
 8005540:	4631      	mov	r1, r6
 8005542:	4628      	mov	r0, r5
 8005544:	47b8      	blx	r7
 8005546:	3001      	adds	r0, #1
 8005548:	f43f af27 	beq.w	800539a <_printf_float+0xc2>
 800554c:	f108 0801 	add.w	r8, r8, #1
 8005550:	e7e6      	b.n	8005520 <_printf_float+0x248>
 8005552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	dc39      	bgt.n	80055cc <_printf_float+0x2f4>
 8005558:	4a1b      	ldr	r2, [pc, #108]	; (80055c8 <_printf_float+0x2f0>)
 800555a:	2301      	movs	r3, #1
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	47b8      	blx	r7
 8005562:	3001      	adds	r0, #1
 8005564:	f43f af19 	beq.w	800539a <_printf_float+0xc2>
 8005568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800556c:	4313      	orrs	r3, r2
 800556e:	d102      	bne.n	8005576 <_printf_float+0x29e>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	07d9      	lsls	r1, r3, #31
 8005574:	d5d8      	bpl.n	8005528 <_printf_float+0x250>
 8005576:	ee18 3a10 	vmov	r3, s16
 800557a:	4652      	mov	r2, sl
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	47b8      	blx	r7
 8005582:	3001      	adds	r0, #1
 8005584:	f43f af09 	beq.w	800539a <_printf_float+0xc2>
 8005588:	f04f 0900 	mov.w	r9, #0
 800558c:	f104 0a1a 	add.w	sl, r4, #26
 8005590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005592:	425b      	negs	r3, r3
 8005594:	454b      	cmp	r3, r9
 8005596:	dc01      	bgt.n	800559c <_printf_float+0x2c4>
 8005598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800559a:	e792      	b.n	80054c2 <_printf_float+0x1ea>
 800559c:	2301      	movs	r3, #1
 800559e:	4652      	mov	r2, sl
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	f43f aef7 	beq.w	800539a <_printf_float+0xc2>
 80055ac:	f109 0901 	add.w	r9, r9, #1
 80055b0:	e7ee      	b.n	8005590 <_printf_float+0x2b8>
 80055b2:	bf00      	nop
 80055b4:	7fefffff 	.word	0x7fefffff
 80055b8:	08009a2c 	.word	0x08009a2c
 80055bc:	08009a30 	.word	0x08009a30
 80055c0:	08009a38 	.word	0x08009a38
 80055c4:	08009a34 	.word	0x08009a34
 80055c8:	08009a3c 	.word	0x08009a3c
 80055cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055d0:	429a      	cmp	r2, r3
 80055d2:	bfa8      	it	ge
 80055d4:	461a      	movge	r2, r3
 80055d6:	2a00      	cmp	r2, #0
 80055d8:	4691      	mov	r9, r2
 80055da:	dc37      	bgt.n	800564c <_printf_float+0x374>
 80055dc:	f04f 0b00 	mov.w	fp, #0
 80055e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055e4:	f104 021a 	add.w	r2, r4, #26
 80055e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055ea:	9305      	str	r3, [sp, #20]
 80055ec:	eba3 0309 	sub.w	r3, r3, r9
 80055f0:	455b      	cmp	r3, fp
 80055f2:	dc33      	bgt.n	800565c <_printf_float+0x384>
 80055f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055f8:	429a      	cmp	r2, r3
 80055fa:	db3b      	blt.n	8005674 <_printf_float+0x39c>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	07da      	lsls	r2, r3, #31
 8005600:	d438      	bmi.n	8005674 <_printf_float+0x39c>
 8005602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005604:	9b05      	ldr	r3, [sp, #20]
 8005606:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	eba2 0901 	sub.w	r9, r2, r1
 800560e:	4599      	cmp	r9, r3
 8005610:	bfa8      	it	ge
 8005612:	4699      	movge	r9, r3
 8005614:	f1b9 0f00 	cmp.w	r9, #0
 8005618:	dc35      	bgt.n	8005686 <_printf_float+0x3ae>
 800561a:	f04f 0800 	mov.w	r8, #0
 800561e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005622:	f104 0a1a 	add.w	sl, r4, #26
 8005626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	eba3 0309 	sub.w	r3, r3, r9
 8005630:	4543      	cmp	r3, r8
 8005632:	f77f af79 	ble.w	8005528 <_printf_float+0x250>
 8005636:	2301      	movs	r3, #1
 8005638:	4652      	mov	r2, sl
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f aeaa 	beq.w	800539a <_printf_float+0xc2>
 8005646:	f108 0801 	add.w	r8, r8, #1
 800564a:	e7ec      	b.n	8005626 <_printf_float+0x34e>
 800564c:	4613      	mov	r3, r2
 800564e:	4631      	mov	r1, r6
 8005650:	4642      	mov	r2, r8
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	d1c0      	bne.n	80055dc <_printf_float+0x304>
 800565a:	e69e      	b.n	800539a <_printf_float+0xc2>
 800565c:	2301      	movs	r3, #1
 800565e:	4631      	mov	r1, r6
 8005660:	4628      	mov	r0, r5
 8005662:	9205      	str	r2, [sp, #20]
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f ae97 	beq.w	800539a <_printf_float+0xc2>
 800566c:	9a05      	ldr	r2, [sp, #20]
 800566e:	f10b 0b01 	add.w	fp, fp, #1
 8005672:	e7b9      	b.n	80055e8 <_printf_float+0x310>
 8005674:	ee18 3a10 	vmov	r3, s16
 8005678:	4652      	mov	r2, sl
 800567a:	4631      	mov	r1, r6
 800567c:	4628      	mov	r0, r5
 800567e:	47b8      	blx	r7
 8005680:	3001      	adds	r0, #1
 8005682:	d1be      	bne.n	8005602 <_printf_float+0x32a>
 8005684:	e689      	b.n	800539a <_printf_float+0xc2>
 8005686:	9a05      	ldr	r2, [sp, #20]
 8005688:	464b      	mov	r3, r9
 800568a:	4442      	add	r2, r8
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	d1c1      	bne.n	800561a <_printf_float+0x342>
 8005696:	e680      	b.n	800539a <_printf_float+0xc2>
 8005698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800569a:	2a01      	cmp	r2, #1
 800569c:	dc01      	bgt.n	80056a2 <_printf_float+0x3ca>
 800569e:	07db      	lsls	r3, r3, #31
 80056a0:	d538      	bpl.n	8005714 <_printf_float+0x43c>
 80056a2:	2301      	movs	r3, #1
 80056a4:	4642      	mov	r2, r8
 80056a6:	4631      	mov	r1, r6
 80056a8:	4628      	mov	r0, r5
 80056aa:	47b8      	blx	r7
 80056ac:	3001      	adds	r0, #1
 80056ae:	f43f ae74 	beq.w	800539a <_printf_float+0xc2>
 80056b2:	ee18 3a10 	vmov	r3, s16
 80056b6:	4652      	mov	r2, sl
 80056b8:	4631      	mov	r1, r6
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	f43f ae6b 	beq.w	800539a <_printf_float+0xc2>
 80056c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056c8:	2200      	movs	r2, #0
 80056ca:	2300      	movs	r3, #0
 80056cc:	f7fb fa1c 	bl	8000b08 <__aeabi_dcmpeq>
 80056d0:	b9d8      	cbnz	r0, 800570a <_printf_float+0x432>
 80056d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d4:	f108 0201 	add.w	r2, r8, #1
 80056d8:	3b01      	subs	r3, #1
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	47b8      	blx	r7
 80056e0:	3001      	adds	r0, #1
 80056e2:	d10e      	bne.n	8005702 <_printf_float+0x42a>
 80056e4:	e659      	b.n	800539a <_printf_float+0xc2>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4652      	mov	r2, sl
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	f43f ae52 	beq.w	800539a <_printf_float+0xc2>
 80056f6:	f108 0801 	add.w	r8, r8, #1
 80056fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fc:	3b01      	subs	r3, #1
 80056fe:	4543      	cmp	r3, r8
 8005700:	dcf1      	bgt.n	80056e6 <_printf_float+0x40e>
 8005702:	464b      	mov	r3, r9
 8005704:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005708:	e6dc      	b.n	80054c4 <_printf_float+0x1ec>
 800570a:	f04f 0800 	mov.w	r8, #0
 800570e:	f104 0a1a 	add.w	sl, r4, #26
 8005712:	e7f2      	b.n	80056fa <_printf_float+0x422>
 8005714:	2301      	movs	r3, #1
 8005716:	4642      	mov	r2, r8
 8005718:	e7df      	b.n	80056da <_printf_float+0x402>
 800571a:	2301      	movs	r3, #1
 800571c:	464a      	mov	r2, r9
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	47b8      	blx	r7
 8005724:	3001      	adds	r0, #1
 8005726:	f43f ae38 	beq.w	800539a <_printf_float+0xc2>
 800572a:	f108 0801 	add.w	r8, r8, #1
 800572e:	68e3      	ldr	r3, [r4, #12]
 8005730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005732:	1a5b      	subs	r3, r3, r1
 8005734:	4543      	cmp	r3, r8
 8005736:	dcf0      	bgt.n	800571a <_printf_float+0x442>
 8005738:	e6fa      	b.n	8005530 <_printf_float+0x258>
 800573a:	f04f 0800 	mov.w	r8, #0
 800573e:	f104 0919 	add.w	r9, r4, #25
 8005742:	e7f4      	b.n	800572e <_printf_float+0x456>

08005744 <_printf_common>:
 8005744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	4616      	mov	r6, r2
 800574a:	4699      	mov	r9, r3
 800574c:	688a      	ldr	r2, [r1, #8]
 800574e:	690b      	ldr	r3, [r1, #16]
 8005750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005754:	4293      	cmp	r3, r2
 8005756:	bfb8      	it	lt
 8005758:	4613      	movlt	r3, r2
 800575a:	6033      	str	r3, [r6, #0]
 800575c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005760:	4607      	mov	r7, r0
 8005762:	460c      	mov	r4, r1
 8005764:	b10a      	cbz	r2, 800576a <_printf_common+0x26>
 8005766:	3301      	adds	r3, #1
 8005768:	6033      	str	r3, [r6, #0]
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	0699      	lsls	r1, r3, #26
 800576e:	bf42      	ittt	mi
 8005770:	6833      	ldrmi	r3, [r6, #0]
 8005772:	3302      	addmi	r3, #2
 8005774:	6033      	strmi	r3, [r6, #0]
 8005776:	6825      	ldr	r5, [r4, #0]
 8005778:	f015 0506 	ands.w	r5, r5, #6
 800577c:	d106      	bne.n	800578c <_printf_common+0x48>
 800577e:	f104 0a19 	add.w	sl, r4, #25
 8005782:	68e3      	ldr	r3, [r4, #12]
 8005784:	6832      	ldr	r2, [r6, #0]
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	42ab      	cmp	r3, r5
 800578a:	dc26      	bgt.n	80057da <_printf_common+0x96>
 800578c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005790:	1e13      	subs	r3, r2, #0
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	bf18      	it	ne
 8005796:	2301      	movne	r3, #1
 8005798:	0692      	lsls	r2, r2, #26
 800579a:	d42b      	bmi.n	80057f4 <_printf_common+0xb0>
 800579c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057a0:	4649      	mov	r1, r9
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c0      	blx	r8
 80057a6:	3001      	adds	r0, #1
 80057a8:	d01e      	beq.n	80057e8 <_printf_common+0xa4>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	68e5      	ldr	r5, [r4, #12]
 80057ae:	6832      	ldr	r2, [r6, #0]
 80057b0:	f003 0306 	and.w	r3, r3, #6
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	bf08      	it	eq
 80057b8:	1aad      	subeq	r5, r5, r2
 80057ba:	68a3      	ldr	r3, [r4, #8]
 80057bc:	6922      	ldr	r2, [r4, #16]
 80057be:	bf0c      	ite	eq
 80057c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c4:	2500      	movne	r5, #0
 80057c6:	4293      	cmp	r3, r2
 80057c8:	bfc4      	itt	gt
 80057ca:	1a9b      	subgt	r3, r3, r2
 80057cc:	18ed      	addgt	r5, r5, r3
 80057ce:	2600      	movs	r6, #0
 80057d0:	341a      	adds	r4, #26
 80057d2:	42b5      	cmp	r5, r6
 80057d4:	d11a      	bne.n	800580c <_printf_common+0xc8>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e008      	b.n	80057ec <_printf_common+0xa8>
 80057da:	2301      	movs	r3, #1
 80057dc:	4652      	mov	r2, sl
 80057de:	4649      	mov	r1, r9
 80057e0:	4638      	mov	r0, r7
 80057e2:	47c0      	blx	r8
 80057e4:	3001      	adds	r0, #1
 80057e6:	d103      	bne.n	80057f0 <_printf_common+0xac>
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f0:	3501      	adds	r5, #1
 80057f2:	e7c6      	b.n	8005782 <_printf_common+0x3e>
 80057f4:	18e1      	adds	r1, r4, r3
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	2030      	movs	r0, #48	; 0x30
 80057fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057fe:	4422      	add	r2, r4
 8005800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005808:	3302      	adds	r3, #2
 800580a:	e7c7      	b.n	800579c <_printf_common+0x58>
 800580c:	2301      	movs	r3, #1
 800580e:	4622      	mov	r2, r4
 8005810:	4649      	mov	r1, r9
 8005812:	4638      	mov	r0, r7
 8005814:	47c0      	blx	r8
 8005816:	3001      	adds	r0, #1
 8005818:	d0e6      	beq.n	80057e8 <_printf_common+0xa4>
 800581a:	3601      	adds	r6, #1
 800581c:	e7d9      	b.n	80057d2 <_printf_common+0x8e>
	...

08005820 <_printf_i>:
 8005820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	460c      	mov	r4, r1
 8005826:	4691      	mov	r9, r2
 8005828:	7e27      	ldrb	r7, [r4, #24]
 800582a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800582c:	2f78      	cmp	r7, #120	; 0x78
 800582e:	4680      	mov	r8, r0
 8005830:	469a      	mov	sl, r3
 8005832:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005836:	d807      	bhi.n	8005848 <_printf_i+0x28>
 8005838:	2f62      	cmp	r7, #98	; 0x62
 800583a:	d80a      	bhi.n	8005852 <_printf_i+0x32>
 800583c:	2f00      	cmp	r7, #0
 800583e:	f000 80d8 	beq.w	80059f2 <_printf_i+0x1d2>
 8005842:	2f58      	cmp	r7, #88	; 0x58
 8005844:	f000 80a3 	beq.w	800598e <_printf_i+0x16e>
 8005848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800584c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005850:	e03a      	b.n	80058c8 <_printf_i+0xa8>
 8005852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005856:	2b15      	cmp	r3, #21
 8005858:	d8f6      	bhi.n	8005848 <_printf_i+0x28>
 800585a:	a001      	add	r0, pc, #4	; (adr r0, 8005860 <_printf_i+0x40>)
 800585c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005860:	080058b9 	.word	0x080058b9
 8005864:	080058cd 	.word	0x080058cd
 8005868:	08005849 	.word	0x08005849
 800586c:	08005849 	.word	0x08005849
 8005870:	08005849 	.word	0x08005849
 8005874:	08005849 	.word	0x08005849
 8005878:	080058cd 	.word	0x080058cd
 800587c:	08005849 	.word	0x08005849
 8005880:	08005849 	.word	0x08005849
 8005884:	08005849 	.word	0x08005849
 8005888:	08005849 	.word	0x08005849
 800588c:	080059d9 	.word	0x080059d9
 8005890:	080058fd 	.word	0x080058fd
 8005894:	080059bb 	.word	0x080059bb
 8005898:	08005849 	.word	0x08005849
 800589c:	08005849 	.word	0x08005849
 80058a0:	080059fb 	.word	0x080059fb
 80058a4:	08005849 	.word	0x08005849
 80058a8:	080058fd 	.word	0x080058fd
 80058ac:	08005849 	.word	0x08005849
 80058b0:	08005849 	.word	0x08005849
 80058b4:	080059c3 	.word	0x080059c3
 80058b8:	680b      	ldr	r3, [r1, #0]
 80058ba:	1d1a      	adds	r2, r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	600a      	str	r2, [r1, #0]
 80058c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0a3      	b.n	8005a14 <_printf_i+0x1f4>
 80058cc:	6825      	ldr	r5, [r4, #0]
 80058ce:	6808      	ldr	r0, [r1, #0]
 80058d0:	062e      	lsls	r6, r5, #24
 80058d2:	f100 0304 	add.w	r3, r0, #4
 80058d6:	d50a      	bpl.n	80058ee <_printf_i+0xce>
 80058d8:	6805      	ldr	r5, [r0, #0]
 80058da:	600b      	str	r3, [r1, #0]
 80058dc:	2d00      	cmp	r5, #0
 80058de:	da03      	bge.n	80058e8 <_printf_i+0xc8>
 80058e0:	232d      	movs	r3, #45	; 0x2d
 80058e2:	426d      	negs	r5, r5
 80058e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e8:	485e      	ldr	r0, [pc, #376]	; (8005a64 <_printf_i+0x244>)
 80058ea:	230a      	movs	r3, #10
 80058ec:	e019      	b.n	8005922 <_printf_i+0x102>
 80058ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80058f2:	6805      	ldr	r5, [r0, #0]
 80058f4:	600b      	str	r3, [r1, #0]
 80058f6:	bf18      	it	ne
 80058f8:	b22d      	sxthne	r5, r5
 80058fa:	e7ef      	b.n	80058dc <_printf_i+0xbc>
 80058fc:	680b      	ldr	r3, [r1, #0]
 80058fe:	6825      	ldr	r5, [r4, #0]
 8005900:	1d18      	adds	r0, r3, #4
 8005902:	6008      	str	r0, [r1, #0]
 8005904:	0628      	lsls	r0, r5, #24
 8005906:	d501      	bpl.n	800590c <_printf_i+0xec>
 8005908:	681d      	ldr	r5, [r3, #0]
 800590a:	e002      	b.n	8005912 <_printf_i+0xf2>
 800590c:	0669      	lsls	r1, r5, #25
 800590e:	d5fb      	bpl.n	8005908 <_printf_i+0xe8>
 8005910:	881d      	ldrh	r5, [r3, #0]
 8005912:	4854      	ldr	r0, [pc, #336]	; (8005a64 <_printf_i+0x244>)
 8005914:	2f6f      	cmp	r7, #111	; 0x6f
 8005916:	bf0c      	ite	eq
 8005918:	2308      	moveq	r3, #8
 800591a:	230a      	movne	r3, #10
 800591c:	2100      	movs	r1, #0
 800591e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005922:	6866      	ldr	r6, [r4, #4]
 8005924:	60a6      	str	r6, [r4, #8]
 8005926:	2e00      	cmp	r6, #0
 8005928:	bfa2      	ittt	ge
 800592a:	6821      	ldrge	r1, [r4, #0]
 800592c:	f021 0104 	bicge.w	r1, r1, #4
 8005930:	6021      	strge	r1, [r4, #0]
 8005932:	b90d      	cbnz	r5, 8005938 <_printf_i+0x118>
 8005934:	2e00      	cmp	r6, #0
 8005936:	d04d      	beq.n	80059d4 <_printf_i+0x1b4>
 8005938:	4616      	mov	r6, r2
 800593a:	fbb5 f1f3 	udiv	r1, r5, r3
 800593e:	fb03 5711 	mls	r7, r3, r1, r5
 8005942:	5dc7      	ldrb	r7, [r0, r7]
 8005944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005948:	462f      	mov	r7, r5
 800594a:	42bb      	cmp	r3, r7
 800594c:	460d      	mov	r5, r1
 800594e:	d9f4      	bls.n	800593a <_printf_i+0x11a>
 8005950:	2b08      	cmp	r3, #8
 8005952:	d10b      	bne.n	800596c <_printf_i+0x14c>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	07df      	lsls	r7, r3, #31
 8005958:	d508      	bpl.n	800596c <_printf_i+0x14c>
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	6861      	ldr	r1, [r4, #4]
 800595e:	4299      	cmp	r1, r3
 8005960:	bfde      	ittt	le
 8005962:	2330      	movle	r3, #48	; 0x30
 8005964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005968:	f106 36ff 	addle.w	r6, r6, #4294967295
 800596c:	1b92      	subs	r2, r2, r6
 800596e:	6122      	str	r2, [r4, #16]
 8005970:	f8cd a000 	str.w	sl, [sp]
 8005974:	464b      	mov	r3, r9
 8005976:	aa03      	add	r2, sp, #12
 8005978:	4621      	mov	r1, r4
 800597a:	4640      	mov	r0, r8
 800597c:	f7ff fee2 	bl	8005744 <_printf_common>
 8005980:	3001      	adds	r0, #1
 8005982:	d14c      	bne.n	8005a1e <_printf_i+0x1fe>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	b004      	add	sp, #16
 800598a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598e:	4835      	ldr	r0, [pc, #212]	; (8005a64 <_printf_i+0x244>)
 8005990:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	680e      	ldr	r6, [r1, #0]
 8005998:	061f      	lsls	r7, r3, #24
 800599a:	f856 5b04 	ldr.w	r5, [r6], #4
 800599e:	600e      	str	r6, [r1, #0]
 80059a0:	d514      	bpl.n	80059cc <_printf_i+0x1ac>
 80059a2:	07d9      	lsls	r1, r3, #31
 80059a4:	bf44      	itt	mi
 80059a6:	f043 0320 	orrmi.w	r3, r3, #32
 80059aa:	6023      	strmi	r3, [r4, #0]
 80059ac:	b91d      	cbnz	r5, 80059b6 <_printf_i+0x196>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	f023 0320 	bic.w	r3, r3, #32
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	2310      	movs	r3, #16
 80059b8:	e7b0      	b.n	800591c <_printf_i+0xfc>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	f043 0320 	orr.w	r3, r3, #32
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	2378      	movs	r3, #120	; 0x78
 80059c4:	4828      	ldr	r0, [pc, #160]	; (8005a68 <_printf_i+0x248>)
 80059c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059ca:	e7e3      	b.n	8005994 <_printf_i+0x174>
 80059cc:	065e      	lsls	r6, r3, #25
 80059ce:	bf48      	it	mi
 80059d0:	b2ad      	uxthmi	r5, r5
 80059d2:	e7e6      	b.n	80059a2 <_printf_i+0x182>
 80059d4:	4616      	mov	r6, r2
 80059d6:	e7bb      	b.n	8005950 <_printf_i+0x130>
 80059d8:	680b      	ldr	r3, [r1, #0]
 80059da:	6826      	ldr	r6, [r4, #0]
 80059dc:	6960      	ldr	r0, [r4, #20]
 80059de:	1d1d      	adds	r5, r3, #4
 80059e0:	600d      	str	r5, [r1, #0]
 80059e2:	0635      	lsls	r5, r6, #24
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	d501      	bpl.n	80059ec <_printf_i+0x1cc>
 80059e8:	6018      	str	r0, [r3, #0]
 80059ea:	e002      	b.n	80059f2 <_printf_i+0x1d2>
 80059ec:	0671      	lsls	r1, r6, #25
 80059ee:	d5fb      	bpl.n	80059e8 <_printf_i+0x1c8>
 80059f0:	8018      	strh	r0, [r3, #0]
 80059f2:	2300      	movs	r3, #0
 80059f4:	6123      	str	r3, [r4, #16]
 80059f6:	4616      	mov	r6, r2
 80059f8:	e7ba      	b.n	8005970 <_printf_i+0x150>
 80059fa:	680b      	ldr	r3, [r1, #0]
 80059fc:	1d1a      	adds	r2, r3, #4
 80059fe:	600a      	str	r2, [r1, #0]
 8005a00:	681e      	ldr	r6, [r3, #0]
 8005a02:	6862      	ldr	r2, [r4, #4]
 8005a04:	2100      	movs	r1, #0
 8005a06:	4630      	mov	r0, r6
 8005a08:	f7fa fc0a 	bl	8000220 <memchr>
 8005a0c:	b108      	cbz	r0, 8005a12 <_printf_i+0x1f2>
 8005a0e:	1b80      	subs	r0, r0, r6
 8005a10:	6060      	str	r0, [r4, #4]
 8005a12:	6863      	ldr	r3, [r4, #4]
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	2300      	movs	r3, #0
 8005a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a1c:	e7a8      	b.n	8005970 <_printf_i+0x150>
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	4632      	mov	r2, r6
 8005a22:	4649      	mov	r1, r9
 8005a24:	4640      	mov	r0, r8
 8005a26:	47d0      	blx	sl
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d0ab      	beq.n	8005984 <_printf_i+0x164>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	079b      	lsls	r3, r3, #30
 8005a30:	d413      	bmi.n	8005a5a <_printf_i+0x23a>
 8005a32:	68e0      	ldr	r0, [r4, #12]
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	4298      	cmp	r0, r3
 8005a38:	bfb8      	it	lt
 8005a3a:	4618      	movlt	r0, r3
 8005a3c:	e7a4      	b.n	8005988 <_printf_i+0x168>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4632      	mov	r2, r6
 8005a42:	4649      	mov	r1, r9
 8005a44:	4640      	mov	r0, r8
 8005a46:	47d0      	blx	sl
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d09b      	beq.n	8005984 <_printf_i+0x164>
 8005a4c:	3501      	adds	r5, #1
 8005a4e:	68e3      	ldr	r3, [r4, #12]
 8005a50:	9903      	ldr	r1, [sp, #12]
 8005a52:	1a5b      	subs	r3, r3, r1
 8005a54:	42ab      	cmp	r3, r5
 8005a56:	dcf2      	bgt.n	8005a3e <_printf_i+0x21e>
 8005a58:	e7eb      	b.n	8005a32 <_printf_i+0x212>
 8005a5a:	2500      	movs	r5, #0
 8005a5c:	f104 0619 	add.w	r6, r4, #25
 8005a60:	e7f5      	b.n	8005a4e <_printf_i+0x22e>
 8005a62:	bf00      	nop
 8005a64:	08009a3e 	.word	0x08009a3e
 8005a68:	08009a4f 	.word	0x08009a4f

08005a6c <_scanf_float>:
 8005a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a70:	b087      	sub	sp, #28
 8005a72:	4617      	mov	r7, r2
 8005a74:	9303      	str	r3, [sp, #12]
 8005a76:	688b      	ldr	r3, [r1, #8]
 8005a78:	1e5a      	subs	r2, r3, #1
 8005a7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a7e:	bf83      	ittte	hi
 8005a80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a84:	195b      	addhi	r3, r3, r5
 8005a86:	9302      	strhi	r3, [sp, #8]
 8005a88:	2300      	movls	r3, #0
 8005a8a:	bf86      	itte	hi
 8005a8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a90:	608b      	strhi	r3, [r1, #8]
 8005a92:	9302      	strls	r3, [sp, #8]
 8005a94:	680b      	ldr	r3, [r1, #0]
 8005a96:	468b      	mov	fp, r1
 8005a98:	2500      	movs	r5, #0
 8005a9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005a9e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005aa2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005aa6:	4680      	mov	r8, r0
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	465e      	mov	r6, fp
 8005aac:	46aa      	mov	sl, r5
 8005aae:	46a9      	mov	r9, r5
 8005ab0:	9501      	str	r5, [sp, #4]
 8005ab2:	68a2      	ldr	r2, [r4, #8]
 8005ab4:	b152      	cbz	r2, 8005acc <_scanf_float+0x60>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b4e      	cmp	r3, #78	; 0x4e
 8005abc:	d864      	bhi.n	8005b88 <_scanf_float+0x11c>
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d83c      	bhi.n	8005b3c <_scanf_float+0xd0>
 8005ac2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005ac6:	b2c8      	uxtb	r0, r1
 8005ac8:	280e      	cmp	r0, #14
 8005aca:	d93a      	bls.n	8005b42 <_scanf_float+0xd6>
 8005acc:	f1b9 0f00 	cmp.w	r9, #0
 8005ad0:	d003      	beq.n	8005ada <_scanf_float+0x6e>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ade:	f1ba 0f01 	cmp.w	sl, #1
 8005ae2:	f200 8113 	bhi.w	8005d0c <_scanf_float+0x2a0>
 8005ae6:	455e      	cmp	r6, fp
 8005ae8:	f200 8105 	bhi.w	8005cf6 <_scanf_float+0x28a>
 8005aec:	2501      	movs	r5, #1
 8005aee:	4628      	mov	r0, r5
 8005af0:	b007      	add	sp, #28
 8005af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005afa:	2a0d      	cmp	r2, #13
 8005afc:	d8e6      	bhi.n	8005acc <_scanf_float+0x60>
 8005afe:	a101      	add	r1, pc, #4	; (adr r1, 8005b04 <_scanf_float+0x98>)
 8005b00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b04:	08005c43 	.word	0x08005c43
 8005b08:	08005acd 	.word	0x08005acd
 8005b0c:	08005acd 	.word	0x08005acd
 8005b10:	08005acd 	.word	0x08005acd
 8005b14:	08005ca3 	.word	0x08005ca3
 8005b18:	08005c7b 	.word	0x08005c7b
 8005b1c:	08005acd 	.word	0x08005acd
 8005b20:	08005acd 	.word	0x08005acd
 8005b24:	08005c51 	.word	0x08005c51
 8005b28:	08005acd 	.word	0x08005acd
 8005b2c:	08005acd 	.word	0x08005acd
 8005b30:	08005acd 	.word	0x08005acd
 8005b34:	08005acd 	.word	0x08005acd
 8005b38:	08005c09 	.word	0x08005c09
 8005b3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005b40:	e7db      	b.n	8005afa <_scanf_float+0x8e>
 8005b42:	290e      	cmp	r1, #14
 8005b44:	d8c2      	bhi.n	8005acc <_scanf_float+0x60>
 8005b46:	a001      	add	r0, pc, #4	; (adr r0, 8005b4c <_scanf_float+0xe0>)
 8005b48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b4c:	08005bfb 	.word	0x08005bfb
 8005b50:	08005acd 	.word	0x08005acd
 8005b54:	08005bfb 	.word	0x08005bfb
 8005b58:	08005c8f 	.word	0x08005c8f
 8005b5c:	08005acd 	.word	0x08005acd
 8005b60:	08005ba9 	.word	0x08005ba9
 8005b64:	08005be5 	.word	0x08005be5
 8005b68:	08005be5 	.word	0x08005be5
 8005b6c:	08005be5 	.word	0x08005be5
 8005b70:	08005be5 	.word	0x08005be5
 8005b74:	08005be5 	.word	0x08005be5
 8005b78:	08005be5 	.word	0x08005be5
 8005b7c:	08005be5 	.word	0x08005be5
 8005b80:	08005be5 	.word	0x08005be5
 8005b84:	08005be5 	.word	0x08005be5
 8005b88:	2b6e      	cmp	r3, #110	; 0x6e
 8005b8a:	d809      	bhi.n	8005ba0 <_scanf_float+0x134>
 8005b8c:	2b60      	cmp	r3, #96	; 0x60
 8005b8e:	d8b2      	bhi.n	8005af6 <_scanf_float+0x8a>
 8005b90:	2b54      	cmp	r3, #84	; 0x54
 8005b92:	d077      	beq.n	8005c84 <_scanf_float+0x218>
 8005b94:	2b59      	cmp	r3, #89	; 0x59
 8005b96:	d199      	bne.n	8005acc <_scanf_float+0x60>
 8005b98:	2d07      	cmp	r5, #7
 8005b9a:	d197      	bne.n	8005acc <_scanf_float+0x60>
 8005b9c:	2508      	movs	r5, #8
 8005b9e:	e029      	b.n	8005bf4 <_scanf_float+0x188>
 8005ba0:	2b74      	cmp	r3, #116	; 0x74
 8005ba2:	d06f      	beq.n	8005c84 <_scanf_float+0x218>
 8005ba4:	2b79      	cmp	r3, #121	; 0x79
 8005ba6:	e7f6      	b.n	8005b96 <_scanf_float+0x12a>
 8005ba8:	6821      	ldr	r1, [r4, #0]
 8005baa:	05c8      	lsls	r0, r1, #23
 8005bac:	d51a      	bpl.n	8005be4 <_scanf_float+0x178>
 8005bae:	9b02      	ldr	r3, [sp, #8]
 8005bb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005bb4:	6021      	str	r1, [r4, #0]
 8005bb6:	f109 0901 	add.w	r9, r9, #1
 8005bba:	b11b      	cbz	r3, 8005bc4 <_scanf_float+0x158>
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	3201      	adds	r2, #1
 8005bc0:	9302      	str	r3, [sp, #8]
 8005bc2:	60a2      	str	r2, [r4, #8]
 8005bc4:	68a3      	ldr	r3, [r4, #8]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	60a3      	str	r3, [r4, #8]
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	f340 8084 	ble.w	8005ce4 <_scanf_float+0x278>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	3301      	adds	r3, #1
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	e766      	b.n	8005ab2 <_scanf_float+0x46>
 8005be4:	eb1a 0f05 	cmn.w	sl, r5
 8005be8:	f47f af70 	bne.w	8005acc <_scanf_float+0x60>
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005bf2:	6022      	str	r2, [r4, #0]
 8005bf4:	f806 3b01 	strb.w	r3, [r6], #1
 8005bf8:	e7e4      	b.n	8005bc4 <_scanf_float+0x158>
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	0610      	lsls	r0, r2, #24
 8005bfe:	f57f af65 	bpl.w	8005acc <_scanf_float+0x60>
 8005c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c06:	e7f4      	b.n	8005bf2 <_scanf_float+0x186>
 8005c08:	f1ba 0f00 	cmp.w	sl, #0
 8005c0c:	d10e      	bne.n	8005c2c <_scanf_float+0x1c0>
 8005c0e:	f1b9 0f00 	cmp.w	r9, #0
 8005c12:	d10e      	bne.n	8005c32 <_scanf_float+0x1c6>
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c1e:	d108      	bne.n	8005c32 <_scanf_float+0x1c6>
 8005c20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c24:	6022      	str	r2, [r4, #0]
 8005c26:	f04f 0a01 	mov.w	sl, #1
 8005c2a:	e7e3      	b.n	8005bf4 <_scanf_float+0x188>
 8005c2c:	f1ba 0f02 	cmp.w	sl, #2
 8005c30:	d055      	beq.n	8005cde <_scanf_float+0x272>
 8005c32:	2d01      	cmp	r5, #1
 8005c34:	d002      	beq.n	8005c3c <_scanf_float+0x1d0>
 8005c36:	2d04      	cmp	r5, #4
 8005c38:	f47f af48 	bne.w	8005acc <_scanf_float+0x60>
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	b2ed      	uxtb	r5, r5
 8005c40:	e7d8      	b.n	8005bf4 <_scanf_float+0x188>
 8005c42:	f1ba 0f01 	cmp.w	sl, #1
 8005c46:	f47f af41 	bne.w	8005acc <_scanf_float+0x60>
 8005c4a:	f04f 0a02 	mov.w	sl, #2
 8005c4e:	e7d1      	b.n	8005bf4 <_scanf_float+0x188>
 8005c50:	b97d      	cbnz	r5, 8005c72 <_scanf_float+0x206>
 8005c52:	f1b9 0f00 	cmp.w	r9, #0
 8005c56:	f47f af3c 	bne.w	8005ad2 <_scanf_float+0x66>
 8005c5a:	6822      	ldr	r2, [r4, #0]
 8005c5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c64:	f47f af39 	bne.w	8005ada <_scanf_float+0x6e>
 8005c68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c6c:	6022      	str	r2, [r4, #0]
 8005c6e:	2501      	movs	r5, #1
 8005c70:	e7c0      	b.n	8005bf4 <_scanf_float+0x188>
 8005c72:	2d03      	cmp	r5, #3
 8005c74:	d0e2      	beq.n	8005c3c <_scanf_float+0x1d0>
 8005c76:	2d05      	cmp	r5, #5
 8005c78:	e7de      	b.n	8005c38 <_scanf_float+0x1cc>
 8005c7a:	2d02      	cmp	r5, #2
 8005c7c:	f47f af26 	bne.w	8005acc <_scanf_float+0x60>
 8005c80:	2503      	movs	r5, #3
 8005c82:	e7b7      	b.n	8005bf4 <_scanf_float+0x188>
 8005c84:	2d06      	cmp	r5, #6
 8005c86:	f47f af21 	bne.w	8005acc <_scanf_float+0x60>
 8005c8a:	2507      	movs	r5, #7
 8005c8c:	e7b2      	b.n	8005bf4 <_scanf_float+0x188>
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	0591      	lsls	r1, r2, #22
 8005c92:	f57f af1b 	bpl.w	8005acc <_scanf_float+0x60>
 8005c96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ca0:	e7a8      	b.n	8005bf4 <_scanf_float+0x188>
 8005ca2:	6822      	ldr	r2, [r4, #0]
 8005ca4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ca8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005cac:	d006      	beq.n	8005cbc <_scanf_float+0x250>
 8005cae:	0550      	lsls	r0, r2, #21
 8005cb0:	f57f af0c 	bpl.w	8005acc <_scanf_float+0x60>
 8005cb4:	f1b9 0f00 	cmp.w	r9, #0
 8005cb8:	f43f af0f 	beq.w	8005ada <_scanf_float+0x6e>
 8005cbc:	0591      	lsls	r1, r2, #22
 8005cbe:	bf58      	it	pl
 8005cc0:	9901      	ldrpl	r1, [sp, #4]
 8005cc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005cc6:	bf58      	it	pl
 8005cc8:	eba9 0101 	subpl.w	r1, r9, r1
 8005ccc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005cd0:	bf58      	it	pl
 8005cd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005cd6:	6022      	str	r2, [r4, #0]
 8005cd8:	f04f 0900 	mov.w	r9, #0
 8005cdc:	e78a      	b.n	8005bf4 <_scanf_float+0x188>
 8005cde:	f04f 0a03 	mov.w	sl, #3
 8005ce2:	e787      	b.n	8005bf4 <_scanf_float+0x188>
 8005ce4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ce8:	4639      	mov	r1, r7
 8005cea:	4640      	mov	r0, r8
 8005cec:	4798      	blx	r3
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f43f aedf 	beq.w	8005ab2 <_scanf_float+0x46>
 8005cf4:	e6ea      	b.n	8005acc <_scanf_float+0x60>
 8005cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cfe:	463a      	mov	r2, r7
 8005d00:	4640      	mov	r0, r8
 8005d02:	4798      	blx	r3
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	e6ec      	b.n	8005ae6 <_scanf_float+0x7a>
 8005d0c:	1e6b      	subs	r3, r5, #1
 8005d0e:	2b06      	cmp	r3, #6
 8005d10:	d825      	bhi.n	8005d5e <_scanf_float+0x2f2>
 8005d12:	2d02      	cmp	r5, #2
 8005d14:	d836      	bhi.n	8005d84 <_scanf_float+0x318>
 8005d16:	455e      	cmp	r6, fp
 8005d18:	f67f aee8 	bls.w	8005aec <_scanf_float+0x80>
 8005d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d24:	463a      	mov	r2, r7
 8005d26:	4640      	mov	r0, r8
 8005d28:	4798      	blx	r3
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	6123      	str	r3, [r4, #16]
 8005d30:	e7f1      	b.n	8005d16 <_scanf_float+0x2aa>
 8005d32:	9802      	ldr	r0, [sp, #8]
 8005d34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005d3c:	9002      	str	r0, [sp, #8]
 8005d3e:	463a      	mov	r2, r7
 8005d40:	4640      	mov	r0, r8
 8005d42:	4798      	blx	r3
 8005d44:	6923      	ldr	r3, [r4, #16]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	6123      	str	r3, [r4, #16]
 8005d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d4e:	fa5f fa8a 	uxtb.w	sl, sl
 8005d52:	f1ba 0f02 	cmp.w	sl, #2
 8005d56:	d1ec      	bne.n	8005d32 <_scanf_float+0x2c6>
 8005d58:	3d03      	subs	r5, #3
 8005d5a:	b2ed      	uxtb	r5, r5
 8005d5c:	1b76      	subs	r6, r6, r5
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	05da      	lsls	r2, r3, #23
 8005d62:	d52f      	bpl.n	8005dc4 <_scanf_float+0x358>
 8005d64:	055b      	lsls	r3, r3, #21
 8005d66:	d510      	bpl.n	8005d8a <_scanf_float+0x31e>
 8005d68:	455e      	cmp	r6, fp
 8005d6a:	f67f aebf 	bls.w	8005aec <_scanf_float+0x80>
 8005d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d76:	463a      	mov	r2, r7
 8005d78:	4640      	mov	r0, r8
 8005d7a:	4798      	blx	r3
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	6123      	str	r3, [r4, #16]
 8005d82:	e7f1      	b.n	8005d68 <_scanf_float+0x2fc>
 8005d84:	46aa      	mov	sl, r5
 8005d86:	9602      	str	r6, [sp, #8]
 8005d88:	e7df      	b.n	8005d4a <_scanf_float+0x2de>
 8005d8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	2965      	cmp	r1, #101	; 0x65
 8005d92:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d96:	f106 35ff 	add.w	r5, r6, #4294967295
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	d00c      	beq.n	8005db8 <_scanf_float+0x34c>
 8005d9e:	2945      	cmp	r1, #69	; 0x45
 8005da0:	d00a      	beq.n	8005db8 <_scanf_float+0x34c>
 8005da2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005da6:	463a      	mov	r2, r7
 8005da8:	4640      	mov	r0, r8
 8005daa:	4798      	blx	r3
 8005dac:	6923      	ldr	r3, [r4, #16]
 8005dae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	1eb5      	subs	r5, r6, #2
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dbc:	463a      	mov	r2, r7
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	4798      	blx	r3
 8005dc2:	462e      	mov	r6, r5
 8005dc4:	6825      	ldr	r5, [r4, #0]
 8005dc6:	f015 0510 	ands.w	r5, r5, #16
 8005dca:	d158      	bne.n	8005e7e <_scanf_float+0x412>
 8005dcc:	7035      	strb	r5, [r6, #0]
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd8:	d11c      	bne.n	8005e14 <_scanf_float+0x3a8>
 8005dda:	9b01      	ldr	r3, [sp, #4]
 8005ddc:	454b      	cmp	r3, r9
 8005dde:	eba3 0209 	sub.w	r2, r3, r9
 8005de2:	d124      	bne.n	8005e2e <_scanf_float+0x3c2>
 8005de4:	2200      	movs	r2, #0
 8005de6:	4659      	mov	r1, fp
 8005de8:	4640      	mov	r0, r8
 8005dea:	f000 fe9b 	bl	8006b24 <_strtod_r>
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	6821      	ldr	r1, [r4, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f011 0f02 	tst.w	r1, #2
 8005df8:	ec57 6b10 	vmov	r6, r7, d0
 8005dfc:	f103 0204 	add.w	r2, r3, #4
 8005e00:	d020      	beq.n	8005e44 <_scanf_float+0x3d8>
 8005e02:	9903      	ldr	r1, [sp, #12]
 8005e04:	600a      	str	r2, [r1, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	e9c3 6700 	strd	r6, r7, [r3]
 8005e0c:	68e3      	ldr	r3, [r4, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60e3      	str	r3, [r4, #12]
 8005e12:	e66c      	b.n	8005aee <_scanf_float+0x82>
 8005e14:	9b04      	ldr	r3, [sp, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0e4      	beq.n	8005de4 <_scanf_float+0x378>
 8005e1a:	9905      	ldr	r1, [sp, #20]
 8005e1c:	230a      	movs	r3, #10
 8005e1e:	462a      	mov	r2, r5
 8005e20:	3101      	adds	r1, #1
 8005e22:	4640      	mov	r0, r8
 8005e24:	f000 ff08 	bl	8006c38 <_strtol_r>
 8005e28:	9b04      	ldr	r3, [sp, #16]
 8005e2a:	9e05      	ldr	r6, [sp, #20]
 8005e2c:	1ac2      	subs	r2, r0, r3
 8005e2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005e32:	429e      	cmp	r6, r3
 8005e34:	bf28      	it	cs
 8005e36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005e3a:	4912      	ldr	r1, [pc, #72]	; (8005e84 <_scanf_float+0x418>)
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f000 f82b 	bl	8005e98 <siprintf>
 8005e42:	e7cf      	b.n	8005de4 <_scanf_float+0x378>
 8005e44:	f011 0f04 	tst.w	r1, #4
 8005e48:	9903      	ldr	r1, [sp, #12]
 8005e4a:	600a      	str	r2, [r1, #0]
 8005e4c:	d1db      	bne.n	8005e06 <_scanf_float+0x39a>
 8005e4e:	f8d3 8000 	ldr.w	r8, [r3]
 8005e52:	ee10 2a10 	vmov	r2, s0
 8005e56:	ee10 0a10 	vmov	r0, s0
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	4639      	mov	r1, r7
 8005e5e:	f7fa fe85 	bl	8000b6c <__aeabi_dcmpun>
 8005e62:	b128      	cbz	r0, 8005e70 <_scanf_float+0x404>
 8005e64:	4808      	ldr	r0, [pc, #32]	; (8005e88 <_scanf_float+0x41c>)
 8005e66:	f000 f811 	bl	8005e8c <nanf>
 8005e6a:	ed88 0a00 	vstr	s0, [r8]
 8005e6e:	e7cd      	b.n	8005e0c <_scanf_float+0x3a0>
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa fed8 	bl	8000c28 <__aeabi_d2f>
 8005e78:	f8c8 0000 	str.w	r0, [r8]
 8005e7c:	e7c6      	b.n	8005e0c <_scanf_float+0x3a0>
 8005e7e:	2500      	movs	r5, #0
 8005e80:	e635      	b.n	8005aee <_scanf_float+0x82>
 8005e82:	bf00      	nop
 8005e84:	08009a60 	.word	0x08009a60
 8005e88:	08009e78 	.word	0x08009e78

08005e8c <nanf>:
 8005e8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005e94 <nanf+0x8>
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	7fc00000 	.word	0x7fc00000

08005e98 <siprintf>:
 8005e98:	b40e      	push	{r1, r2, r3}
 8005e9a:	b500      	push	{lr}
 8005e9c:	b09c      	sub	sp, #112	; 0x70
 8005e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8005ea0:	9002      	str	r0, [sp, #8]
 8005ea2:	9006      	str	r0, [sp, #24]
 8005ea4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ea8:	4809      	ldr	r0, [pc, #36]	; (8005ed0 <siprintf+0x38>)
 8005eaa:	9107      	str	r1, [sp, #28]
 8005eac:	9104      	str	r1, [sp, #16]
 8005eae:	4909      	ldr	r1, [pc, #36]	; (8005ed4 <siprintf+0x3c>)
 8005eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eb4:	9105      	str	r1, [sp, #20]
 8005eb6:	6800      	ldr	r0, [r0, #0]
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	a902      	add	r1, sp, #8
 8005ebc:	f002 fea4 	bl	8008c08 <_svfiprintf_r>
 8005ec0:	9b02      	ldr	r3, [sp, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	b01c      	add	sp, #112	; 0x70
 8005ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ecc:	b003      	add	sp, #12
 8005ece:	4770      	bx	lr
 8005ed0:	2000000c 	.word	0x2000000c
 8005ed4:	ffff0208 	.word	0xffff0208

08005ed8 <sulp>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	4604      	mov	r4, r0
 8005edc:	460d      	mov	r5, r1
 8005ede:	ec45 4b10 	vmov	d0, r4, r5
 8005ee2:	4616      	mov	r6, r2
 8005ee4:	f002 fc2c 	bl	8008740 <__ulp>
 8005ee8:	ec51 0b10 	vmov	r0, r1, d0
 8005eec:	b17e      	cbz	r6, 8005f0e <sulp+0x36>
 8005eee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005ef2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	dd09      	ble.n	8005f0e <sulp+0x36>
 8005efa:	051b      	lsls	r3, r3, #20
 8005efc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f00:	2400      	movs	r4, #0
 8005f02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f06:	4622      	mov	r2, r4
 8005f08:	462b      	mov	r3, r5
 8005f0a:	f7fa fb95 	bl	8000638 <__aeabi_dmul>
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}

08005f10 <_strtod_l>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	b0a3      	sub	sp, #140	; 0x8c
 8005f16:	461f      	mov	r7, r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	931e      	str	r3, [sp, #120]	; 0x78
 8005f1c:	4ba4      	ldr	r3, [pc, #656]	; (80061b0 <_strtod_l+0x2a0>)
 8005f1e:	9219      	str	r2, [sp, #100]	; 0x64
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	9307      	str	r3, [sp, #28]
 8005f24:	4604      	mov	r4, r0
 8005f26:	4618      	mov	r0, r3
 8005f28:	4688      	mov	r8, r1
 8005f2a:	f7fa f971 	bl	8000210 <strlen>
 8005f2e:	f04f 0a00 	mov.w	sl, #0
 8005f32:	4605      	mov	r5, r0
 8005f34:	f04f 0b00 	mov.w	fp, #0
 8005f38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	2a2b      	cmp	r2, #43	; 0x2b
 8005f42:	d04c      	beq.n	8005fde <_strtod_l+0xce>
 8005f44:	d839      	bhi.n	8005fba <_strtod_l+0xaa>
 8005f46:	2a0d      	cmp	r2, #13
 8005f48:	d832      	bhi.n	8005fb0 <_strtod_l+0xa0>
 8005f4a:	2a08      	cmp	r2, #8
 8005f4c:	d832      	bhi.n	8005fb4 <_strtod_l+0xa4>
 8005f4e:	2a00      	cmp	r2, #0
 8005f50:	d03c      	beq.n	8005fcc <_strtod_l+0xbc>
 8005f52:	2300      	movs	r3, #0
 8005f54:	930e      	str	r3, [sp, #56]	; 0x38
 8005f56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005f58:	7833      	ldrb	r3, [r6, #0]
 8005f5a:	2b30      	cmp	r3, #48	; 0x30
 8005f5c:	f040 80b4 	bne.w	80060c8 <_strtod_l+0x1b8>
 8005f60:	7873      	ldrb	r3, [r6, #1]
 8005f62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f66:	2b58      	cmp	r3, #88	; 0x58
 8005f68:	d16c      	bne.n	8006044 <_strtod_l+0x134>
 8005f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	ab1e      	add	r3, sp, #120	; 0x78
 8005f70:	9702      	str	r7, [sp, #8]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	4a8f      	ldr	r2, [pc, #572]	; (80061b4 <_strtod_l+0x2a4>)
 8005f76:	ab1f      	add	r3, sp, #124	; 0x7c
 8005f78:	a91d      	add	r1, sp, #116	; 0x74
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f001 fd40 	bl	8007a00 <__gethex>
 8005f80:	f010 0707 	ands.w	r7, r0, #7
 8005f84:	4605      	mov	r5, r0
 8005f86:	d005      	beq.n	8005f94 <_strtod_l+0x84>
 8005f88:	2f06      	cmp	r7, #6
 8005f8a:	d12a      	bne.n	8005fe2 <_strtod_l+0xd2>
 8005f8c:	3601      	adds	r6, #1
 8005f8e:	2300      	movs	r3, #0
 8005f90:	961d      	str	r6, [sp, #116]	; 0x74
 8005f92:	930e      	str	r3, [sp, #56]	; 0x38
 8005f94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 8596 	bne.w	8006ac8 <_strtod_l+0xbb8>
 8005f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f9e:	b1db      	cbz	r3, 8005fd8 <_strtod_l+0xc8>
 8005fa0:	4652      	mov	r2, sl
 8005fa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005fa6:	ec43 2b10 	vmov	d0, r2, r3
 8005faa:	b023      	add	sp, #140	; 0x8c
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb0:	2a20      	cmp	r2, #32
 8005fb2:	d1ce      	bne.n	8005f52 <_strtod_l+0x42>
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	931d      	str	r3, [sp, #116]	; 0x74
 8005fb8:	e7c0      	b.n	8005f3c <_strtod_l+0x2c>
 8005fba:	2a2d      	cmp	r2, #45	; 0x2d
 8005fbc:	d1c9      	bne.n	8005f52 <_strtod_l+0x42>
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	920e      	str	r2, [sp, #56]	; 0x38
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	921d      	str	r2, [sp, #116]	; 0x74
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1c4      	bne.n	8005f56 <_strtod_l+0x46>
 8005fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f040 8576 	bne.w	8006ac4 <_strtod_l+0xbb4>
 8005fd8:	4652      	mov	r2, sl
 8005fda:	465b      	mov	r3, fp
 8005fdc:	e7e3      	b.n	8005fa6 <_strtod_l+0x96>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	e7ee      	b.n	8005fc0 <_strtod_l+0xb0>
 8005fe2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005fe4:	b13a      	cbz	r2, 8005ff6 <_strtod_l+0xe6>
 8005fe6:	2135      	movs	r1, #53	; 0x35
 8005fe8:	a820      	add	r0, sp, #128	; 0x80
 8005fea:	f002 fcb4 	bl	8008956 <__copybits>
 8005fee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f002 f879 	bl	80080e8 <_Bfree>
 8005ff6:	3f01      	subs	r7, #1
 8005ff8:	2f05      	cmp	r7, #5
 8005ffa:	d807      	bhi.n	800600c <_strtod_l+0xfc>
 8005ffc:	e8df f007 	tbb	[pc, r7]
 8006000:	1d180b0e 	.word	0x1d180b0e
 8006004:	030e      	.short	0x030e
 8006006:	f04f 0b00 	mov.w	fp, #0
 800600a:	46da      	mov	sl, fp
 800600c:	0728      	lsls	r0, r5, #28
 800600e:	d5c1      	bpl.n	8005f94 <_strtod_l+0x84>
 8006010:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006014:	e7be      	b.n	8005f94 <_strtod_l+0x84>
 8006016:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800601a:	e7f7      	b.n	800600c <_strtod_l+0xfc>
 800601c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006020:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006022:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006026:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800602a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800602e:	e7ed      	b.n	800600c <_strtod_l+0xfc>
 8006030:	f8df b184 	ldr.w	fp, [pc, #388]	; 80061b8 <_strtod_l+0x2a8>
 8006034:	f04f 0a00 	mov.w	sl, #0
 8006038:	e7e8      	b.n	800600c <_strtod_l+0xfc>
 800603a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800603e:	f04f 3aff 	mov.w	sl, #4294967295
 8006042:	e7e3      	b.n	800600c <_strtod_l+0xfc>
 8006044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	921d      	str	r2, [sp, #116]	; 0x74
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	2b30      	cmp	r3, #48	; 0x30
 800604e:	d0f9      	beq.n	8006044 <_strtod_l+0x134>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d09f      	beq.n	8005f94 <_strtod_l+0x84>
 8006054:	2301      	movs	r3, #1
 8006056:	f04f 0900 	mov.w	r9, #0
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800605e:	930a      	str	r3, [sp, #40]	; 0x28
 8006060:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006064:	464f      	mov	r7, r9
 8006066:	220a      	movs	r2, #10
 8006068:	981d      	ldr	r0, [sp, #116]	; 0x74
 800606a:	7806      	ldrb	r6, [r0, #0]
 800606c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006070:	b2d9      	uxtb	r1, r3
 8006072:	2909      	cmp	r1, #9
 8006074:	d92a      	bls.n	80060cc <_strtod_l+0x1bc>
 8006076:	9907      	ldr	r1, [sp, #28]
 8006078:	462a      	mov	r2, r5
 800607a:	f002 fedd 	bl	8008e38 <strncmp>
 800607e:	b398      	cbz	r0, 80060e8 <_strtod_l+0x1d8>
 8006080:	2000      	movs	r0, #0
 8006082:	4633      	mov	r3, r6
 8006084:	463d      	mov	r5, r7
 8006086:	9007      	str	r0, [sp, #28]
 8006088:	4602      	mov	r2, r0
 800608a:	2b65      	cmp	r3, #101	; 0x65
 800608c:	d001      	beq.n	8006092 <_strtod_l+0x182>
 800608e:	2b45      	cmp	r3, #69	; 0x45
 8006090:	d118      	bne.n	80060c4 <_strtod_l+0x1b4>
 8006092:	b91d      	cbnz	r5, 800609c <_strtod_l+0x18c>
 8006094:	9b04      	ldr	r3, [sp, #16]
 8006096:	4303      	orrs	r3, r0
 8006098:	d098      	beq.n	8005fcc <_strtod_l+0xbc>
 800609a:	2500      	movs	r5, #0
 800609c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80060a0:	f108 0301 	add.w	r3, r8, #1
 80060a4:	931d      	str	r3, [sp, #116]	; 0x74
 80060a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80060aa:	2b2b      	cmp	r3, #43	; 0x2b
 80060ac:	d075      	beq.n	800619a <_strtod_l+0x28a>
 80060ae:	2b2d      	cmp	r3, #45	; 0x2d
 80060b0:	d07b      	beq.n	80061aa <_strtod_l+0x29a>
 80060b2:	f04f 0c00 	mov.w	ip, #0
 80060b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80060ba:	2909      	cmp	r1, #9
 80060bc:	f240 8082 	bls.w	80061c4 <_strtod_l+0x2b4>
 80060c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80060c4:	2600      	movs	r6, #0
 80060c6:	e09d      	b.n	8006204 <_strtod_l+0x2f4>
 80060c8:	2300      	movs	r3, #0
 80060ca:	e7c4      	b.n	8006056 <_strtod_l+0x146>
 80060cc:	2f08      	cmp	r7, #8
 80060ce:	bfd8      	it	le
 80060d0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80060d2:	f100 0001 	add.w	r0, r0, #1
 80060d6:	bfda      	itte	le
 80060d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80060dc:	9309      	strle	r3, [sp, #36]	; 0x24
 80060de:	fb02 3909 	mlagt	r9, r2, r9, r3
 80060e2:	3701      	adds	r7, #1
 80060e4:	901d      	str	r0, [sp, #116]	; 0x74
 80060e6:	e7bf      	b.n	8006068 <_strtod_l+0x158>
 80060e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060ea:	195a      	adds	r2, r3, r5
 80060ec:	921d      	str	r2, [sp, #116]	; 0x74
 80060ee:	5d5b      	ldrb	r3, [r3, r5]
 80060f0:	2f00      	cmp	r7, #0
 80060f2:	d037      	beq.n	8006164 <_strtod_l+0x254>
 80060f4:	9007      	str	r0, [sp, #28]
 80060f6:	463d      	mov	r5, r7
 80060f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80060fc:	2a09      	cmp	r2, #9
 80060fe:	d912      	bls.n	8006126 <_strtod_l+0x216>
 8006100:	2201      	movs	r2, #1
 8006102:	e7c2      	b.n	800608a <_strtod_l+0x17a>
 8006104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	921d      	str	r2, [sp, #116]	; 0x74
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	3001      	adds	r0, #1
 800610e:	2b30      	cmp	r3, #48	; 0x30
 8006110:	d0f8      	beq.n	8006104 <_strtod_l+0x1f4>
 8006112:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006116:	2a08      	cmp	r2, #8
 8006118:	f200 84db 	bhi.w	8006ad2 <_strtod_l+0xbc2>
 800611c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800611e:	9007      	str	r0, [sp, #28]
 8006120:	2000      	movs	r0, #0
 8006122:	920a      	str	r2, [sp, #40]	; 0x28
 8006124:	4605      	mov	r5, r0
 8006126:	3b30      	subs	r3, #48	; 0x30
 8006128:	f100 0201 	add.w	r2, r0, #1
 800612c:	d014      	beq.n	8006158 <_strtod_l+0x248>
 800612e:	9907      	ldr	r1, [sp, #28]
 8006130:	4411      	add	r1, r2
 8006132:	9107      	str	r1, [sp, #28]
 8006134:	462a      	mov	r2, r5
 8006136:	eb00 0e05 	add.w	lr, r0, r5
 800613a:	210a      	movs	r1, #10
 800613c:	4572      	cmp	r2, lr
 800613e:	d113      	bne.n	8006168 <_strtod_l+0x258>
 8006140:	182a      	adds	r2, r5, r0
 8006142:	2a08      	cmp	r2, #8
 8006144:	f105 0501 	add.w	r5, r5, #1
 8006148:	4405      	add	r5, r0
 800614a:	dc1c      	bgt.n	8006186 <_strtod_l+0x276>
 800614c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800614e:	220a      	movs	r2, #10
 8006150:	fb02 3301 	mla	r3, r2, r1, r3
 8006154:	9309      	str	r3, [sp, #36]	; 0x24
 8006156:	2200      	movs	r2, #0
 8006158:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800615a:	1c59      	adds	r1, r3, #1
 800615c:	911d      	str	r1, [sp, #116]	; 0x74
 800615e:	785b      	ldrb	r3, [r3, #1]
 8006160:	4610      	mov	r0, r2
 8006162:	e7c9      	b.n	80060f8 <_strtod_l+0x1e8>
 8006164:	4638      	mov	r0, r7
 8006166:	e7d2      	b.n	800610e <_strtod_l+0x1fe>
 8006168:	2a08      	cmp	r2, #8
 800616a:	dc04      	bgt.n	8006176 <_strtod_l+0x266>
 800616c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800616e:	434e      	muls	r6, r1
 8006170:	9609      	str	r6, [sp, #36]	; 0x24
 8006172:	3201      	adds	r2, #1
 8006174:	e7e2      	b.n	800613c <_strtod_l+0x22c>
 8006176:	f102 0c01 	add.w	ip, r2, #1
 800617a:	f1bc 0f10 	cmp.w	ip, #16
 800617e:	bfd8      	it	le
 8006180:	fb01 f909 	mulle.w	r9, r1, r9
 8006184:	e7f5      	b.n	8006172 <_strtod_l+0x262>
 8006186:	2d10      	cmp	r5, #16
 8006188:	bfdc      	itt	le
 800618a:	220a      	movle	r2, #10
 800618c:	fb02 3909 	mlale	r9, r2, r9, r3
 8006190:	e7e1      	b.n	8006156 <_strtod_l+0x246>
 8006192:	2300      	movs	r3, #0
 8006194:	9307      	str	r3, [sp, #28]
 8006196:	2201      	movs	r2, #1
 8006198:	e77c      	b.n	8006094 <_strtod_l+0x184>
 800619a:	f04f 0c00 	mov.w	ip, #0
 800619e:	f108 0302 	add.w	r3, r8, #2
 80061a2:	931d      	str	r3, [sp, #116]	; 0x74
 80061a4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80061a8:	e785      	b.n	80060b6 <_strtod_l+0x1a6>
 80061aa:	f04f 0c01 	mov.w	ip, #1
 80061ae:	e7f6      	b.n	800619e <_strtod_l+0x28e>
 80061b0:	08009cb8 	.word	0x08009cb8
 80061b4:	08009a68 	.word	0x08009a68
 80061b8:	7ff00000 	.word	0x7ff00000
 80061bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	911d      	str	r1, [sp, #116]	; 0x74
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b30      	cmp	r3, #48	; 0x30
 80061c6:	d0f9      	beq.n	80061bc <_strtod_l+0x2ac>
 80061c8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80061cc:	2908      	cmp	r1, #8
 80061ce:	f63f af79 	bhi.w	80060c4 <_strtod_l+0x1b4>
 80061d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80061d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061d8:	9308      	str	r3, [sp, #32]
 80061da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061dc:	1c59      	adds	r1, r3, #1
 80061de:	911d      	str	r1, [sp, #116]	; 0x74
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80061e6:	2e09      	cmp	r6, #9
 80061e8:	d937      	bls.n	800625a <_strtod_l+0x34a>
 80061ea:	9e08      	ldr	r6, [sp, #32]
 80061ec:	1b89      	subs	r1, r1, r6
 80061ee:	2908      	cmp	r1, #8
 80061f0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80061f4:	dc02      	bgt.n	80061fc <_strtod_l+0x2ec>
 80061f6:	4576      	cmp	r6, lr
 80061f8:	bfa8      	it	ge
 80061fa:	4676      	movge	r6, lr
 80061fc:	f1bc 0f00 	cmp.w	ip, #0
 8006200:	d000      	beq.n	8006204 <_strtod_l+0x2f4>
 8006202:	4276      	negs	r6, r6
 8006204:	2d00      	cmp	r5, #0
 8006206:	d14f      	bne.n	80062a8 <_strtod_l+0x398>
 8006208:	9904      	ldr	r1, [sp, #16]
 800620a:	4301      	orrs	r1, r0
 800620c:	f47f aec2 	bne.w	8005f94 <_strtod_l+0x84>
 8006210:	2a00      	cmp	r2, #0
 8006212:	f47f aedb 	bne.w	8005fcc <_strtod_l+0xbc>
 8006216:	2b69      	cmp	r3, #105	; 0x69
 8006218:	d027      	beq.n	800626a <_strtod_l+0x35a>
 800621a:	dc24      	bgt.n	8006266 <_strtod_l+0x356>
 800621c:	2b49      	cmp	r3, #73	; 0x49
 800621e:	d024      	beq.n	800626a <_strtod_l+0x35a>
 8006220:	2b4e      	cmp	r3, #78	; 0x4e
 8006222:	f47f aed3 	bne.w	8005fcc <_strtod_l+0xbc>
 8006226:	499e      	ldr	r1, [pc, #632]	; (80064a0 <_strtod_l+0x590>)
 8006228:	a81d      	add	r0, sp, #116	; 0x74
 800622a:	f001 fe41 	bl	8007eb0 <__match>
 800622e:	2800      	cmp	r0, #0
 8006230:	f43f aecc 	beq.w	8005fcc <_strtod_l+0xbc>
 8006234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b28      	cmp	r3, #40	; 0x28
 800623a:	d12d      	bne.n	8006298 <_strtod_l+0x388>
 800623c:	4999      	ldr	r1, [pc, #612]	; (80064a4 <_strtod_l+0x594>)
 800623e:	aa20      	add	r2, sp, #128	; 0x80
 8006240:	a81d      	add	r0, sp, #116	; 0x74
 8006242:	f001 fe49 	bl	8007ed8 <__hexnan>
 8006246:	2805      	cmp	r0, #5
 8006248:	d126      	bne.n	8006298 <_strtod_l+0x388>
 800624a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800624c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006250:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006254:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006258:	e69c      	b.n	8005f94 <_strtod_l+0x84>
 800625a:	210a      	movs	r1, #10
 800625c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006260:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006264:	e7b9      	b.n	80061da <_strtod_l+0x2ca>
 8006266:	2b6e      	cmp	r3, #110	; 0x6e
 8006268:	e7db      	b.n	8006222 <_strtod_l+0x312>
 800626a:	498f      	ldr	r1, [pc, #572]	; (80064a8 <_strtod_l+0x598>)
 800626c:	a81d      	add	r0, sp, #116	; 0x74
 800626e:	f001 fe1f 	bl	8007eb0 <__match>
 8006272:	2800      	cmp	r0, #0
 8006274:	f43f aeaa 	beq.w	8005fcc <_strtod_l+0xbc>
 8006278:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800627a:	498c      	ldr	r1, [pc, #560]	; (80064ac <_strtod_l+0x59c>)
 800627c:	3b01      	subs	r3, #1
 800627e:	a81d      	add	r0, sp, #116	; 0x74
 8006280:	931d      	str	r3, [sp, #116]	; 0x74
 8006282:	f001 fe15 	bl	8007eb0 <__match>
 8006286:	b910      	cbnz	r0, 800628e <_strtod_l+0x37e>
 8006288:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800628a:	3301      	adds	r3, #1
 800628c:	931d      	str	r3, [sp, #116]	; 0x74
 800628e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80064bc <_strtod_l+0x5ac>
 8006292:	f04f 0a00 	mov.w	sl, #0
 8006296:	e67d      	b.n	8005f94 <_strtod_l+0x84>
 8006298:	4885      	ldr	r0, [pc, #532]	; (80064b0 <_strtod_l+0x5a0>)
 800629a:	f002 fdb5 	bl	8008e08 <nan>
 800629e:	ed8d 0b04 	vstr	d0, [sp, #16]
 80062a2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80062a6:	e675      	b.n	8005f94 <_strtod_l+0x84>
 80062a8:	9b07      	ldr	r3, [sp, #28]
 80062aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ac:	1af3      	subs	r3, r6, r3
 80062ae:	2f00      	cmp	r7, #0
 80062b0:	bf08      	it	eq
 80062b2:	462f      	moveq	r7, r5
 80062b4:	2d10      	cmp	r5, #16
 80062b6:	9308      	str	r3, [sp, #32]
 80062b8:	46a8      	mov	r8, r5
 80062ba:	bfa8      	it	ge
 80062bc:	f04f 0810 	movge.w	r8, #16
 80062c0:	f7fa f940 	bl	8000544 <__aeabi_ui2d>
 80062c4:	2d09      	cmp	r5, #9
 80062c6:	4682      	mov	sl, r0
 80062c8:	468b      	mov	fp, r1
 80062ca:	dd13      	ble.n	80062f4 <_strtod_l+0x3e4>
 80062cc:	4b79      	ldr	r3, [pc, #484]	; (80064b4 <_strtod_l+0x5a4>)
 80062ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80062d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80062d6:	f7fa f9af 	bl	8000638 <__aeabi_dmul>
 80062da:	4682      	mov	sl, r0
 80062dc:	4648      	mov	r0, r9
 80062de:	468b      	mov	fp, r1
 80062e0:	f7fa f930 	bl	8000544 <__aeabi_ui2d>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4650      	mov	r0, sl
 80062ea:	4659      	mov	r1, fp
 80062ec:	f7f9 ffee 	bl	80002cc <__adddf3>
 80062f0:	4682      	mov	sl, r0
 80062f2:	468b      	mov	fp, r1
 80062f4:	2d0f      	cmp	r5, #15
 80062f6:	dc38      	bgt.n	800636a <_strtod_l+0x45a>
 80062f8:	9b08      	ldr	r3, [sp, #32]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f43f ae4a 	beq.w	8005f94 <_strtod_l+0x84>
 8006300:	dd24      	ble.n	800634c <_strtod_l+0x43c>
 8006302:	2b16      	cmp	r3, #22
 8006304:	dc0b      	bgt.n	800631e <_strtod_l+0x40e>
 8006306:	4d6b      	ldr	r5, [pc, #428]	; (80064b4 <_strtod_l+0x5a4>)
 8006308:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800630c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006310:	4652      	mov	r2, sl
 8006312:	465b      	mov	r3, fp
 8006314:	f7fa f990 	bl	8000638 <__aeabi_dmul>
 8006318:	4682      	mov	sl, r0
 800631a:	468b      	mov	fp, r1
 800631c:	e63a      	b.n	8005f94 <_strtod_l+0x84>
 800631e:	9a08      	ldr	r2, [sp, #32]
 8006320:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006324:	4293      	cmp	r3, r2
 8006326:	db20      	blt.n	800636a <_strtod_l+0x45a>
 8006328:	4c62      	ldr	r4, [pc, #392]	; (80064b4 <_strtod_l+0x5a4>)
 800632a:	f1c5 050f 	rsb	r5, r5, #15
 800632e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006332:	4652      	mov	r2, sl
 8006334:	465b      	mov	r3, fp
 8006336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800633a:	f7fa f97d 	bl	8000638 <__aeabi_dmul>
 800633e:	9b08      	ldr	r3, [sp, #32]
 8006340:	1b5d      	subs	r5, r3, r5
 8006342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006346:	e9d4 2300 	ldrd	r2, r3, [r4]
 800634a:	e7e3      	b.n	8006314 <_strtod_l+0x404>
 800634c:	9b08      	ldr	r3, [sp, #32]
 800634e:	3316      	adds	r3, #22
 8006350:	db0b      	blt.n	800636a <_strtod_l+0x45a>
 8006352:	9b07      	ldr	r3, [sp, #28]
 8006354:	4a57      	ldr	r2, [pc, #348]	; (80064b4 <_strtod_l+0x5a4>)
 8006356:	1b9e      	subs	r6, r3, r6
 8006358:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800635c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006360:	4650      	mov	r0, sl
 8006362:	4659      	mov	r1, fp
 8006364:	f7fa fa92 	bl	800088c <__aeabi_ddiv>
 8006368:	e7d6      	b.n	8006318 <_strtod_l+0x408>
 800636a:	9b08      	ldr	r3, [sp, #32]
 800636c:	eba5 0808 	sub.w	r8, r5, r8
 8006370:	4498      	add	r8, r3
 8006372:	f1b8 0f00 	cmp.w	r8, #0
 8006376:	dd71      	ble.n	800645c <_strtod_l+0x54c>
 8006378:	f018 030f 	ands.w	r3, r8, #15
 800637c:	d00a      	beq.n	8006394 <_strtod_l+0x484>
 800637e:	494d      	ldr	r1, [pc, #308]	; (80064b4 <_strtod_l+0x5a4>)
 8006380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006384:	4652      	mov	r2, sl
 8006386:	465b      	mov	r3, fp
 8006388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800638c:	f7fa f954 	bl	8000638 <__aeabi_dmul>
 8006390:	4682      	mov	sl, r0
 8006392:	468b      	mov	fp, r1
 8006394:	f038 080f 	bics.w	r8, r8, #15
 8006398:	d04d      	beq.n	8006436 <_strtod_l+0x526>
 800639a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800639e:	dd22      	ble.n	80063e6 <_strtod_l+0x4d6>
 80063a0:	2500      	movs	r5, #0
 80063a2:	462e      	mov	r6, r5
 80063a4:	9509      	str	r5, [sp, #36]	; 0x24
 80063a6:	9507      	str	r5, [sp, #28]
 80063a8:	2322      	movs	r3, #34	; 0x22
 80063aa:	f8df b110 	ldr.w	fp, [pc, #272]	; 80064bc <_strtod_l+0x5ac>
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	f04f 0a00 	mov.w	sl, #0
 80063b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f43f adec 	beq.w	8005f94 <_strtod_l+0x84>
 80063bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80063be:	4620      	mov	r0, r4
 80063c0:	f001 fe92 	bl	80080e8 <_Bfree>
 80063c4:	9907      	ldr	r1, [sp, #28]
 80063c6:	4620      	mov	r0, r4
 80063c8:	f001 fe8e 	bl	80080e8 <_Bfree>
 80063cc:	4631      	mov	r1, r6
 80063ce:	4620      	mov	r0, r4
 80063d0:	f001 fe8a 	bl	80080e8 <_Bfree>
 80063d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063d6:	4620      	mov	r0, r4
 80063d8:	f001 fe86 	bl	80080e8 <_Bfree>
 80063dc:	4629      	mov	r1, r5
 80063de:	4620      	mov	r0, r4
 80063e0:	f001 fe82 	bl	80080e8 <_Bfree>
 80063e4:	e5d6      	b.n	8005f94 <_strtod_l+0x84>
 80063e6:	2300      	movs	r3, #0
 80063e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80063ec:	4650      	mov	r0, sl
 80063ee:	4659      	mov	r1, fp
 80063f0:	4699      	mov	r9, r3
 80063f2:	f1b8 0f01 	cmp.w	r8, #1
 80063f6:	dc21      	bgt.n	800643c <_strtod_l+0x52c>
 80063f8:	b10b      	cbz	r3, 80063fe <_strtod_l+0x4ee>
 80063fa:	4682      	mov	sl, r0
 80063fc:	468b      	mov	fp, r1
 80063fe:	4b2e      	ldr	r3, [pc, #184]	; (80064b8 <_strtod_l+0x5a8>)
 8006400:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006404:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006408:	4652      	mov	r2, sl
 800640a:	465b      	mov	r3, fp
 800640c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006410:	f7fa f912 	bl	8000638 <__aeabi_dmul>
 8006414:	4b29      	ldr	r3, [pc, #164]	; (80064bc <_strtod_l+0x5ac>)
 8006416:	460a      	mov	r2, r1
 8006418:	400b      	ands	r3, r1
 800641a:	4929      	ldr	r1, [pc, #164]	; (80064c0 <_strtod_l+0x5b0>)
 800641c:	428b      	cmp	r3, r1
 800641e:	4682      	mov	sl, r0
 8006420:	d8be      	bhi.n	80063a0 <_strtod_l+0x490>
 8006422:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006426:	428b      	cmp	r3, r1
 8006428:	bf86      	itte	hi
 800642a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80064c4 <_strtod_l+0x5b4>
 800642e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006432:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006436:	2300      	movs	r3, #0
 8006438:	9304      	str	r3, [sp, #16]
 800643a:	e081      	b.n	8006540 <_strtod_l+0x630>
 800643c:	f018 0f01 	tst.w	r8, #1
 8006440:	d007      	beq.n	8006452 <_strtod_l+0x542>
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <_strtod_l+0x5a8>)
 8006444:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f7fa f8f4 	bl	8000638 <__aeabi_dmul>
 8006450:	2301      	movs	r3, #1
 8006452:	f109 0901 	add.w	r9, r9, #1
 8006456:	ea4f 0868 	mov.w	r8, r8, asr #1
 800645a:	e7ca      	b.n	80063f2 <_strtod_l+0x4e2>
 800645c:	d0eb      	beq.n	8006436 <_strtod_l+0x526>
 800645e:	f1c8 0800 	rsb	r8, r8, #0
 8006462:	f018 020f 	ands.w	r2, r8, #15
 8006466:	d00a      	beq.n	800647e <_strtod_l+0x56e>
 8006468:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <_strtod_l+0x5a4>)
 800646a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800646e:	4650      	mov	r0, sl
 8006470:	4659      	mov	r1, fp
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f7fa fa09 	bl	800088c <__aeabi_ddiv>
 800647a:	4682      	mov	sl, r0
 800647c:	468b      	mov	fp, r1
 800647e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006482:	d0d8      	beq.n	8006436 <_strtod_l+0x526>
 8006484:	f1b8 0f1f 	cmp.w	r8, #31
 8006488:	dd1e      	ble.n	80064c8 <_strtod_l+0x5b8>
 800648a:	2500      	movs	r5, #0
 800648c:	462e      	mov	r6, r5
 800648e:	9509      	str	r5, [sp, #36]	; 0x24
 8006490:	9507      	str	r5, [sp, #28]
 8006492:	2322      	movs	r3, #34	; 0x22
 8006494:	f04f 0a00 	mov.w	sl, #0
 8006498:	f04f 0b00 	mov.w	fp, #0
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	e789      	b.n	80063b4 <_strtod_l+0x4a4>
 80064a0:	08009a39 	.word	0x08009a39
 80064a4:	08009a7c 	.word	0x08009a7c
 80064a8:	08009a31 	.word	0x08009a31
 80064ac:	08009bbc 	.word	0x08009bbc
 80064b0:	08009e78 	.word	0x08009e78
 80064b4:	08009d58 	.word	0x08009d58
 80064b8:	08009d30 	.word	0x08009d30
 80064bc:	7ff00000 	.word	0x7ff00000
 80064c0:	7ca00000 	.word	0x7ca00000
 80064c4:	7fefffff 	.word	0x7fefffff
 80064c8:	f018 0310 	ands.w	r3, r8, #16
 80064cc:	bf18      	it	ne
 80064ce:	236a      	movne	r3, #106	; 0x6a
 80064d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006888 <_strtod_l+0x978>
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	4650      	mov	r0, sl
 80064d8:	4659      	mov	r1, fp
 80064da:	2300      	movs	r3, #0
 80064dc:	f018 0f01 	tst.w	r8, #1
 80064e0:	d004      	beq.n	80064ec <_strtod_l+0x5dc>
 80064e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80064e6:	f7fa f8a7 	bl	8000638 <__aeabi_dmul>
 80064ea:	2301      	movs	r3, #1
 80064ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80064f0:	f109 0908 	add.w	r9, r9, #8
 80064f4:	d1f2      	bne.n	80064dc <_strtod_l+0x5cc>
 80064f6:	b10b      	cbz	r3, 80064fc <_strtod_l+0x5ec>
 80064f8:	4682      	mov	sl, r0
 80064fa:	468b      	mov	fp, r1
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	b1bb      	cbz	r3, 8006530 <_strtod_l+0x620>
 8006500:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006504:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006508:	2b00      	cmp	r3, #0
 800650a:	4659      	mov	r1, fp
 800650c:	dd10      	ble.n	8006530 <_strtod_l+0x620>
 800650e:	2b1f      	cmp	r3, #31
 8006510:	f340 8128 	ble.w	8006764 <_strtod_l+0x854>
 8006514:	2b34      	cmp	r3, #52	; 0x34
 8006516:	bfde      	ittt	le
 8006518:	3b20      	suble	r3, #32
 800651a:	f04f 32ff 	movle.w	r2, #4294967295
 800651e:	fa02 f303 	lslle.w	r3, r2, r3
 8006522:	f04f 0a00 	mov.w	sl, #0
 8006526:	bfcc      	ite	gt
 8006528:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800652c:	ea03 0b01 	andle.w	fp, r3, r1
 8006530:	2200      	movs	r2, #0
 8006532:	2300      	movs	r3, #0
 8006534:	4650      	mov	r0, sl
 8006536:	4659      	mov	r1, fp
 8006538:	f7fa fae6 	bl	8000b08 <__aeabi_dcmpeq>
 800653c:	2800      	cmp	r0, #0
 800653e:	d1a4      	bne.n	800648a <_strtod_l+0x57a>
 8006540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006546:	462b      	mov	r3, r5
 8006548:	463a      	mov	r2, r7
 800654a:	4620      	mov	r0, r4
 800654c:	f001 fe38 	bl	80081c0 <__s2b>
 8006550:	9009      	str	r0, [sp, #36]	; 0x24
 8006552:	2800      	cmp	r0, #0
 8006554:	f43f af24 	beq.w	80063a0 <_strtod_l+0x490>
 8006558:	9b07      	ldr	r3, [sp, #28]
 800655a:	1b9e      	subs	r6, r3, r6
 800655c:	9b08      	ldr	r3, [sp, #32]
 800655e:	2b00      	cmp	r3, #0
 8006560:	bfb4      	ite	lt
 8006562:	4633      	movlt	r3, r6
 8006564:	2300      	movge	r3, #0
 8006566:	9310      	str	r3, [sp, #64]	; 0x40
 8006568:	9b08      	ldr	r3, [sp, #32]
 800656a:	2500      	movs	r5, #0
 800656c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006570:	9318      	str	r3, [sp, #96]	; 0x60
 8006572:	462e      	mov	r6, r5
 8006574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006576:	4620      	mov	r0, r4
 8006578:	6859      	ldr	r1, [r3, #4]
 800657a:	f001 fd75 	bl	8008068 <_Balloc>
 800657e:	9007      	str	r0, [sp, #28]
 8006580:	2800      	cmp	r0, #0
 8006582:	f43f af11 	beq.w	80063a8 <_strtod_l+0x498>
 8006586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	3202      	adds	r2, #2
 800658c:	f103 010c 	add.w	r1, r3, #12
 8006590:	0092      	lsls	r2, r2, #2
 8006592:	300c      	adds	r0, #12
 8006594:	f001 fd5a 	bl	800804c <memcpy>
 8006598:	ec4b ab10 	vmov	d0, sl, fp
 800659c:	aa20      	add	r2, sp, #128	; 0x80
 800659e:	a91f      	add	r1, sp, #124	; 0x7c
 80065a0:	4620      	mov	r0, r4
 80065a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80065a6:	f002 f947 	bl	8008838 <__d2b>
 80065aa:	901e      	str	r0, [sp, #120]	; 0x78
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f43f aefb 	beq.w	80063a8 <_strtod_l+0x498>
 80065b2:	2101      	movs	r1, #1
 80065b4:	4620      	mov	r0, r4
 80065b6:	f001 fe9d 	bl	80082f4 <__i2b>
 80065ba:	4606      	mov	r6, r0
 80065bc:	2800      	cmp	r0, #0
 80065be:	f43f aef3 	beq.w	80063a8 <_strtod_l+0x498>
 80065c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065c4:	9904      	ldr	r1, [sp, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bfab      	itete	ge
 80065ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80065cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80065ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80065d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80065d4:	bfac      	ite	ge
 80065d6:	eb03 0902 	addge.w	r9, r3, r2
 80065da:	1ad7      	sublt	r7, r2, r3
 80065dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065de:	eba3 0801 	sub.w	r8, r3, r1
 80065e2:	4490      	add	r8, r2
 80065e4:	4ba3      	ldr	r3, [pc, #652]	; (8006874 <_strtod_l+0x964>)
 80065e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80065ea:	4598      	cmp	r8, r3
 80065ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80065f0:	f280 80cc 	bge.w	800678c <_strtod_l+0x87c>
 80065f4:	eba3 0308 	sub.w	r3, r3, r8
 80065f8:	2b1f      	cmp	r3, #31
 80065fa:	eba2 0203 	sub.w	r2, r2, r3
 80065fe:	f04f 0101 	mov.w	r1, #1
 8006602:	f300 80b6 	bgt.w	8006772 <_strtod_l+0x862>
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	9311      	str	r3, [sp, #68]	; 0x44
 800660c:	2300      	movs	r3, #0
 800660e:	930c      	str	r3, [sp, #48]	; 0x30
 8006610:	eb09 0802 	add.w	r8, r9, r2
 8006614:	9b04      	ldr	r3, [sp, #16]
 8006616:	45c1      	cmp	r9, r8
 8006618:	4417      	add	r7, r2
 800661a:	441f      	add	r7, r3
 800661c:	464b      	mov	r3, r9
 800661e:	bfa8      	it	ge
 8006620:	4643      	movge	r3, r8
 8006622:	42bb      	cmp	r3, r7
 8006624:	bfa8      	it	ge
 8006626:	463b      	movge	r3, r7
 8006628:	2b00      	cmp	r3, #0
 800662a:	bfc2      	ittt	gt
 800662c:	eba8 0803 	subgt.w	r8, r8, r3
 8006630:	1aff      	subgt	r7, r7, r3
 8006632:	eba9 0903 	subgt.w	r9, r9, r3
 8006636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	dd17      	ble.n	800666c <_strtod_l+0x75c>
 800663c:	4631      	mov	r1, r6
 800663e:	461a      	mov	r2, r3
 8006640:	4620      	mov	r0, r4
 8006642:	f001 ff13 	bl	800846c <__pow5mult>
 8006646:	4606      	mov	r6, r0
 8006648:	2800      	cmp	r0, #0
 800664a:	f43f aead 	beq.w	80063a8 <_strtod_l+0x498>
 800664e:	4601      	mov	r1, r0
 8006650:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006652:	4620      	mov	r0, r4
 8006654:	f001 fe64 	bl	8008320 <__multiply>
 8006658:	900f      	str	r0, [sp, #60]	; 0x3c
 800665a:	2800      	cmp	r0, #0
 800665c:	f43f aea4 	beq.w	80063a8 <_strtod_l+0x498>
 8006660:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006662:	4620      	mov	r0, r4
 8006664:	f001 fd40 	bl	80080e8 <_Bfree>
 8006668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800666a:	931e      	str	r3, [sp, #120]	; 0x78
 800666c:	f1b8 0f00 	cmp.w	r8, #0
 8006670:	f300 8091 	bgt.w	8006796 <_strtod_l+0x886>
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	2b00      	cmp	r3, #0
 8006678:	dd08      	ble.n	800668c <_strtod_l+0x77c>
 800667a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800667c:	9907      	ldr	r1, [sp, #28]
 800667e:	4620      	mov	r0, r4
 8006680:	f001 fef4 	bl	800846c <__pow5mult>
 8006684:	9007      	str	r0, [sp, #28]
 8006686:	2800      	cmp	r0, #0
 8006688:	f43f ae8e 	beq.w	80063a8 <_strtod_l+0x498>
 800668c:	2f00      	cmp	r7, #0
 800668e:	dd08      	ble.n	80066a2 <_strtod_l+0x792>
 8006690:	9907      	ldr	r1, [sp, #28]
 8006692:	463a      	mov	r2, r7
 8006694:	4620      	mov	r0, r4
 8006696:	f001 ff43 	bl	8008520 <__lshift>
 800669a:	9007      	str	r0, [sp, #28]
 800669c:	2800      	cmp	r0, #0
 800669e:	f43f ae83 	beq.w	80063a8 <_strtod_l+0x498>
 80066a2:	f1b9 0f00 	cmp.w	r9, #0
 80066a6:	dd08      	ble.n	80066ba <_strtod_l+0x7aa>
 80066a8:	4631      	mov	r1, r6
 80066aa:	464a      	mov	r2, r9
 80066ac:	4620      	mov	r0, r4
 80066ae:	f001 ff37 	bl	8008520 <__lshift>
 80066b2:	4606      	mov	r6, r0
 80066b4:	2800      	cmp	r0, #0
 80066b6:	f43f ae77 	beq.w	80063a8 <_strtod_l+0x498>
 80066ba:	9a07      	ldr	r2, [sp, #28]
 80066bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80066be:	4620      	mov	r0, r4
 80066c0:	f001 ffb6 	bl	8008630 <__mdiff>
 80066c4:	4605      	mov	r5, r0
 80066c6:	2800      	cmp	r0, #0
 80066c8:	f43f ae6e 	beq.w	80063a8 <_strtod_l+0x498>
 80066cc:	68c3      	ldr	r3, [r0, #12]
 80066ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80066d0:	2300      	movs	r3, #0
 80066d2:	60c3      	str	r3, [r0, #12]
 80066d4:	4631      	mov	r1, r6
 80066d6:	f001 ff8f 	bl	80085f8 <__mcmp>
 80066da:	2800      	cmp	r0, #0
 80066dc:	da65      	bge.n	80067aa <_strtod_l+0x89a>
 80066de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066e0:	ea53 030a 	orrs.w	r3, r3, sl
 80066e4:	f040 8087 	bne.w	80067f6 <_strtod_l+0x8e6>
 80066e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 8082 	bne.w	80067f6 <_strtod_l+0x8e6>
 80066f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066f6:	0d1b      	lsrs	r3, r3, #20
 80066f8:	051b      	lsls	r3, r3, #20
 80066fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80066fe:	d97a      	bls.n	80067f6 <_strtod_l+0x8e6>
 8006700:	696b      	ldr	r3, [r5, #20]
 8006702:	b913      	cbnz	r3, 800670a <_strtod_l+0x7fa>
 8006704:	692b      	ldr	r3, [r5, #16]
 8006706:	2b01      	cmp	r3, #1
 8006708:	dd75      	ble.n	80067f6 <_strtod_l+0x8e6>
 800670a:	4629      	mov	r1, r5
 800670c:	2201      	movs	r2, #1
 800670e:	4620      	mov	r0, r4
 8006710:	f001 ff06 	bl	8008520 <__lshift>
 8006714:	4631      	mov	r1, r6
 8006716:	4605      	mov	r5, r0
 8006718:	f001 ff6e 	bl	80085f8 <__mcmp>
 800671c:	2800      	cmp	r0, #0
 800671e:	dd6a      	ble.n	80067f6 <_strtod_l+0x8e6>
 8006720:	9904      	ldr	r1, [sp, #16]
 8006722:	4a55      	ldr	r2, [pc, #340]	; (8006878 <_strtod_l+0x968>)
 8006724:	465b      	mov	r3, fp
 8006726:	2900      	cmp	r1, #0
 8006728:	f000 8085 	beq.w	8006836 <_strtod_l+0x926>
 800672c:	ea02 010b 	and.w	r1, r2, fp
 8006730:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006734:	dc7f      	bgt.n	8006836 <_strtod_l+0x926>
 8006736:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800673a:	f77f aeaa 	ble.w	8006492 <_strtod_l+0x582>
 800673e:	4a4f      	ldr	r2, [pc, #316]	; (800687c <_strtod_l+0x96c>)
 8006740:	2300      	movs	r3, #0
 8006742:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006746:	4650      	mov	r0, sl
 8006748:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800674c:	4659      	mov	r1, fp
 800674e:	f7f9 ff73 	bl	8000638 <__aeabi_dmul>
 8006752:	460b      	mov	r3, r1
 8006754:	4303      	orrs	r3, r0
 8006756:	bf08      	it	eq
 8006758:	2322      	moveq	r3, #34	; 0x22
 800675a:	4682      	mov	sl, r0
 800675c:	468b      	mov	fp, r1
 800675e:	bf08      	it	eq
 8006760:	6023      	streq	r3, [r4, #0]
 8006762:	e62b      	b.n	80063bc <_strtod_l+0x4ac>
 8006764:	f04f 32ff 	mov.w	r2, #4294967295
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	ea03 0a0a 	and.w	sl, r3, sl
 8006770:	e6de      	b.n	8006530 <_strtod_l+0x620>
 8006772:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006776:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800677a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800677e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006782:	fa01 f308 	lsl.w	r3, r1, r8
 8006786:	930c      	str	r3, [sp, #48]	; 0x30
 8006788:	9111      	str	r1, [sp, #68]	; 0x44
 800678a:	e741      	b.n	8006610 <_strtod_l+0x700>
 800678c:	2300      	movs	r3, #0
 800678e:	930c      	str	r3, [sp, #48]	; 0x30
 8006790:	2301      	movs	r3, #1
 8006792:	9311      	str	r3, [sp, #68]	; 0x44
 8006794:	e73c      	b.n	8006610 <_strtod_l+0x700>
 8006796:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006798:	4642      	mov	r2, r8
 800679a:	4620      	mov	r0, r4
 800679c:	f001 fec0 	bl	8008520 <__lshift>
 80067a0:	901e      	str	r0, [sp, #120]	; 0x78
 80067a2:	2800      	cmp	r0, #0
 80067a4:	f47f af66 	bne.w	8006674 <_strtod_l+0x764>
 80067a8:	e5fe      	b.n	80063a8 <_strtod_l+0x498>
 80067aa:	465f      	mov	r7, fp
 80067ac:	d16e      	bne.n	800688c <_strtod_l+0x97c>
 80067ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067b4:	b342      	cbz	r2, 8006808 <_strtod_l+0x8f8>
 80067b6:	4a32      	ldr	r2, [pc, #200]	; (8006880 <_strtod_l+0x970>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d128      	bne.n	800680e <_strtod_l+0x8fe>
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	4650      	mov	r0, sl
 80067c0:	b1eb      	cbz	r3, 80067fe <_strtod_l+0x8ee>
 80067c2:	4a2d      	ldr	r2, [pc, #180]	; (8006878 <_strtod_l+0x968>)
 80067c4:	403a      	ands	r2, r7
 80067c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80067ca:	f04f 31ff 	mov.w	r1, #4294967295
 80067ce:	d819      	bhi.n	8006804 <_strtod_l+0x8f4>
 80067d0:	0d12      	lsrs	r2, r2, #20
 80067d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80067d6:	fa01 f303 	lsl.w	r3, r1, r3
 80067da:	4298      	cmp	r0, r3
 80067dc:	d117      	bne.n	800680e <_strtod_l+0x8fe>
 80067de:	4b29      	ldr	r3, [pc, #164]	; (8006884 <_strtod_l+0x974>)
 80067e0:	429f      	cmp	r7, r3
 80067e2:	d102      	bne.n	80067ea <_strtod_l+0x8da>
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f addf 	beq.w	80063a8 <_strtod_l+0x498>
 80067ea:	4b23      	ldr	r3, [pc, #140]	; (8006878 <_strtod_l+0x968>)
 80067ec:	403b      	ands	r3, r7
 80067ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80067f2:	f04f 0a00 	mov.w	sl, #0
 80067f6:	9b04      	ldr	r3, [sp, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1a0      	bne.n	800673e <_strtod_l+0x82e>
 80067fc:	e5de      	b.n	80063bc <_strtod_l+0x4ac>
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006802:	e7ea      	b.n	80067da <_strtod_l+0x8ca>
 8006804:	460b      	mov	r3, r1
 8006806:	e7e8      	b.n	80067da <_strtod_l+0x8ca>
 8006808:	ea53 030a 	orrs.w	r3, r3, sl
 800680c:	d088      	beq.n	8006720 <_strtod_l+0x810>
 800680e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006810:	b1db      	cbz	r3, 800684a <_strtod_l+0x93a>
 8006812:	423b      	tst	r3, r7
 8006814:	d0ef      	beq.n	80067f6 <_strtod_l+0x8e6>
 8006816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	4650      	mov	r0, sl
 800681c:	4659      	mov	r1, fp
 800681e:	b1c3      	cbz	r3, 8006852 <_strtod_l+0x942>
 8006820:	f7ff fb5a 	bl	8005ed8 <sulp>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800682c:	f7f9 fd4e 	bl	80002cc <__adddf3>
 8006830:	4682      	mov	sl, r0
 8006832:	468b      	mov	fp, r1
 8006834:	e7df      	b.n	80067f6 <_strtod_l+0x8e6>
 8006836:	4013      	ands	r3, r2
 8006838:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800683c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006840:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006844:	f04f 3aff 	mov.w	sl, #4294967295
 8006848:	e7d5      	b.n	80067f6 <_strtod_l+0x8e6>
 800684a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800684c:	ea13 0f0a 	tst.w	r3, sl
 8006850:	e7e0      	b.n	8006814 <_strtod_l+0x904>
 8006852:	f7ff fb41 	bl	8005ed8 <sulp>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800685e:	f7f9 fd33 	bl	80002c8 <__aeabi_dsub>
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	4682      	mov	sl, r0
 8006868:	468b      	mov	fp, r1
 800686a:	f7fa f94d 	bl	8000b08 <__aeabi_dcmpeq>
 800686e:	2800      	cmp	r0, #0
 8006870:	d0c1      	beq.n	80067f6 <_strtod_l+0x8e6>
 8006872:	e60e      	b.n	8006492 <_strtod_l+0x582>
 8006874:	fffffc02 	.word	0xfffffc02
 8006878:	7ff00000 	.word	0x7ff00000
 800687c:	39500000 	.word	0x39500000
 8006880:	000fffff 	.word	0x000fffff
 8006884:	7fefffff 	.word	0x7fefffff
 8006888:	08009a90 	.word	0x08009a90
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	f002 f82e 	bl	80088f0 <__ratio>
 8006894:	ec59 8b10 	vmov	r8, r9, d0
 8006898:	ee10 0a10 	vmov	r0, s0
 800689c:	2200      	movs	r2, #0
 800689e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7fa f944 	bl	8000b30 <__aeabi_dcmple>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d07c      	beq.n	80069a6 <_strtod_l+0xa96>
 80068ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d04c      	beq.n	800694c <_strtod_l+0xa3c>
 80068b2:	4b95      	ldr	r3, [pc, #596]	; (8006b08 <_strtod_l+0xbf8>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80068ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006b08 <_strtod_l+0xbf8>
 80068be:	f04f 0800 	mov.w	r8, #0
 80068c2:	4b92      	ldr	r3, [pc, #584]	; (8006b0c <_strtod_l+0xbfc>)
 80068c4:	403b      	ands	r3, r7
 80068c6:	9311      	str	r3, [sp, #68]	; 0x44
 80068c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80068ca:	4b91      	ldr	r3, [pc, #580]	; (8006b10 <_strtod_l+0xc00>)
 80068cc:	429a      	cmp	r2, r3
 80068ce:	f040 80b2 	bne.w	8006a36 <_strtod_l+0xb26>
 80068d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80068d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80068de:	ec4b ab10 	vmov	d0, sl, fp
 80068e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80068e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80068ea:	f001 ff29 	bl	8008740 <__ulp>
 80068ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068f2:	ec53 2b10 	vmov	r2, r3, d0
 80068f6:	f7f9 fe9f 	bl	8000638 <__aeabi_dmul>
 80068fa:	4652      	mov	r2, sl
 80068fc:	465b      	mov	r3, fp
 80068fe:	f7f9 fce5 	bl	80002cc <__adddf3>
 8006902:	460b      	mov	r3, r1
 8006904:	4981      	ldr	r1, [pc, #516]	; (8006b0c <_strtod_l+0xbfc>)
 8006906:	4a83      	ldr	r2, [pc, #524]	; (8006b14 <_strtod_l+0xc04>)
 8006908:	4019      	ands	r1, r3
 800690a:	4291      	cmp	r1, r2
 800690c:	4682      	mov	sl, r0
 800690e:	d95e      	bls.n	80069ce <_strtod_l+0xabe>
 8006910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006912:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006916:	4293      	cmp	r3, r2
 8006918:	d103      	bne.n	8006922 <_strtod_l+0xa12>
 800691a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691c:	3301      	adds	r3, #1
 800691e:	f43f ad43 	beq.w	80063a8 <_strtod_l+0x498>
 8006922:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006b20 <_strtod_l+0xc10>
 8006926:	f04f 3aff 	mov.w	sl, #4294967295
 800692a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800692c:	4620      	mov	r0, r4
 800692e:	f001 fbdb 	bl	80080e8 <_Bfree>
 8006932:	9907      	ldr	r1, [sp, #28]
 8006934:	4620      	mov	r0, r4
 8006936:	f001 fbd7 	bl	80080e8 <_Bfree>
 800693a:	4631      	mov	r1, r6
 800693c:	4620      	mov	r0, r4
 800693e:	f001 fbd3 	bl	80080e8 <_Bfree>
 8006942:	4629      	mov	r1, r5
 8006944:	4620      	mov	r0, r4
 8006946:	f001 fbcf 	bl	80080e8 <_Bfree>
 800694a:	e613      	b.n	8006574 <_strtod_l+0x664>
 800694c:	f1ba 0f00 	cmp.w	sl, #0
 8006950:	d11b      	bne.n	800698a <_strtod_l+0xa7a>
 8006952:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006956:	b9f3      	cbnz	r3, 8006996 <_strtod_l+0xa86>
 8006958:	4b6b      	ldr	r3, [pc, #428]	; (8006b08 <_strtod_l+0xbf8>)
 800695a:	2200      	movs	r2, #0
 800695c:	4640      	mov	r0, r8
 800695e:	4649      	mov	r1, r9
 8006960:	f7fa f8dc 	bl	8000b1c <__aeabi_dcmplt>
 8006964:	b9d0      	cbnz	r0, 800699c <_strtod_l+0xa8c>
 8006966:	4640      	mov	r0, r8
 8006968:	4649      	mov	r1, r9
 800696a:	4b6b      	ldr	r3, [pc, #428]	; (8006b18 <_strtod_l+0xc08>)
 800696c:	2200      	movs	r2, #0
 800696e:	f7f9 fe63 	bl	8000638 <__aeabi_dmul>
 8006972:	4680      	mov	r8, r0
 8006974:	4689      	mov	r9, r1
 8006976:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800697a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800697e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006980:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006984:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006988:	e79b      	b.n	80068c2 <_strtod_l+0x9b2>
 800698a:	f1ba 0f01 	cmp.w	sl, #1
 800698e:	d102      	bne.n	8006996 <_strtod_l+0xa86>
 8006990:	2f00      	cmp	r7, #0
 8006992:	f43f ad7e 	beq.w	8006492 <_strtod_l+0x582>
 8006996:	4b61      	ldr	r3, [pc, #388]	; (8006b1c <_strtod_l+0xc0c>)
 8006998:	2200      	movs	r2, #0
 800699a:	e78c      	b.n	80068b6 <_strtod_l+0x9a6>
 800699c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006b18 <_strtod_l+0xc08>
 80069a0:	f04f 0800 	mov.w	r8, #0
 80069a4:	e7e7      	b.n	8006976 <_strtod_l+0xa66>
 80069a6:	4b5c      	ldr	r3, [pc, #368]	; (8006b18 <_strtod_l+0xc08>)
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	2200      	movs	r2, #0
 80069ae:	f7f9 fe43 	bl	8000638 <__aeabi_dmul>
 80069b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069b4:	4680      	mov	r8, r0
 80069b6:	4689      	mov	r9, r1
 80069b8:	b933      	cbnz	r3, 80069c8 <_strtod_l+0xab8>
 80069ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069be:	9012      	str	r0, [sp, #72]	; 0x48
 80069c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80069c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80069c6:	e7dd      	b.n	8006984 <_strtod_l+0xa74>
 80069c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80069cc:	e7f9      	b.n	80069c2 <_strtod_l+0xab2>
 80069ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80069d2:	9b04      	ldr	r3, [sp, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1a8      	bne.n	800692a <_strtod_l+0xa1a>
 80069d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80069de:	0d1b      	lsrs	r3, r3, #20
 80069e0:	051b      	lsls	r3, r3, #20
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d1a1      	bne.n	800692a <_strtod_l+0xa1a>
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7fa f985 	bl	8000cf8 <__aeabi_d2lz>
 80069ee:	f7f9 fdf5 	bl	80005dc <__aeabi_l2d>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4640      	mov	r0, r8
 80069f8:	4649      	mov	r1, r9
 80069fa:	f7f9 fc65 	bl	80002c8 <__aeabi_dsub>
 80069fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a04:	ea43 030a 	orr.w	r3, r3, sl
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	4680      	mov	r8, r0
 8006a0c:	4689      	mov	r9, r1
 8006a0e:	d053      	beq.n	8006ab8 <_strtod_l+0xba8>
 8006a10:	a335      	add	r3, pc, #212	; (adr r3, 8006ae8 <_strtod_l+0xbd8>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7fa f881 	bl	8000b1c <__aeabi_dcmplt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	f47f acce 	bne.w	80063bc <_strtod_l+0x4ac>
 8006a20:	a333      	add	r3, pc, #204	; (adr r3, 8006af0 <_strtod_l+0xbe0>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	4640      	mov	r0, r8
 8006a28:	4649      	mov	r1, r9
 8006a2a:	f7fa f895 	bl	8000b58 <__aeabi_dcmpgt>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f43f af7b 	beq.w	800692a <_strtod_l+0xa1a>
 8006a34:	e4c2      	b.n	80063bc <_strtod_l+0x4ac>
 8006a36:	9b04      	ldr	r3, [sp, #16]
 8006a38:	b333      	cbz	r3, 8006a88 <_strtod_l+0xb78>
 8006a3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a40:	d822      	bhi.n	8006a88 <_strtod_l+0xb78>
 8006a42:	a32d      	add	r3, pc, #180	; (adr r3, 8006af8 <_strtod_l+0xbe8>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	4640      	mov	r0, r8
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	f7fa f870 	bl	8000b30 <__aeabi_dcmple>
 8006a50:	b1a0      	cbz	r0, 8006a7c <_strtod_l+0xb6c>
 8006a52:	4649      	mov	r1, r9
 8006a54:	4640      	mov	r0, r8
 8006a56:	f7fa f8c7 	bl	8000be8 <__aeabi_d2uiz>
 8006a5a:	2801      	cmp	r0, #1
 8006a5c:	bf38      	it	cc
 8006a5e:	2001      	movcc	r0, #1
 8006a60:	f7f9 fd70 	bl	8000544 <__aeabi_ui2d>
 8006a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a66:	4680      	mov	r8, r0
 8006a68:	4689      	mov	r9, r1
 8006a6a:	bb13      	cbnz	r3, 8006ab2 <_strtod_l+0xba2>
 8006a6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a70:	9014      	str	r0, [sp, #80]	; 0x50
 8006a72:	9315      	str	r3, [sp, #84]	; 0x54
 8006a74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006a78:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a80:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	930d      	str	r3, [sp, #52]	; 0x34
 8006a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a8c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006a90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006a94:	f001 fe54 	bl	8008740 <__ulp>
 8006a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a9c:	ec53 2b10 	vmov	r2, r3, d0
 8006aa0:	f7f9 fdca 	bl	8000638 <__aeabi_dmul>
 8006aa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006aa8:	f7f9 fc10 	bl	80002cc <__adddf3>
 8006aac:	4682      	mov	sl, r0
 8006aae:	468b      	mov	fp, r1
 8006ab0:	e78f      	b.n	80069d2 <_strtod_l+0xac2>
 8006ab2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006ab6:	e7dd      	b.n	8006a74 <_strtod_l+0xb64>
 8006ab8:	a311      	add	r3, pc, #68	; (adr r3, 8006b00 <_strtod_l+0xbf0>)
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	f7fa f82d 	bl	8000b1c <__aeabi_dcmplt>
 8006ac2:	e7b4      	b.n	8006a2e <_strtod_l+0xb1e>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	930e      	str	r3, [sp, #56]	; 0x38
 8006ac8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006aca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	f7ff ba65 	b.w	8005f9c <_strtod_l+0x8c>
 8006ad2:	2b65      	cmp	r3, #101	; 0x65
 8006ad4:	f43f ab5d 	beq.w	8006192 <_strtod_l+0x282>
 8006ad8:	2b45      	cmp	r3, #69	; 0x45
 8006ada:	f43f ab5a 	beq.w	8006192 <_strtod_l+0x282>
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f7ff bb92 	b.w	8006208 <_strtod_l+0x2f8>
 8006ae4:	f3af 8000 	nop.w
 8006ae8:	94a03595 	.word	0x94a03595
 8006aec:	3fdfffff 	.word	0x3fdfffff
 8006af0:	35afe535 	.word	0x35afe535
 8006af4:	3fe00000 	.word	0x3fe00000
 8006af8:	ffc00000 	.word	0xffc00000
 8006afc:	41dfffff 	.word	0x41dfffff
 8006b00:	94a03595 	.word	0x94a03595
 8006b04:	3fcfffff 	.word	0x3fcfffff
 8006b08:	3ff00000 	.word	0x3ff00000
 8006b0c:	7ff00000 	.word	0x7ff00000
 8006b10:	7fe00000 	.word	0x7fe00000
 8006b14:	7c9fffff 	.word	0x7c9fffff
 8006b18:	3fe00000 	.word	0x3fe00000
 8006b1c:	bff00000 	.word	0xbff00000
 8006b20:	7fefffff 	.word	0x7fefffff

08006b24 <_strtod_r>:
 8006b24:	4b01      	ldr	r3, [pc, #4]	; (8006b2c <_strtod_r+0x8>)
 8006b26:	f7ff b9f3 	b.w	8005f10 <_strtod_l>
 8006b2a:	bf00      	nop
 8006b2c:	20000074 	.word	0x20000074

08006b30 <_strtol_l.isra.0>:
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b36:	d001      	beq.n	8006b3c <_strtol_l.isra.0+0xc>
 8006b38:	2b24      	cmp	r3, #36	; 0x24
 8006b3a:	d906      	bls.n	8006b4a <_strtol_l.isra.0+0x1a>
 8006b3c:	f7fe fafa 	bl	8005134 <__errno>
 8006b40:	2316      	movs	r3, #22
 8006b42:	6003      	str	r3, [r0, #0]
 8006b44:	2000      	movs	r0, #0
 8006b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4a:	4f3a      	ldr	r7, [pc, #232]	; (8006c34 <_strtol_l.isra.0+0x104>)
 8006b4c:	468e      	mov	lr, r1
 8006b4e:	4676      	mov	r6, lr
 8006b50:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006b54:	5de5      	ldrb	r5, [r4, r7]
 8006b56:	f015 0508 	ands.w	r5, r5, #8
 8006b5a:	d1f8      	bne.n	8006b4e <_strtol_l.isra.0+0x1e>
 8006b5c:	2c2d      	cmp	r4, #45	; 0x2d
 8006b5e:	d134      	bne.n	8006bca <_strtol_l.isra.0+0x9a>
 8006b60:	f89e 4000 	ldrb.w	r4, [lr]
 8006b64:	f04f 0801 	mov.w	r8, #1
 8006b68:	f106 0e02 	add.w	lr, r6, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d05c      	beq.n	8006c2a <_strtol_l.isra.0+0xfa>
 8006b70:	2b10      	cmp	r3, #16
 8006b72:	d10c      	bne.n	8006b8e <_strtol_l.isra.0+0x5e>
 8006b74:	2c30      	cmp	r4, #48	; 0x30
 8006b76:	d10a      	bne.n	8006b8e <_strtol_l.isra.0+0x5e>
 8006b78:	f89e 4000 	ldrb.w	r4, [lr]
 8006b7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006b80:	2c58      	cmp	r4, #88	; 0x58
 8006b82:	d14d      	bne.n	8006c20 <_strtol_l.isra.0+0xf0>
 8006b84:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f10e 0e02 	add.w	lr, lr, #2
 8006b8e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006b92:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b96:	2600      	movs	r6, #0
 8006b98:	fbbc f9f3 	udiv	r9, ip, r3
 8006b9c:	4635      	mov	r5, r6
 8006b9e:	fb03 ca19 	mls	sl, r3, r9, ip
 8006ba2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006ba6:	2f09      	cmp	r7, #9
 8006ba8:	d818      	bhi.n	8006bdc <_strtol_l.isra.0+0xac>
 8006baa:	463c      	mov	r4, r7
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	dd24      	ble.n	8006bfa <_strtol_l.isra.0+0xca>
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	db1f      	blt.n	8006bf4 <_strtol_l.isra.0+0xc4>
 8006bb4:	45a9      	cmp	r9, r5
 8006bb6:	d31d      	bcc.n	8006bf4 <_strtol_l.isra.0+0xc4>
 8006bb8:	d101      	bne.n	8006bbe <_strtol_l.isra.0+0x8e>
 8006bba:	45a2      	cmp	sl, r4
 8006bbc:	db1a      	blt.n	8006bf4 <_strtol_l.isra.0+0xc4>
 8006bbe:	fb05 4503 	mla	r5, r5, r3, r4
 8006bc2:	2601      	movs	r6, #1
 8006bc4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006bc8:	e7eb      	b.n	8006ba2 <_strtol_l.isra.0+0x72>
 8006bca:	2c2b      	cmp	r4, #43	; 0x2b
 8006bcc:	bf08      	it	eq
 8006bce:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006bd2:	46a8      	mov	r8, r5
 8006bd4:	bf08      	it	eq
 8006bd6:	f106 0e02 	addeq.w	lr, r6, #2
 8006bda:	e7c7      	b.n	8006b6c <_strtol_l.isra.0+0x3c>
 8006bdc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006be0:	2f19      	cmp	r7, #25
 8006be2:	d801      	bhi.n	8006be8 <_strtol_l.isra.0+0xb8>
 8006be4:	3c37      	subs	r4, #55	; 0x37
 8006be6:	e7e1      	b.n	8006bac <_strtol_l.isra.0+0x7c>
 8006be8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006bec:	2f19      	cmp	r7, #25
 8006bee:	d804      	bhi.n	8006bfa <_strtol_l.isra.0+0xca>
 8006bf0:	3c57      	subs	r4, #87	; 0x57
 8006bf2:	e7db      	b.n	8006bac <_strtol_l.isra.0+0x7c>
 8006bf4:	f04f 36ff 	mov.w	r6, #4294967295
 8006bf8:	e7e4      	b.n	8006bc4 <_strtol_l.isra.0+0x94>
 8006bfa:	2e00      	cmp	r6, #0
 8006bfc:	da05      	bge.n	8006c0a <_strtol_l.isra.0+0xda>
 8006bfe:	2322      	movs	r3, #34	; 0x22
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	4665      	mov	r5, ip
 8006c04:	b942      	cbnz	r2, 8006c18 <_strtol_l.isra.0+0xe8>
 8006c06:	4628      	mov	r0, r5
 8006c08:	e79d      	b.n	8006b46 <_strtol_l.isra.0+0x16>
 8006c0a:	f1b8 0f00 	cmp.w	r8, #0
 8006c0e:	d000      	beq.n	8006c12 <_strtol_l.isra.0+0xe2>
 8006c10:	426d      	negs	r5, r5
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	d0f7      	beq.n	8006c06 <_strtol_l.isra.0+0xd6>
 8006c16:	b10e      	cbz	r6, 8006c1c <_strtol_l.isra.0+0xec>
 8006c18:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006c1c:	6011      	str	r1, [r2, #0]
 8006c1e:	e7f2      	b.n	8006c06 <_strtol_l.isra.0+0xd6>
 8006c20:	2430      	movs	r4, #48	; 0x30
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1b3      	bne.n	8006b8e <_strtol_l.isra.0+0x5e>
 8006c26:	2308      	movs	r3, #8
 8006c28:	e7b1      	b.n	8006b8e <_strtol_l.isra.0+0x5e>
 8006c2a:	2c30      	cmp	r4, #48	; 0x30
 8006c2c:	d0a4      	beq.n	8006b78 <_strtol_l.isra.0+0x48>
 8006c2e:	230a      	movs	r3, #10
 8006c30:	e7ad      	b.n	8006b8e <_strtol_l.isra.0+0x5e>
 8006c32:	bf00      	nop
 8006c34:	08009ab9 	.word	0x08009ab9

08006c38 <_strtol_r>:
 8006c38:	f7ff bf7a 	b.w	8006b30 <_strtol_l.isra.0>

08006c3c <quorem>:
 8006c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	6903      	ldr	r3, [r0, #16]
 8006c42:	690c      	ldr	r4, [r1, #16]
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	4607      	mov	r7, r0
 8006c48:	f2c0 8081 	blt.w	8006d4e <quorem+0x112>
 8006c4c:	3c01      	subs	r4, #1
 8006c4e:	f101 0814 	add.w	r8, r1, #20
 8006c52:	f100 0514 	add.w	r5, r0, #20
 8006c56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c64:	3301      	adds	r3, #1
 8006c66:	429a      	cmp	r2, r3
 8006c68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c70:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c74:	d331      	bcc.n	8006cda <quorem+0x9e>
 8006c76:	f04f 0e00 	mov.w	lr, #0
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	46ac      	mov	ip, r5
 8006c7e:	46f2      	mov	sl, lr
 8006c80:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c84:	b293      	uxth	r3, r2
 8006c86:	fb06 e303 	mla	r3, r6, r3, lr
 8006c8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	ebaa 0303 	sub.w	r3, sl, r3
 8006c94:	0c12      	lsrs	r2, r2, #16
 8006c96:	f8dc a000 	ldr.w	sl, [ip]
 8006c9a:	fb06 e202 	mla	r2, r6, r2, lr
 8006c9e:	fa13 f38a 	uxtah	r3, r3, sl
 8006ca2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ca6:	fa1f fa82 	uxth.w	sl, r2
 8006caa:	f8dc 2000 	ldr.w	r2, [ip]
 8006cae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006cb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cbc:	4581      	cmp	r9, r0
 8006cbe:	f84c 3b04 	str.w	r3, [ip], #4
 8006cc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006cc6:	d2db      	bcs.n	8006c80 <quorem+0x44>
 8006cc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ccc:	b92b      	cbnz	r3, 8006cda <quorem+0x9e>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	3b04      	subs	r3, #4
 8006cd2:	429d      	cmp	r5, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	d32e      	bcc.n	8006d36 <quorem+0xfa>
 8006cd8:	613c      	str	r4, [r7, #16]
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f001 fc8c 	bl	80085f8 <__mcmp>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	db24      	blt.n	8006d2e <quorem+0xf2>
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f04f 0c00 	mov.w	ip, #0
 8006cec:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cf0:	f8d0 e000 	ldr.w	lr, [r0]
 8006cf4:	b293      	uxth	r3, r2
 8006cf6:	ebac 0303 	sub.w	r3, ip, r3
 8006cfa:	0c12      	lsrs	r2, r2, #16
 8006cfc:	fa13 f38e 	uxtah	r3, r3, lr
 8006d00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d0e:	45c1      	cmp	r9, r8
 8006d10:	f840 3b04 	str.w	r3, [r0], #4
 8006d14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d18:	d2e8      	bcs.n	8006cec <quorem+0xb0>
 8006d1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d22:	b922      	cbnz	r2, 8006d2e <quorem+0xf2>
 8006d24:	3b04      	subs	r3, #4
 8006d26:	429d      	cmp	r5, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	d30a      	bcc.n	8006d42 <quorem+0x106>
 8006d2c:	613c      	str	r4, [r7, #16]
 8006d2e:	4630      	mov	r0, r6
 8006d30:	b003      	add	sp, #12
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	6812      	ldr	r2, [r2, #0]
 8006d38:	3b04      	subs	r3, #4
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	d1cc      	bne.n	8006cd8 <quorem+0x9c>
 8006d3e:	3c01      	subs	r4, #1
 8006d40:	e7c7      	b.n	8006cd2 <quorem+0x96>
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	3b04      	subs	r3, #4
 8006d46:	2a00      	cmp	r2, #0
 8006d48:	d1f0      	bne.n	8006d2c <quorem+0xf0>
 8006d4a:	3c01      	subs	r4, #1
 8006d4c:	e7eb      	b.n	8006d26 <quorem+0xea>
 8006d4e:	2000      	movs	r0, #0
 8006d50:	e7ee      	b.n	8006d30 <quorem+0xf4>
 8006d52:	0000      	movs	r0, r0
 8006d54:	0000      	movs	r0, r0
	...

08006d58 <_dtoa_r>:
 8006d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	ed2d 8b02 	vpush	{d8}
 8006d60:	ec57 6b10 	vmov	r6, r7, d0
 8006d64:	b095      	sub	sp, #84	; 0x54
 8006d66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d6c:	9105      	str	r1, [sp, #20]
 8006d6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006d72:	4604      	mov	r4, r0
 8006d74:	9209      	str	r2, [sp, #36]	; 0x24
 8006d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d78:	b975      	cbnz	r5, 8006d98 <_dtoa_r+0x40>
 8006d7a:	2010      	movs	r0, #16
 8006d7c:	f001 f94c 	bl	8008018 <malloc>
 8006d80:	4602      	mov	r2, r0
 8006d82:	6260      	str	r0, [r4, #36]	; 0x24
 8006d84:	b920      	cbnz	r0, 8006d90 <_dtoa_r+0x38>
 8006d86:	4bb2      	ldr	r3, [pc, #712]	; (8007050 <_dtoa_r+0x2f8>)
 8006d88:	21ea      	movs	r1, #234	; 0xea
 8006d8a:	48b2      	ldr	r0, [pc, #712]	; (8007054 <_dtoa_r+0x2fc>)
 8006d8c:	f002 f874 	bl	8008e78 <__assert_func>
 8006d90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d94:	6005      	str	r5, [r0, #0]
 8006d96:	60c5      	str	r5, [r0, #12]
 8006d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d9a:	6819      	ldr	r1, [r3, #0]
 8006d9c:	b151      	cbz	r1, 8006db4 <_dtoa_r+0x5c>
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	604a      	str	r2, [r1, #4]
 8006da2:	2301      	movs	r3, #1
 8006da4:	4093      	lsls	r3, r2
 8006da6:	608b      	str	r3, [r1, #8]
 8006da8:	4620      	mov	r0, r4
 8006daa:	f001 f99d 	bl	80080e8 <_Bfree>
 8006dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	1e3b      	subs	r3, r7, #0
 8006db6:	bfb9      	ittee	lt
 8006db8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006dbc:	9303      	strlt	r3, [sp, #12]
 8006dbe:	2300      	movge	r3, #0
 8006dc0:	f8c8 3000 	strge.w	r3, [r8]
 8006dc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006dc8:	4ba3      	ldr	r3, [pc, #652]	; (8007058 <_dtoa_r+0x300>)
 8006dca:	bfbc      	itt	lt
 8006dcc:	2201      	movlt	r2, #1
 8006dce:	f8c8 2000 	strlt.w	r2, [r8]
 8006dd2:	ea33 0309 	bics.w	r3, r3, r9
 8006dd6:	d11b      	bne.n	8006e10 <_dtoa_r+0xb8>
 8006dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dda:	f242 730f 	movw	r3, #9999	; 0x270f
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006de4:	4333      	orrs	r3, r6
 8006de6:	f000 857a 	beq.w	80078de <_dtoa_r+0xb86>
 8006dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dec:	b963      	cbnz	r3, 8006e08 <_dtoa_r+0xb0>
 8006dee:	4b9b      	ldr	r3, [pc, #620]	; (800705c <_dtoa_r+0x304>)
 8006df0:	e024      	b.n	8006e3c <_dtoa_r+0xe4>
 8006df2:	4b9b      	ldr	r3, [pc, #620]	; (8007060 <_dtoa_r+0x308>)
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	9800      	ldr	r0, [sp, #0]
 8006dfe:	b015      	add	sp, #84	; 0x54
 8006e00:	ecbd 8b02 	vpop	{d8}
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	4b94      	ldr	r3, [pc, #592]	; (800705c <_dtoa_r+0x304>)
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	3303      	adds	r3, #3
 8006e0e:	e7f3      	b.n	8006df8 <_dtoa_r+0xa0>
 8006e10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e14:	2200      	movs	r2, #0
 8006e16:	ec51 0b17 	vmov	r0, r1, d7
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006e20:	f7f9 fe72 	bl	8000b08 <__aeabi_dcmpeq>
 8006e24:	4680      	mov	r8, r0
 8006e26:	b158      	cbz	r0, 8006e40 <_dtoa_r+0xe8>
 8006e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8551 	beq.w	80078d8 <_dtoa_r+0xb80>
 8006e36:	488b      	ldr	r0, [pc, #556]	; (8007064 <_dtoa_r+0x30c>)
 8006e38:	6018      	str	r0, [r3, #0]
 8006e3a:	1e43      	subs	r3, r0, #1
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	e7dd      	b.n	8006dfc <_dtoa_r+0xa4>
 8006e40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006e44:	aa12      	add	r2, sp, #72	; 0x48
 8006e46:	a913      	add	r1, sp, #76	; 0x4c
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f001 fcf5 	bl	8008838 <__d2b>
 8006e4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e52:	4683      	mov	fp, r0
 8006e54:	2d00      	cmp	r5, #0
 8006e56:	d07c      	beq.n	8006f52 <_dtoa_r+0x1fa>
 8006e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006e66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006e6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006e6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e72:	4b7d      	ldr	r3, [pc, #500]	; (8007068 <_dtoa_r+0x310>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	4630      	mov	r0, r6
 8006e78:	4639      	mov	r1, r7
 8006e7a:	f7f9 fa25 	bl	80002c8 <__aeabi_dsub>
 8006e7e:	a36e      	add	r3, pc, #440	; (adr r3, 8007038 <_dtoa_r+0x2e0>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f7f9 fbd8 	bl	8000638 <__aeabi_dmul>
 8006e88:	a36d      	add	r3, pc, #436	; (adr r3, 8007040 <_dtoa_r+0x2e8>)
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f7f9 fa1d 	bl	80002cc <__adddf3>
 8006e92:	4606      	mov	r6, r0
 8006e94:	4628      	mov	r0, r5
 8006e96:	460f      	mov	r7, r1
 8006e98:	f7f9 fb64 	bl	8000564 <__aeabi_i2d>
 8006e9c:	a36a      	add	r3, pc, #424	; (adr r3, 8007048 <_dtoa_r+0x2f0>)
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f7f9 fbc9 	bl	8000638 <__aeabi_dmul>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4630      	mov	r0, r6
 8006eac:	4639      	mov	r1, r7
 8006eae:	f7f9 fa0d 	bl	80002cc <__adddf3>
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	f7f9 fe6f 	bl	8000b98 <__aeabi_d2iz>
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4682      	mov	sl, r0
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	f7f9 fe2a 	bl	8000b1c <__aeabi_dcmplt>
 8006ec8:	b148      	cbz	r0, 8006ede <_dtoa_r+0x186>
 8006eca:	4650      	mov	r0, sl
 8006ecc:	f7f9 fb4a 	bl	8000564 <__aeabi_i2d>
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	f7f9 fe18 	bl	8000b08 <__aeabi_dcmpeq>
 8006ed8:	b908      	cbnz	r0, 8006ede <_dtoa_r+0x186>
 8006eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ede:	f1ba 0f16 	cmp.w	sl, #22
 8006ee2:	d854      	bhi.n	8006f8e <_dtoa_r+0x236>
 8006ee4:	4b61      	ldr	r3, [pc, #388]	; (800706c <_dtoa_r+0x314>)
 8006ee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ef2:	f7f9 fe13 	bl	8000b1c <__aeabi_dcmplt>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d04b      	beq.n	8006f92 <_dtoa_r+0x23a>
 8006efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006efe:	2300      	movs	r3, #0
 8006f00:	930e      	str	r3, [sp, #56]	; 0x38
 8006f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f04:	1b5d      	subs	r5, r3, r5
 8006f06:	1e6b      	subs	r3, r5, #1
 8006f08:	9304      	str	r3, [sp, #16]
 8006f0a:	bf43      	ittte	mi
 8006f0c:	2300      	movmi	r3, #0
 8006f0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006f12:	9304      	strmi	r3, [sp, #16]
 8006f14:	f04f 0800 	movpl.w	r8, #0
 8006f18:	f1ba 0f00 	cmp.w	sl, #0
 8006f1c:	db3b      	blt.n	8006f96 <_dtoa_r+0x23e>
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006f24:	4453      	add	r3, sl
 8006f26:	9304      	str	r3, [sp, #16]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	9306      	str	r3, [sp, #24]
 8006f2c:	9b05      	ldr	r3, [sp, #20]
 8006f2e:	2b09      	cmp	r3, #9
 8006f30:	d869      	bhi.n	8007006 <_dtoa_r+0x2ae>
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	bfc4      	itt	gt
 8006f36:	3b04      	subgt	r3, #4
 8006f38:	9305      	strgt	r3, [sp, #20]
 8006f3a:	9b05      	ldr	r3, [sp, #20]
 8006f3c:	f1a3 0302 	sub.w	r3, r3, #2
 8006f40:	bfcc      	ite	gt
 8006f42:	2500      	movgt	r5, #0
 8006f44:	2501      	movle	r5, #1
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d869      	bhi.n	800701e <_dtoa_r+0x2c6>
 8006f4a:	e8df f003 	tbb	[pc, r3]
 8006f4e:	4e2c      	.short	0x4e2c
 8006f50:	5a4c      	.short	0x5a4c
 8006f52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006f56:	441d      	add	r5, r3
 8006f58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	bfc1      	itttt	gt
 8006f60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006f68:	fa09 f303 	lslgt.w	r3, r9, r3
 8006f6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f70:	bfda      	itte	le
 8006f72:	f1c3 0320 	rsble	r3, r3, #32
 8006f76:	fa06 f003 	lslle.w	r0, r6, r3
 8006f7a:	4318      	orrgt	r0, r3
 8006f7c:	f7f9 fae2 	bl	8000544 <__aeabi_ui2d>
 8006f80:	2301      	movs	r3, #1
 8006f82:	4606      	mov	r6, r0
 8006f84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f88:	3d01      	subs	r5, #1
 8006f8a:	9310      	str	r3, [sp, #64]	; 0x40
 8006f8c:	e771      	b.n	8006e72 <_dtoa_r+0x11a>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e7b6      	b.n	8006f00 <_dtoa_r+0x1a8>
 8006f92:	900e      	str	r0, [sp, #56]	; 0x38
 8006f94:	e7b5      	b.n	8006f02 <_dtoa_r+0x1aa>
 8006f96:	f1ca 0300 	rsb	r3, sl, #0
 8006f9a:	9306      	str	r3, [sp, #24]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	eba8 080a 	sub.w	r8, r8, sl
 8006fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8006fa4:	e7c2      	b.n	8006f2c <_dtoa_r+0x1d4>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	9308      	str	r3, [sp, #32]
 8006faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dc39      	bgt.n	8007024 <_dtoa_r+0x2cc>
 8006fb0:	f04f 0901 	mov.w	r9, #1
 8006fb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fb8:	464b      	mov	r3, r9
 8006fba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006fbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	6042      	str	r2, [r0, #4]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	f102 0614 	add.w	r6, r2, #20
 8006fca:	429e      	cmp	r6, r3
 8006fcc:	6841      	ldr	r1, [r0, #4]
 8006fce:	d92f      	bls.n	8007030 <_dtoa_r+0x2d8>
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f001 f849 	bl	8008068 <_Balloc>
 8006fd6:	9000      	str	r0, [sp, #0]
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d14b      	bne.n	8007074 <_dtoa_r+0x31c>
 8006fdc:	4b24      	ldr	r3, [pc, #144]	; (8007070 <_dtoa_r+0x318>)
 8006fde:	4602      	mov	r2, r0
 8006fe0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fe4:	e6d1      	b.n	8006d8a <_dtoa_r+0x32>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e7de      	b.n	8006fa8 <_dtoa_r+0x250>
 8006fea:	2300      	movs	r3, #0
 8006fec:	9308      	str	r3, [sp, #32]
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	eb0a 0903 	add.w	r9, sl, r3
 8006ff4:	f109 0301 	add.w	r3, r9, #1
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	bfb8      	it	lt
 8006ffe:	2301      	movlt	r3, #1
 8007000:	e7dd      	b.n	8006fbe <_dtoa_r+0x266>
 8007002:	2301      	movs	r3, #1
 8007004:	e7f2      	b.n	8006fec <_dtoa_r+0x294>
 8007006:	2501      	movs	r5, #1
 8007008:	2300      	movs	r3, #0
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	9508      	str	r5, [sp, #32]
 800700e:	f04f 39ff 	mov.w	r9, #4294967295
 8007012:	2200      	movs	r2, #0
 8007014:	f8cd 9004 	str.w	r9, [sp, #4]
 8007018:	2312      	movs	r3, #18
 800701a:	9209      	str	r2, [sp, #36]	; 0x24
 800701c:	e7cf      	b.n	8006fbe <_dtoa_r+0x266>
 800701e:	2301      	movs	r3, #1
 8007020:	9308      	str	r3, [sp, #32]
 8007022:	e7f4      	b.n	800700e <_dtoa_r+0x2b6>
 8007024:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007028:	f8cd 9004 	str.w	r9, [sp, #4]
 800702c:	464b      	mov	r3, r9
 800702e:	e7c6      	b.n	8006fbe <_dtoa_r+0x266>
 8007030:	3101      	adds	r1, #1
 8007032:	6041      	str	r1, [r0, #4]
 8007034:	0052      	lsls	r2, r2, #1
 8007036:	e7c6      	b.n	8006fc6 <_dtoa_r+0x26e>
 8007038:	636f4361 	.word	0x636f4361
 800703c:	3fd287a7 	.word	0x3fd287a7
 8007040:	8b60c8b3 	.word	0x8b60c8b3
 8007044:	3fc68a28 	.word	0x3fc68a28
 8007048:	509f79fb 	.word	0x509f79fb
 800704c:	3fd34413 	.word	0x3fd34413
 8007050:	08009bc6 	.word	0x08009bc6
 8007054:	08009bdd 	.word	0x08009bdd
 8007058:	7ff00000 	.word	0x7ff00000
 800705c:	08009bc2 	.word	0x08009bc2
 8007060:	08009bb9 	.word	0x08009bb9
 8007064:	08009a3d 	.word	0x08009a3d
 8007068:	3ff80000 	.word	0x3ff80000
 800706c:	08009d58 	.word	0x08009d58
 8007070:	08009c3c 	.word	0x08009c3c
 8007074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007076:	9a00      	ldr	r2, [sp, #0]
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	9b01      	ldr	r3, [sp, #4]
 800707c:	2b0e      	cmp	r3, #14
 800707e:	f200 80ad 	bhi.w	80071dc <_dtoa_r+0x484>
 8007082:	2d00      	cmp	r5, #0
 8007084:	f000 80aa 	beq.w	80071dc <_dtoa_r+0x484>
 8007088:	f1ba 0f00 	cmp.w	sl, #0
 800708c:	dd36      	ble.n	80070fc <_dtoa_r+0x3a4>
 800708e:	4ac3      	ldr	r2, [pc, #780]	; (800739c <_dtoa_r+0x644>)
 8007090:	f00a 030f 	and.w	r3, sl, #15
 8007094:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007098:	ed93 7b00 	vldr	d7, [r3]
 800709c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80070a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80070a4:	eeb0 8a47 	vmov.f32	s16, s14
 80070a8:	eef0 8a67 	vmov.f32	s17, s15
 80070ac:	d016      	beq.n	80070dc <_dtoa_r+0x384>
 80070ae:	4bbc      	ldr	r3, [pc, #752]	; (80073a0 <_dtoa_r+0x648>)
 80070b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070b8:	f7f9 fbe8 	bl	800088c <__aeabi_ddiv>
 80070bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c0:	f007 070f 	and.w	r7, r7, #15
 80070c4:	2503      	movs	r5, #3
 80070c6:	4eb6      	ldr	r6, [pc, #728]	; (80073a0 <_dtoa_r+0x648>)
 80070c8:	b957      	cbnz	r7, 80070e0 <_dtoa_r+0x388>
 80070ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ce:	ec53 2b18 	vmov	r2, r3, d8
 80070d2:	f7f9 fbdb 	bl	800088c <__aeabi_ddiv>
 80070d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070da:	e029      	b.n	8007130 <_dtoa_r+0x3d8>
 80070dc:	2502      	movs	r5, #2
 80070de:	e7f2      	b.n	80070c6 <_dtoa_r+0x36e>
 80070e0:	07f9      	lsls	r1, r7, #31
 80070e2:	d508      	bpl.n	80070f6 <_dtoa_r+0x39e>
 80070e4:	ec51 0b18 	vmov	r0, r1, d8
 80070e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070ec:	f7f9 faa4 	bl	8000638 <__aeabi_dmul>
 80070f0:	ec41 0b18 	vmov	d8, r0, r1
 80070f4:	3501      	adds	r5, #1
 80070f6:	107f      	asrs	r7, r7, #1
 80070f8:	3608      	adds	r6, #8
 80070fa:	e7e5      	b.n	80070c8 <_dtoa_r+0x370>
 80070fc:	f000 80a6 	beq.w	800724c <_dtoa_r+0x4f4>
 8007100:	f1ca 0600 	rsb	r6, sl, #0
 8007104:	4ba5      	ldr	r3, [pc, #660]	; (800739c <_dtoa_r+0x644>)
 8007106:	4fa6      	ldr	r7, [pc, #664]	; (80073a0 <_dtoa_r+0x648>)
 8007108:	f006 020f 	and.w	r2, r6, #15
 800710c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007118:	f7f9 fa8e 	bl	8000638 <__aeabi_dmul>
 800711c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007120:	1136      	asrs	r6, r6, #4
 8007122:	2300      	movs	r3, #0
 8007124:	2502      	movs	r5, #2
 8007126:	2e00      	cmp	r6, #0
 8007128:	f040 8085 	bne.w	8007236 <_dtoa_r+0x4de>
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1d2      	bne.n	80070d6 <_dtoa_r+0x37e>
 8007130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 808c 	beq.w	8007250 <_dtoa_r+0x4f8>
 8007138:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800713c:	4b99      	ldr	r3, [pc, #612]	; (80073a4 <_dtoa_r+0x64c>)
 800713e:	2200      	movs	r2, #0
 8007140:	4630      	mov	r0, r6
 8007142:	4639      	mov	r1, r7
 8007144:	f7f9 fcea 	bl	8000b1c <__aeabi_dcmplt>
 8007148:	2800      	cmp	r0, #0
 800714a:	f000 8081 	beq.w	8007250 <_dtoa_r+0x4f8>
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d07d      	beq.n	8007250 <_dtoa_r+0x4f8>
 8007154:	f1b9 0f00 	cmp.w	r9, #0
 8007158:	dd3c      	ble.n	80071d4 <_dtoa_r+0x47c>
 800715a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	2200      	movs	r2, #0
 8007162:	4b91      	ldr	r3, [pc, #580]	; (80073a8 <_dtoa_r+0x650>)
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fa66 	bl	8000638 <__aeabi_dmul>
 800716c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007170:	3501      	adds	r5, #1
 8007172:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007176:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800717a:	4628      	mov	r0, r5
 800717c:	f7f9 f9f2 	bl	8000564 <__aeabi_i2d>
 8007180:	4632      	mov	r2, r6
 8007182:	463b      	mov	r3, r7
 8007184:	f7f9 fa58 	bl	8000638 <__aeabi_dmul>
 8007188:	4b88      	ldr	r3, [pc, #544]	; (80073ac <_dtoa_r+0x654>)
 800718a:	2200      	movs	r2, #0
 800718c:	f7f9 f89e 	bl	80002cc <__adddf3>
 8007190:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007198:	9303      	str	r3, [sp, #12]
 800719a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800719c:	2b00      	cmp	r3, #0
 800719e:	d15c      	bne.n	800725a <_dtoa_r+0x502>
 80071a0:	4b83      	ldr	r3, [pc, #524]	; (80073b0 <_dtoa_r+0x658>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	4630      	mov	r0, r6
 80071a6:	4639      	mov	r1, r7
 80071a8:	f7f9 f88e 	bl	80002c8 <__aeabi_dsub>
 80071ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071b0:	4606      	mov	r6, r0
 80071b2:	460f      	mov	r7, r1
 80071b4:	f7f9 fcd0 	bl	8000b58 <__aeabi_dcmpgt>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	f040 8296 	bne.w	80076ea <_dtoa_r+0x992>
 80071be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80071c2:	4630      	mov	r0, r6
 80071c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071c8:	4639      	mov	r1, r7
 80071ca:	f7f9 fca7 	bl	8000b1c <__aeabi_dcmplt>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f040 8288 	bne.w	80076e4 <_dtoa_r+0x98c>
 80071d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f2c0 8158 	blt.w	8007494 <_dtoa_r+0x73c>
 80071e4:	f1ba 0f0e 	cmp.w	sl, #14
 80071e8:	f300 8154 	bgt.w	8007494 <_dtoa_r+0x73c>
 80071ec:	4b6b      	ldr	r3, [pc, #428]	; (800739c <_dtoa_r+0x644>)
 80071ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f280 80e3 	bge.w	80073c4 <_dtoa_r+0x66c>
 80071fe:	9b01      	ldr	r3, [sp, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f300 80df 	bgt.w	80073c4 <_dtoa_r+0x66c>
 8007206:	f040 826d 	bne.w	80076e4 <_dtoa_r+0x98c>
 800720a:	4b69      	ldr	r3, [pc, #420]	; (80073b0 <_dtoa_r+0x658>)
 800720c:	2200      	movs	r2, #0
 800720e:	4640      	mov	r0, r8
 8007210:	4649      	mov	r1, r9
 8007212:	f7f9 fa11 	bl	8000638 <__aeabi_dmul>
 8007216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800721a:	f7f9 fc93 	bl	8000b44 <__aeabi_dcmpge>
 800721e:	9e01      	ldr	r6, [sp, #4]
 8007220:	4637      	mov	r7, r6
 8007222:	2800      	cmp	r0, #0
 8007224:	f040 8243 	bne.w	80076ae <_dtoa_r+0x956>
 8007228:	9d00      	ldr	r5, [sp, #0]
 800722a:	2331      	movs	r3, #49	; 0x31
 800722c:	f805 3b01 	strb.w	r3, [r5], #1
 8007230:	f10a 0a01 	add.w	sl, sl, #1
 8007234:	e23f      	b.n	80076b6 <_dtoa_r+0x95e>
 8007236:	07f2      	lsls	r2, r6, #31
 8007238:	d505      	bpl.n	8007246 <_dtoa_r+0x4ee>
 800723a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800723e:	f7f9 f9fb 	bl	8000638 <__aeabi_dmul>
 8007242:	3501      	adds	r5, #1
 8007244:	2301      	movs	r3, #1
 8007246:	1076      	asrs	r6, r6, #1
 8007248:	3708      	adds	r7, #8
 800724a:	e76c      	b.n	8007126 <_dtoa_r+0x3ce>
 800724c:	2502      	movs	r5, #2
 800724e:	e76f      	b.n	8007130 <_dtoa_r+0x3d8>
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	f8cd a01c 	str.w	sl, [sp, #28]
 8007256:	930c      	str	r3, [sp, #48]	; 0x30
 8007258:	e78d      	b.n	8007176 <_dtoa_r+0x41e>
 800725a:	9900      	ldr	r1, [sp, #0]
 800725c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800725e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007260:	4b4e      	ldr	r3, [pc, #312]	; (800739c <_dtoa_r+0x644>)
 8007262:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007266:	4401      	add	r1, r0
 8007268:	9102      	str	r1, [sp, #8]
 800726a:	9908      	ldr	r1, [sp, #32]
 800726c:	eeb0 8a47 	vmov.f32	s16, s14
 8007270:	eef0 8a67 	vmov.f32	s17, s15
 8007274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007278:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800727c:	2900      	cmp	r1, #0
 800727e:	d045      	beq.n	800730c <_dtoa_r+0x5b4>
 8007280:	494c      	ldr	r1, [pc, #304]	; (80073b4 <_dtoa_r+0x65c>)
 8007282:	2000      	movs	r0, #0
 8007284:	f7f9 fb02 	bl	800088c <__aeabi_ddiv>
 8007288:	ec53 2b18 	vmov	r2, r3, d8
 800728c:	f7f9 f81c 	bl	80002c8 <__aeabi_dsub>
 8007290:	9d00      	ldr	r5, [sp, #0]
 8007292:	ec41 0b18 	vmov	d8, r0, r1
 8007296:	4639      	mov	r1, r7
 8007298:	4630      	mov	r0, r6
 800729a:	f7f9 fc7d 	bl	8000b98 <__aeabi_d2iz>
 800729e:	900c      	str	r0, [sp, #48]	; 0x30
 80072a0:	f7f9 f960 	bl	8000564 <__aeabi_i2d>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 f80c 	bl	80002c8 <__aeabi_dsub>
 80072b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072b2:	3330      	adds	r3, #48	; 0x30
 80072b4:	f805 3b01 	strb.w	r3, [r5], #1
 80072b8:	ec53 2b18 	vmov	r2, r3, d8
 80072bc:	4606      	mov	r6, r0
 80072be:	460f      	mov	r7, r1
 80072c0:	f7f9 fc2c 	bl	8000b1c <__aeabi_dcmplt>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d165      	bne.n	8007394 <_dtoa_r+0x63c>
 80072c8:	4632      	mov	r2, r6
 80072ca:	463b      	mov	r3, r7
 80072cc:	4935      	ldr	r1, [pc, #212]	; (80073a4 <_dtoa_r+0x64c>)
 80072ce:	2000      	movs	r0, #0
 80072d0:	f7f8 fffa 	bl	80002c8 <__aeabi_dsub>
 80072d4:	ec53 2b18 	vmov	r2, r3, d8
 80072d8:	f7f9 fc20 	bl	8000b1c <__aeabi_dcmplt>
 80072dc:	2800      	cmp	r0, #0
 80072de:	f040 80b9 	bne.w	8007454 <_dtoa_r+0x6fc>
 80072e2:	9b02      	ldr	r3, [sp, #8]
 80072e4:	429d      	cmp	r5, r3
 80072e6:	f43f af75 	beq.w	80071d4 <_dtoa_r+0x47c>
 80072ea:	4b2f      	ldr	r3, [pc, #188]	; (80073a8 <_dtoa_r+0x650>)
 80072ec:	ec51 0b18 	vmov	r0, r1, d8
 80072f0:	2200      	movs	r2, #0
 80072f2:	f7f9 f9a1 	bl	8000638 <__aeabi_dmul>
 80072f6:	4b2c      	ldr	r3, [pc, #176]	; (80073a8 <_dtoa_r+0x650>)
 80072f8:	ec41 0b18 	vmov	d8, r0, r1
 80072fc:	2200      	movs	r2, #0
 80072fe:	4630      	mov	r0, r6
 8007300:	4639      	mov	r1, r7
 8007302:	f7f9 f999 	bl	8000638 <__aeabi_dmul>
 8007306:	4606      	mov	r6, r0
 8007308:	460f      	mov	r7, r1
 800730a:	e7c4      	b.n	8007296 <_dtoa_r+0x53e>
 800730c:	ec51 0b17 	vmov	r0, r1, d7
 8007310:	f7f9 f992 	bl	8000638 <__aeabi_dmul>
 8007314:	9b02      	ldr	r3, [sp, #8]
 8007316:	9d00      	ldr	r5, [sp, #0]
 8007318:	930c      	str	r3, [sp, #48]	; 0x30
 800731a:	ec41 0b18 	vmov	d8, r0, r1
 800731e:	4639      	mov	r1, r7
 8007320:	4630      	mov	r0, r6
 8007322:	f7f9 fc39 	bl	8000b98 <__aeabi_d2iz>
 8007326:	9011      	str	r0, [sp, #68]	; 0x44
 8007328:	f7f9 f91c 	bl	8000564 <__aeabi_i2d>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f8 ffc8 	bl	80002c8 <__aeabi_dsub>
 8007338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800733a:	3330      	adds	r3, #48	; 0x30
 800733c:	f805 3b01 	strb.w	r3, [r5], #1
 8007340:	9b02      	ldr	r3, [sp, #8]
 8007342:	429d      	cmp	r5, r3
 8007344:	4606      	mov	r6, r0
 8007346:	460f      	mov	r7, r1
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	d134      	bne.n	80073b8 <_dtoa_r+0x660>
 800734e:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <_dtoa_r+0x65c>)
 8007350:	ec51 0b18 	vmov	r0, r1, d8
 8007354:	f7f8 ffba 	bl	80002cc <__adddf3>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4630      	mov	r0, r6
 800735e:	4639      	mov	r1, r7
 8007360:	f7f9 fbfa 	bl	8000b58 <__aeabi_dcmpgt>
 8007364:	2800      	cmp	r0, #0
 8007366:	d175      	bne.n	8007454 <_dtoa_r+0x6fc>
 8007368:	ec53 2b18 	vmov	r2, r3, d8
 800736c:	4911      	ldr	r1, [pc, #68]	; (80073b4 <_dtoa_r+0x65c>)
 800736e:	2000      	movs	r0, #0
 8007370:	f7f8 ffaa 	bl	80002c8 <__aeabi_dsub>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fbce 	bl	8000b1c <__aeabi_dcmplt>
 8007380:	2800      	cmp	r0, #0
 8007382:	f43f af27 	beq.w	80071d4 <_dtoa_r+0x47c>
 8007386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007388:	1e6b      	subs	r3, r5, #1
 800738a:	930c      	str	r3, [sp, #48]	; 0x30
 800738c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007390:	2b30      	cmp	r3, #48	; 0x30
 8007392:	d0f8      	beq.n	8007386 <_dtoa_r+0x62e>
 8007394:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007398:	e04a      	b.n	8007430 <_dtoa_r+0x6d8>
 800739a:	bf00      	nop
 800739c:	08009d58 	.word	0x08009d58
 80073a0:	08009d30 	.word	0x08009d30
 80073a4:	3ff00000 	.word	0x3ff00000
 80073a8:	40240000 	.word	0x40240000
 80073ac:	401c0000 	.word	0x401c0000
 80073b0:	40140000 	.word	0x40140000
 80073b4:	3fe00000 	.word	0x3fe00000
 80073b8:	4baf      	ldr	r3, [pc, #700]	; (8007678 <_dtoa_r+0x920>)
 80073ba:	f7f9 f93d 	bl	8000638 <__aeabi_dmul>
 80073be:	4606      	mov	r6, r0
 80073c0:	460f      	mov	r7, r1
 80073c2:	e7ac      	b.n	800731e <_dtoa_r+0x5c6>
 80073c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073c8:	9d00      	ldr	r5, [sp, #0]
 80073ca:	4642      	mov	r2, r8
 80073cc:	464b      	mov	r3, r9
 80073ce:	4630      	mov	r0, r6
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f9 fa5b 	bl	800088c <__aeabi_ddiv>
 80073d6:	f7f9 fbdf 	bl	8000b98 <__aeabi_d2iz>
 80073da:	9002      	str	r0, [sp, #8]
 80073dc:	f7f9 f8c2 	bl	8000564 <__aeabi_i2d>
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	f7f9 f928 	bl	8000638 <__aeabi_dmul>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4630      	mov	r0, r6
 80073ee:	4639      	mov	r1, r7
 80073f0:	f7f8 ff6a 	bl	80002c8 <__aeabi_dsub>
 80073f4:	9e02      	ldr	r6, [sp, #8]
 80073f6:	9f01      	ldr	r7, [sp, #4]
 80073f8:	3630      	adds	r6, #48	; 0x30
 80073fa:	f805 6b01 	strb.w	r6, [r5], #1
 80073fe:	9e00      	ldr	r6, [sp, #0]
 8007400:	1bae      	subs	r6, r5, r6
 8007402:	42b7      	cmp	r7, r6
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	d137      	bne.n	800747a <_dtoa_r+0x722>
 800740a:	f7f8 ff5f 	bl	80002cc <__adddf3>
 800740e:	4642      	mov	r2, r8
 8007410:	464b      	mov	r3, r9
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	f7f9 fb9f 	bl	8000b58 <__aeabi_dcmpgt>
 800741a:	b9c8      	cbnz	r0, 8007450 <_dtoa_r+0x6f8>
 800741c:	4642      	mov	r2, r8
 800741e:	464b      	mov	r3, r9
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f9 fb70 	bl	8000b08 <__aeabi_dcmpeq>
 8007428:	b110      	cbz	r0, 8007430 <_dtoa_r+0x6d8>
 800742a:	9b02      	ldr	r3, [sp, #8]
 800742c:	07d9      	lsls	r1, r3, #31
 800742e:	d40f      	bmi.n	8007450 <_dtoa_r+0x6f8>
 8007430:	4620      	mov	r0, r4
 8007432:	4659      	mov	r1, fp
 8007434:	f000 fe58 	bl	80080e8 <_Bfree>
 8007438:	2300      	movs	r3, #0
 800743a:	702b      	strb	r3, [r5, #0]
 800743c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800743e:	f10a 0001 	add.w	r0, sl, #1
 8007442:	6018      	str	r0, [r3, #0]
 8007444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007446:	2b00      	cmp	r3, #0
 8007448:	f43f acd8 	beq.w	8006dfc <_dtoa_r+0xa4>
 800744c:	601d      	str	r5, [r3, #0]
 800744e:	e4d5      	b.n	8006dfc <_dtoa_r+0xa4>
 8007450:	f8cd a01c 	str.w	sl, [sp, #28]
 8007454:	462b      	mov	r3, r5
 8007456:	461d      	mov	r5, r3
 8007458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800745c:	2a39      	cmp	r2, #57	; 0x39
 800745e:	d108      	bne.n	8007472 <_dtoa_r+0x71a>
 8007460:	9a00      	ldr	r2, [sp, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d1f7      	bne.n	8007456 <_dtoa_r+0x6fe>
 8007466:	9a07      	ldr	r2, [sp, #28]
 8007468:	9900      	ldr	r1, [sp, #0]
 800746a:	3201      	adds	r2, #1
 800746c:	9207      	str	r2, [sp, #28]
 800746e:	2230      	movs	r2, #48	; 0x30
 8007470:	700a      	strb	r2, [r1, #0]
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	3201      	adds	r2, #1
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e78c      	b.n	8007394 <_dtoa_r+0x63c>
 800747a:	4b7f      	ldr	r3, [pc, #508]	; (8007678 <_dtoa_r+0x920>)
 800747c:	2200      	movs	r2, #0
 800747e:	f7f9 f8db 	bl	8000638 <__aeabi_dmul>
 8007482:	2200      	movs	r2, #0
 8007484:	2300      	movs	r3, #0
 8007486:	4606      	mov	r6, r0
 8007488:	460f      	mov	r7, r1
 800748a:	f7f9 fb3d 	bl	8000b08 <__aeabi_dcmpeq>
 800748e:	2800      	cmp	r0, #0
 8007490:	d09b      	beq.n	80073ca <_dtoa_r+0x672>
 8007492:	e7cd      	b.n	8007430 <_dtoa_r+0x6d8>
 8007494:	9a08      	ldr	r2, [sp, #32]
 8007496:	2a00      	cmp	r2, #0
 8007498:	f000 80c4 	beq.w	8007624 <_dtoa_r+0x8cc>
 800749c:	9a05      	ldr	r2, [sp, #20]
 800749e:	2a01      	cmp	r2, #1
 80074a0:	f300 80a8 	bgt.w	80075f4 <_dtoa_r+0x89c>
 80074a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	f000 80a0 	beq.w	80075ec <_dtoa_r+0x894>
 80074ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074b0:	9e06      	ldr	r6, [sp, #24]
 80074b2:	4645      	mov	r5, r8
 80074b4:	9a04      	ldr	r2, [sp, #16]
 80074b6:	2101      	movs	r1, #1
 80074b8:	441a      	add	r2, r3
 80074ba:	4620      	mov	r0, r4
 80074bc:	4498      	add	r8, r3
 80074be:	9204      	str	r2, [sp, #16]
 80074c0:	f000 ff18 	bl	80082f4 <__i2b>
 80074c4:	4607      	mov	r7, r0
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	dd0b      	ble.n	80074e2 <_dtoa_r+0x78a>
 80074ca:	9b04      	ldr	r3, [sp, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd08      	ble.n	80074e2 <_dtoa_r+0x78a>
 80074d0:	42ab      	cmp	r3, r5
 80074d2:	9a04      	ldr	r2, [sp, #16]
 80074d4:	bfa8      	it	ge
 80074d6:	462b      	movge	r3, r5
 80074d8:	eba8 0803 	sub.w	r8, r8, r3
 80074dc:	1aed      	subs	r5, r5, r3
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	9b06      	ldr	r3, [sp, #24]
 80074e4:	b1fb      	cbz	r3, 8007526 <_dtoa_r+0x7ce>
 80074e6:	9b08      	ldr	r3, [sp, #32]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 809f 	beq.w	800762c <_dtoa_r+0x8d4>
 80074ee:	2e00      	cmp	r6, #0
 80074f0:	dd11      	ble.n	8007516 <_dtoa_r+0x7be>
 80074f2:	4639      	mov	r1, r7
 80074f4:	4632      	mov	r2, r6
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 ffb8 	bl	800846c <__pow5mult>
 80074fc:	465a      	mov	r2, fp
 80074fe:	4601      	mov	r1, r0
 8007500:	4607      	mov	r7, r0
 8007502:	4620      	mov	r0, r4
 8007504:	f000 ff0c 	bl	8008320 <__multiply>
 8007508:	4659      	mov	r1, fp
 800750a:	9007      	str	r0, [sp, #28]
 800750c:	4620      	mov	r0, r4
 800750e:	f000 fdeb 	bl	80080e8 <_Bfree>
 8007512:	9b07      	ldr	r3, [sp, #28]
 8007514:	469b      	mov	fp, r3
 8007516:	9b06      	ldr	r3, [sp, #24]
 8007518:	1b9a      	subs	r2, r3, r6
 800751a:	d004      	beq.n	8007526 <_dtoa_r+0x7ce>
 800751c:	4659      	mov	r1, fp
 800751e:	4620      	mov	r0, r4
 8007520:	f000 ffa4 	bl	800846c <__pow5mult>
 8007524:	4683      	mov	fp, r0
 8007526:	2101      	movs	r1, #1
 8007528:	4620      	mov	r0, r4
 800752a:	f000 fee3 	bl	80082f4 <__i2b>
 800752e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007530:	2b00      	cmp	r3, #0
 8007532:	4606      	mov	r6, r0
 8007534:	dd7c      	ble.n	8007630 <_dtoa_r+0x8d8>
 8007536:	461a      	mov	r2, r3
 8007538:	4601      	mov	r1, r0
 800753a:	4620      	mov	r0, r4
 800753c:	f000 ff96 	bl	800846c <__pow5mult>
 8007540:	9b05      	ldr	r3, [sp, #20]
 8007542:	2b01      	cmp	r3, #1
 8007544:	4606      	mov	r6, r0
 8007546:	dd76      	ble.n	8007636 <_dtoa_r+0x8de>
 8007548:	2300      	movs	r3, #0
 800754a:	9306      	str	r3, [sp, #24]
 800754c:	6933      	ldr	r3, [r6, #16]
 800754e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007552:	6918      	ldr	r0, [r3, #16]
 8007554:	f000 fe7e 	bl	8008254 <__hi0bits>
 8007558:	f1c0 0020 	rsb	r0, r0, #32
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	4418      	add	r0, r3
 8007560:	f010 001f 	ands.w	r0, r0, #31
 8007564:	f000 8086 	beq.w	8007674 <_dtoa_r+0x91c>
 8007568:	f1c0 0320 	rsb	r3, r0, #32
 800756c:	2b04      	cmp	r3, #4
 800756e:	dd7f      	ble.n	8007670 <_dtoa_r+0x918>
 8007570:	f1c0 001c 	rsb	r0, r0, #28
 8007574:	9b04      	ldr	r3, [sp, #16]
 8007576:	4403      	add	r3, r0
 8007578:	4480      	add	r8, r0
 800757a:	4405      	add	r5, r0
 800757c:	9304      	str	r3, [sp, #16]
 800757e:	f1b8 0f00 	cmp.w	r8, #0
 8007582:	dd05      	ble.n	8007590 <_dtoa_r+0x838>
 8007584:	4659      	mov	r1, fp
 8007586:	4642      	mov	r2, r8
 8007588:	4620      	mov	r0, r4
 800758a:	f000 ffc9 	bl	8008520 <__lshift>
 800758e:	4683      	mov	fp, r0
 8007590:	9b04      	ldr	r3, [sp, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	dd05      	ble.n	80075a2 <_dtoa_r+0x84a>
 8007596:	4631      	mov	r1, r6
 8007598:	461a      	mov	r2, r3
 800759a:	4620      	mov	r0, r4
 800759c:	f000 ffc0 	bl	8008520 <__lshift>
 80075a0:	4606      	mov	r6, r0
 80075a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d069      	beq.n	800767c <_dtoa_r+0x924>
 80075a8:	4631      	mov	r1, r6
 80075aa:	4658      	mov	r0, fp
 80075ac:	f001 f824 	bl	80085f8 <__mcmp>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	da63      	bge.n	800767c <_dtoa_r+0x924>
 80075b4:	2300      	movs	r3, #0
 80075b6:	4659      	mov	r1, fp
 80075b8:	220a      	movs	r2, #10
 80075ba:	4620      	mov	r0, r4
 80075bc:	f000 fdb6 	bl	800812c <__multadd>
 80075c0:	9b08      	ldr	r3, [sp, #32]
 80075c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075c6:	4683      	mov	fp, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 818f 	beq.w	80078ec <_dtoa_r+0xb94>
 80075ce:	4639      	mov	r1, r7
 80075d0:	2300      	movs	r3, #0
 80075d2:	220a      	movs	r2, #10
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fda9 	bl	800812c <__multadd>
 80075da:	f1b9 0f00 	cmp.w	r9, #0
 80075de:	4607      	mov	r7, r0
 80075e0:	f300 808e 	bgt.w	8007700 <_dtoa_r+0x9a8>
 80075e4:	9b05      	ldr	r3, [sp, #20]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	dc50      	bgt.n	800768c <_dtoa_r+0x934>
 80075ea:	e089      	b.n	8007700 <_dtoa_r+0x9a8>
 80075ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075f2:	e75d      	b.n	80074b0 <_dtoa_r+0x758>
 80075f4:	9b01      	ldr	r3, [sp, #4]
 80075f6:	1e5e      	subs	r6, r3, #1
 80075f8:	9b06      	ldr	r3, [sp, #24]
 80075fa:	42b3      	cmp	r3, r6
 80075fc:	bfbf      	itttt	lt
 80075fe:	9b06      	ldrlt	r3, [sp, #24]
 8007600:	9606      	strlt	r6, [sp, #24]
 8007602:	1af2      	sublt	r2, r6, r3
 8007604:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007606:	bfb6      	itet	lt
 8007608:	189b      	addlt	r3, r3, r2
 800760a:	1b9e      	subge	r6, r3, r6
 800760c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	bfb8      	it	lt
 8007612:	2600      	movlt	r6, #0
 8007614:	2b00      	cmp	r3, #0
 8007616:	bfb5      	itete	lt
 8007618:	eba8 0503 	sublt.w	r5, r8, r3
 800761c:	9b01      	ldrge	r3, [sp, #4]
 800761e:	2300      	movlt	r3, #0
 8007620:	4645      	movge	r5, r8
 8007622:	e747      	b.n	80074b4 <_dtoa_r+0x75c>
 8007624:	9e06      	ldr	r6, [sp, #24]
 8007626:	9f08      	ldr	r7, [sp, #32]
 8007628:	4645      	mov	r5, r8
 800762a:	e74c      	b.n	80074c6 <_dtoa_r+0x76e>
 800762c:	9a06      	ldr	r2, [sp, #24]
 800762e:	e775      	b.n	800751c <_dtoa_r+0x7c4>
 8007630:	9b05      	ldr	r3, [sp, #20]
 8007632:	2b01      	cmp	r3, #1
 8007634:	dc18      	bgt.n	8007668 <_dtoa_r+0x910>
 8007636:	9b02      	ldr	r3, [sp, #8]
 8007638:	b9b3      	cbnz	r3, 8007668 <_dtoa_r+0x910>
 800763a:	9b03      	ldr	r3, [sp, #12]
 800763c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007640:	b9a3      	cbnz	r3, 800766c <_dtoa_r+0x914>
 8007642:	9b03      	ldr	r3, [sp, #12]
 8007644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007648:	0d1b      	lsrs	r3, r3, #20
 800764a:	051b      	lsls	r3, r3, #20
 800764c:	b12b      	cbz	r3, 800765a <_dtoa_r+0x902>
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	3301      	adds	r3, #1
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	f108 0801 	add.w	r8, r8, #1
 8007658:	2301      	movs	r3, #1
 800765a:	9306      	str	r3, [sp, #24]
 800765c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800765e:	2b00      	cmp	r3, #0
 8007660:	f47f af74 	bne.w	800754c <_dtoa_r+0x7f4>
 8007664:	2001      	movs	r0, #1
 8007666:	e779      	b.n	800755c <_dtoa_r+0x804>
 8007668:	2300      	movs	r3, #0
 800766a:	e7f6      	b.n	800765a <_dtoa_r+0x902>
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	e7f4      	b.n	800765a <_dtoa_r+0x902>
 8007670:	d085      	beq.n	800757e <_dtoa_r+0x826>
 8007672:	4618      	mov	r0, r3
 8007674:	301c      	adds	r0, #28
 8007676:	e77d      	b.n	8007574 <_dtoa_r+0x81c>
 8007678:	40240000 	.word	0x40240000
 800767c:	9b01      	ldr	r3, [sp, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	dc38      	bgt.n	80076f4 <_dtoa_r+0x99c>
 8007682:	9b05      	ldr	r3, [sp, #20]
 8007684:	2b02      	cmp	r3, #2
 8007686:	dd35      	ble.n	80076f4 <_dtoa_r+0x99c>
 8007688:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800768c:	f1b9 0f00 	cmp.w	r9, #0
 8007690:	d10d      	bne.n	80076ae <_dtoa_r+0x956>
 8007692:	4631      	mov	r1, r6
 8007694:	464b      	mov	r3, r9
 8007696:	2205      	movs	r2, #5
 8007698:	4620      	mov	r0, r4
 800769a:	f000 fd47 	bl	800812c <__multadd>
 800769e:	4601      	mov	r1, r0
 80076a0:	4606      	mov	r6, r0
 80076a2:	4658      	mov	r0, fp
 80076a4:	f000 ffa8 	bl	80085f8 <__mcmp>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f73f adbd 	bgt.w	8007228 <_dtoa_r+0x4d0>
 80076ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b0:	9d00      	ldr	r5, [sp, #0]
 80076b2:	ea6f 0a03 	mvn.w	sl, r3
 80076b6:	f04f 0800 	mov.w	r8, #0
 80076ba:	4631      	mov	r1, r6
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 fd13 	bl	80080e8 <_Bfree>
 80076c2:	2f00      	cmp	r7, #0
 80076c4:	f43f aeb4 	beq.w	8007430 <_dtoa_r+0x6d8>
 80076c8:	f1b8 0f00 	cmp.w	r8, #0
 80076cc:	d005      	beq.n	80076da <_dtoa_r+0x982>
 80076ce:	45b8      	cmp	r8, r7
 80076d0:	d003      	beq.n	80076da <_dtoa_r+0x982>
 80076d2:	4641      	mov	r1, r8
 80076d4:	4620      	mov	r0, r4
 80076d6:	f000 fd07 	bl	80080e8 <_Bfree>
 80076da:	4639      	mov	r1, r7
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fd03 	bl	80080e8 <_Bfree>
 80076e2:	e6a5      	b.n	8007430 <_dtoa_r+0x6d8>
 80076e4:	2600      	movs	r6, #0
 80076e6:	4637      	mov	r7, r6
 80076e8:	e7e1      	b.n	80076ae <_dtoa_r+0x956>
 80076ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80076ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80076f0:	4637      	mov	r7, r6
 80076f2:	e599      	b.n	8007228 <_dtoa_r+0x4d0>
 80076f4:	9b08      	ldr	r3, [sp, #32]
 80076f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 80fd 	beq.w	80078fa <_dtoa_r+0xba2>
 8007700:	2d00      	cmp	r5, #0
 8007702:	dd05      	ble.n	8007710 <_dtoa_r+0x9b8>
 8007704:	4639      	mov	r1, r7
 8007706:	462a      	mov	r2, r5
 8007708:	4620      	mov	r0, r4
 800770a:	f000 ff09 	bl	8008520 <__lshift>
 800770e:	4607      	mov	r7, r0
 8007710:	9b06      	ldr	r3, [sp, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d05c      	beq.n	80077d0 <_dtoa_r+0xa78>
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fca5 	bl	8008068 <_Balloc>
 800771e:	4605      	mov	r5, r0
 8007720:	b928      	cbnz	r0, 800772e <_dtoa_r+0x9d6>
 8007722:	4b80      	ldr	r3, [pc, #512]	; (8007924 <_dtoa_r+0xbcc>)
 8007724:	4602      	mov	r2, r0
 8007726:	f240 21ea 	movw	r1, #746	; 0x2ea
 800772a:	f7ff bb2e 	b.w	8006d8a <_dtoa_r+0x32>
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	3202      	adds	r2, #2
 8007732:	0092      	lsls	r2, r2, #2
 8007734:	f107 010c 	add.w	r1, r7, #12
 8007738:	300c      	adds	r0, #12
 800773a:	f000 fc87 	bl	800804c <memcpy>
 800773e:	2201      	movs	r2, #1
 8007740:	4629      	mov	r1, r5
 8007742:	4620      	mov	r0, r4
 8007744:	f000 feec 	bl	8008520 <__lshift>
 8007748:	9b00      	ldr	r3, [sp, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	9b00      	ldr	r3, [sp, #0]
 8007750:	444b      	add	r3, r9
 8007752:	9307      	str	r3, [sp, #28]
 8007754:	9b02      	ldr	r3, [sp, #8]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	46b8      	mov	r8, r7
 800775c:	9306      	str	r3, [sp, #24]
 800775e:	4607      	mov	r7, r0
 8007760:	9b01      	ldr	r3, [sp, #4]
 8007762:	4631      	mov	r1, r6
 8007764:	3b01      	subs	r3, #1
 8007766:	4658      	mov	r0, fp
 8007768:	9302      	str	r3, [sp, #8]
 800776a:	f7ff fa67 	bl	8006c3c <quorem>
 800776e:	4603      	mov	r3, r0
 8007770:	3330      	adds	r3, #48	; 0x30
 8007772:	9004      	str	r0, [sp, #16]
 8007774:	4641      	mov	r1, r8
 8007776:	4658      	mov	r0, fp
 8007778:	9308      	str	r3, [sp, #32]
 800777a:	f000 ff3d 	bl	80085f8 <__mcmp>
 800777e:	463a      	mov	r2, r7
 8007780:	4681      	mov	r9, r0
 8007782:	4631      	mov	r1, r6
 8007784:	4620      	mov	r0, r4
 8007786:	f000 ff53 	bl	8008630 <__mdiff>
 800778a:	68c2      	ldr	r2, [r0, #12]
 800778c:	9b08      	ldr	r3, [sp, #32]
 800778e:	4605      	mov	r5, r0
 8007790:	bb02      	cbnz	r2, 80077d4 <_dtoa_r+0xa7c>
 8007792:	4601      	mov	r1, r0
 8007794:	4658      	mov	r0, fp
 8007796:	f000 ff2f 	bl	80085f8 <__mcmp>
 800779a:	9b08      	ldr	r3, [sp, #32]
 800779c:	4602      	mov	r2, r0
 800779e:	4629      	mov	r1, r5
 80077a0:	4620      	mov	r0, r4
 80077a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80077a6:	f000 fc9f 	bl	80080e8 <_Bfree>
 80077aa:	9b05      	ldr	r3, [sp, #20]
 80077ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ae:	9d01      	ldr	r5, [sp, #4]
 80077b0:	ea43 0102 	orr.w	r1, r3, r2
 80077b4:	9b06      	ldr	r3, [sp, #24]
 80077b6:	430b      	orrs	r3, r1
 80077b8:	9b08      	ldr	r3, [sp, #32]
 80077ba:	d10d      	bne.n	80077d8 <_dtoa_r+0xa80>
 80077bc:	2b39      	cmp	r3, #57	; 0x39
 80077be:	d029      	beq.n	8007814 <_dtoa_r+0xabc>
 80077c0:	f1b9 0f00 	cmp.w	r9, #0
 80077c4:	dd01      	ble.n	80077ca <_dtoa_r+0xa72>
 80077c6:	9b04      	ldr	r3, [sp, #16]
 80077c8:	3331      	adds	r3, #49	; 0x31
 80077ca:	9a02      	ldr	r2, [sp, #8]
 80077cc:	7013      	strb	r3, [r2, #0]
 80077ce:	e774      	b.n	80076ba <_dtoa_r+0x962>
 80077d0:	4638      	mov	r0, r7
 80077d2:	e7b9      	b.n	8007748 <_dtoa_r+0x9f0>
 80077d4:	2201      	movs	r2, #1
 80077d6:	e7e2      	b.n	800779e <_dtoa_r+0xa46>
 80077d8:	f1b9 0f00 	cmp.w	r9, #0
 80077dc:	db06      	blt.n	80077ec <_dtoa_r+0xa94>
 80077de:	9905      	ldr	r1, [sp, #20]
 80077e0:	ea41 0909 	orr.w	r9, r1, r9
 80077e4:	9906      	ldr	r1, [sp, #24]
 80077e6:	ea59 0101 	orrs.w	r1, r9, r1
 80077ea:	d120      	bne.n	800782e <_dtoa_r+0xad6>
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	ddec      	ble.n	80077ca <_dtoa_r+0xa72>
 80077f0:	4659      	mov	r1, fp
 80077f2:	2201      	movs	r2, #1
 80077f4:	4620      	mov	r0, r4
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	f000 fe92 	bl	8008520 <__lshift>
 80077fc:	4631      	mov	r1, r6
 80077fe:	4683      	mov	fp, r0
 8007800:	f000 fefa 	bl	80085f8 <__mcmp>
 8007804:	2800      	cmp	r0, #0
 8007806:	9b01      	ldr	r3, [sp, #4]
 8007808:	dc02      	bgt.n	8007810 <_dtoa_r+0xab8>
 800780a:	d1de      	bne.n	80077ca <_dtoa_r+0xa72>
 800780c:	07da      	lsls	r2, r3, #31
 800780e:	d5dc      	bpl.n	80077ca <_dtoa_r+0xa72>
 8007810:	2b39      	cmp	r3, #57	; 0x39
 8007812:	d1d8      	bne.n	80077c6 <_dtoa_r+0xa6e>
 8007814:	9a02      	ldr	r2, [sp, #8]
 8007816:	2339      	movs	r3, #57	; 0x39
 8007818:	7013      	strb	r3, [r2, #0]
 800781a:	462b      	mov	r3, r5
 800781c:	461d      	mov	r5, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007824:	2a39      	cmp	r2, #57	; 0x39
 8007826:	d050      	beq.n	80078ca <_dtoa_r+0xb72>
 8007828:	3201      	adds	r2, #1
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	e745      	b.n	80076ba <_dtoa_r+0x962>
 800782e:	2a00      	cmp	r2, #0
 8007830:	dd03      	ble.n	800783a <_dtoa_r+0xae2>
 8007832:	2b39      	cmp	r3, #57	; 0x39
 8007834:	d0ee      	beq.n	8007814 <_dtoa_r+0xabc>
 8007836:	3301      	adds	r3, #1
 8007838:	e7c7      	b.n	80077ca <_dtoa_r+0xa72>
 800783a:	9a01      	ldr	r2, [sp, #4]
 800783c:	9907      	ldr	r1, [sp, #28]
 800783e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007842:	428a      	cmp	r2, r1
 8007844:	d02a      	beq.n	800789c <_dtoa_r+0xb44>
 8007846:	4659      	mov	r1, fp
 8007848:	2300      	movs	r3, #0
 800784a:	220a      	movs	r2, #10
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fc6d 	bl	800812c <__multadd>
 8007852:	45b8      	cmp	r8, r7
 8007854:	4683      	mov	fp, r0
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	f04f 020a 	mov.w	r2, #10
 800785e:	4641      	mov	r1, r8
 8007860:	4620      	mov	r0, r4
 8007862:	d107      	bne.n	8007874 <_dtoa_r+0xb1c>
 8007864:	f000 fc62 	bl	800812c <__multadd>
 8007868:	4680      	mov	r8, r0
 800786a:	4607      	mov	r7, r0
 800786c:	9b01      	ldr	r3, [sp, #4]
 800786e:	3301      	adds	r3, #1
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	e775      	b.n	8007760 <_dtoa_r+0xa08>
 8007874:	f000 fc5a 	bl	800812c <__multadd>
 8007878:	4639      	mov	r1, r7
 800787a:	4680      	mov	r8, r0
 800787c:	2300      	movs	r3, #0
 800787e:	220a      	movs	r2, #10
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fc53 	bl	800812c <__multadd>
 8007886:	4607      	mov	r7, r0
 8007888:	e7f0      	b.n	800786c <_dtoa_r+0xb14>
 800788a:	f1b9 0f00 	cmp.w	r9, #0
 800788e:	9a00      	ldr	r2, [sp, #0]
 8007890:	bfcc      	ite	gt
 8007892:	464d      	movgt	r5, r9
 8007894:	2501      	movle	r5, #1
 8007896:	4415      	add	r5, r2
 8007898:	f04f 0800 	mov.w	r8, #0
 800789c:	4659      	mov	r1, fp
 800789e:	2201      	movs	r2, #1
 80078a0:	4620      	mov	r0, r4
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	f000 fe3c 	bl	8008520 <__lshift>
 80078a8:	4631      	mov	r1, r6
 80078aa:	4683      	mov	fp, r0
 80078ac:	f000 fea4 	bl	80085f8 <__mcmp>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	dcb2      	bgt.n	800781a <_dtoa_r+0xac2>
 80078b4:	d102      	bne.n	80078bc <_dtoa_r+0xb64>
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	07db      	lsls	r3, r3, #31
 80078ba:	d4ae      	bmi.n	800781a <_dtoa_r+0xac2>
 80078bc:	462b      	mov	r3, r5
 80078be:	461d      	mov	r5, r3
 80078c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078c4:	2a30      	cmp	r2, #48	; 0x30
 80078c6:	d0fa      	beq.n	80078be <_dtoa_r+0xb66>
 80078c8:	e6f7      	b.n	80076ba <_dtoa_r+0x962>
 80078ca:	9a00      	ldr	r2, [sp, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d1a5      	bne.n	800781c <_dtoa_r+0xac4>
 80078d0:	f10a 0a01 	add.w	sl, sl, #1
 80078d4:	2331      	movs	r3, #49	; 0x31
 80078d6:	e779      	b.n	80077cc <_dtoa_r+0xa74>
 80078d8:	4b13      	ldr	r3, [pc, #76]	; (8007928 <_dtoa_r+0xbd0>)
 80078da:	f7ff baaf 	b.w	8006e3c <_dtoa_r+0xe4>
 80078de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f47f aa86 	bne.w	8006df2 <_dtoa_r+0x9a>
 80078e6:	4b11      	ldr	r3, [pc, #68]	; (800792c <_dtoa_r+0xbd4>)
 80078e8:	f7ff baa8 	b.w	8006e3c <_dtoa_r+0xe4>
 80078ec:	f1b9 0f00 	cmp.w	r9, #0
 80078f0:	dc03      	bgt.n	80078fa <_dtoa_r+0xba2>
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	f73f aec9 	bgt.w	800768c <_dtoa_r+0x934>
 80078fa:	9d00      	ldr	r5, [sp, #0]
 80078fc:	4631      	mov	r1, r6
 80078fe:	4658      	mov	r0, fp
 8007900:	f7ff f99c 	bl	8006c3c <quorem>
 8007904:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007908:	f805 3b01 	strb.w	r3, [r5], #1
 800790c:	9a00      	ldr	r2, [sp, #0]
 800790e:	1aaa      	subs	r2, r5, r2
 8007910:	4591      	cmp	r9, r2
 8007912:	ddba      	ble.n	800788a <_dtoa_r+0xb32>
 8007914:	4659      	mov	r1, fp
 8007916:	2300      	movs	r3, #0
 8007918:	220a      	movs	r2, #10
 800791a:	4620      	mov	r0, r4
 800791c:	f000 fc06 	bl	800812c <__multadd>
 8007920:	4683      	mov	fp, r0
 8007922:	e7eb      	b.n	80078fc <_dtoa_r+0xba4>
 8007924:	08009c3c 	.word	0x08009c3c
 8007928:	08009a3c 	.word	0x08009a3c
 800792c:	08009bb9 	.word	0x08009bb9

08007930 <rshift>:
 8007930:	6903      	ldr	r3, [r0, #16]
 8007932:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800793a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800793e:	f100 0414 	add.w	r4, r0, #20
 8007942:	dd45      	ble.n	80079d0 <rshift+0xa0>
 8007944:	f011 011f 	ands.w	r1, r1, #31
 8007948:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800794c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007950:	d10c      	bne.n	800796c <rshift+0x3c>
 8007952:	f100 0710 	add.w	r7, r0, #16
 8007956:	4629      	mov	r1, r5
 8007958:	42b1      	cmp	r1, r6
 800795a:	d334      	bcc.n	80079c6 <rshift+0x96>
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	1eea      	subs	r2, r5, #3
 8007962:	4296      	cmp	r6, r2
 8007964:	bf38      	it	cc
 8007966:	2300      	movcc	r3, #0
 8007968:	4423      	add	r3, r4
 800796a:	e015      	b.n	8007998 <rshift+0x68>
 800796c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007970:	f1c1 0820 	rsb	r8, r1, #32
 8007974:	40cf      	lsrs	r7, r1
 8007976:	f105 0e04 	add.w	lr, r5, #4
 800797a:	46a1      	mov	r9, r4
 800797c:	4576      	cmp	r6, lr
 800797e:	46f4      	mov	ip, lr
 8007980:	d815      	bhi.n	80079ae <rshift+0x7e>
 8007982:	1a9b      	subs	r3, r3, r2
 8007984:	009a      	lsls	r2, r3, #2
 8007986:	3a04      	subs	r2, #4
 8007988:	3501      	adds	r5, #1
 800798a:	42ae      	cmp	r6, r5
 800798c:	bf38      	it	cc
 800798e:	2200      	movcc	r2, #0
 8007990:	18a3      	adds	r3, r4, r2
 8007992:	50a7      	str	r7, [r4, r2]
 8007994:	b107      	cbz	r7, 8007998 <rshift+0x68>
 8007996:	3304      	adds	r3, #4
 8007998:	1b1a      	subs	r2, r3, r4
 800799a:	42a3      	cmp	r3, r4
 800799c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80079a0:	bf08      	it	eq
 80079a2:	2300      	moveq	r3, #0
 80079a4:	6102      	str	r2, [r0, #16]
 80079a6:	bf08      	it	eq
 80079a8:	6143      	streq	r3, [r0, #20]
 80079aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079ae:	f8dc c000 	ldr.w	ip, [ip]
 80079b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80079b6:	ea4c 0707 	orr.w	r7, ip, r7
 80079ba:	f849 7b04 	str.w	r7, [r9], #4
 80079be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079c2:	40cf      	lsrs	r7, r1
 80079c4:	e7da      	b.n	800797c <rshift+0x4c>
 80079c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80079ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80079ce:	e7c3      	b.n	8007958 <rshift+0x28>
 80079d0:	4623      	mov	r3, r4
 80079d2:	e7e1      	b.n	8007998 <rshift+0x68>

080079d4 <__hexdig_fun>:
 80079d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80079d8:	2b09      	cmp	r3, #9
 80079da:	d802      	bhi.n	80079e2 <__hexdig_fun+0xe>
 80079dc:	3820      	subs	r0, #32
 80079de:	b2c0      	uxtb	r0, r0
 80079e0:	4770      	bx	lr
 80079e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d801      	bhi.n	80079ee <__hexdig_fun+0x1a>
 80079ea:	3847      	subs	r0, #71	; 0x47
 80079ec:	e7f7      	b.n	80079de <__hexdig_fun+0xa>
 80079ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d801      	bhi.n	80079fa <__hexdig_fun+0x26>
 80079f6:	3827      	subs	r0, #39	; 0x27
 80079f8:	e7f1      	b.n	80079de <__hexdig_fun+0xa>
 80079fa:	2000      	movs	r0, #0
 80079fc:	4770      	bx	lr
	...

08007a00 <__gethex>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	ed2d 8b02 	vpush	{d8}
 8007a08:	b089      	sub	sp, #36	; 0x24
 8007a0a:	ee08 0a10 	vmov	s16, r0
 8007a0e:	9304      	str	r3, [sp, #16]
 8007a10:	4bbc      	ldr	r3, [pc, #752]	; (8007d04 <__gethex+0x304>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	4618      	mov	r0, r3
 8007a18:	468b      	mov	fp, r1
 8007a1a:	4690      	mov	r8, r2
 8007a1c:	f7f8 fbf8 	bl	8000210 <strlen>
 8007a20:	9b01      	ldr	r3, [sp, #4]
 8007a22:	f8db 2000 	ldr.w	r2, [fp]
 8007a26:	4403      	add	r3, r0
 8007a28:	4682      	mov	sl, r0
 8007a2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007a2e:	9305      	str	r3, [sp, #20]
 8007a30:	1c93      	adds	r3, r2, #2
 8007a32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007a36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007a3a:	32fe      	adds	r2, #254	; 0xfe
 8007a3c:	18d1      	adds	r1, r2, r3
 8007a3e:	461f      	mov	r7, r3
 8007a40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a44:	9100      	str	r1, [sp, #0]
 8007a46:	2830      	cmp	r0, #48	; 0x30
 8007a48:	d0f8      	beq.n	8007a3c <__gethex+0x3c>
 8007a4a:	f7ff ffc3 	bl	80079d4 <__hexdig_fun>
 8007a4e:	4604      	mov	r4, r0
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d13a      	bne.n	8007aca <__gethex+0xca>
 8007a54:	9901      	ldr	r1, [sp, #4]
 8007a56:	4652      	mov	r2, sl
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f001 f9ed 	bl	8008e38 <strncmp>
 8007a5e:	4605      	mov	r5, r0
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d168      	bne.n	8007b36 <__gethex+0x136>
 8007a64:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007a68:	eb07 060a 	add.w	r6, r7, sl
 8007a6c:	f7ff ffb2 	bl	80079d4 <__hexdig_fun>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d062      	beq.n	8007b3a <__gethex+0x13a>
 8007a74:	4633      	mov	r3, r6
 8007a76:	7818      	ldrb	r0, [r3, #0]
 8007a78:	2830      	cmp	r0, #48	; 0x30
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	f103 0301 	add.w	r3, r3, #1
 8007a80:	d0f9      	beq.n	8007a76 <__gethex+0x76>
 8007a82:	f7ff ffa7 	bl	80079d4 <__hexdig_fun>
 8007a86:	2301      	movs	r3, #1
 8007a88:	fab0 f480 	clz	r4, r0
 8007a8c:	0964      	lsrs	r4, r4, #5
 8007a8e:	4635      	mov	r5, r6
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	463a      	mov	r2, r7
 8007a94:	4616      	mov	r6, r2
 8007a96:	3201      	adds	r2, #1
 8007a98:	7830      	ldrb	r0, [r6, #0]
 8007a9a:	f7ff ff9b 	bl	80079d4 <__hexdig_fun>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d1f8      	bne.n	8007a94 <__gethex+0x94>
 8007aa2:	9901      	ldr	r1, [sp, #4]
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f001 f9c6 	bl	8008e38 <strncmp>
 8007aac:	b980      	cbnz	r0, 8007ad0 <__gethex+0xd0>
 8007aae:	b94d      	cbnz	r5, 8007ac4 <__gethex+0xc4>
 8007ab0:	eb06 050a 	add.w	r5, r6, sl
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	4616      	mov	r6, r2
 8007ab8:	3201      	adds	r2, #1
 8007aba:	7830      	ldrb	r0, [r6, #0]
 8007abc:	f7ff ff8a 	bl	80079d4 <__hexdig_fun>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d1f8      	bne.n	8007ab6 <__gethex+0xb6>
 8007ac4:	1bad      	subs	r5, r5, r6
 8007ac6:	00ad      	lsls	r5, r5, #2
 8007ac8:	e004      	b.n	8007ad4 <__gethex+0xd4>
 8007aca:	2400      	movs	r4, #0
 8007acc:	4625      	mov	r5, r4
 8007ace:	e7e0      	b.n	8007a92 <__gethex+0x92>
 8007ad0:	2d00      	cmp	r5, #0
 8007ad2:	d1f7      	bne.n	8007ac4 <__gethex+0xc4>
 8007ad4:	7833      	ldrb	r3, [r6, #0]
 8007ad6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ada:	2b50      	cmp	r3, #80	; 0x50
 8007adc:	d13b      	bne.n	8007b56 <__gethex+0x156>
 8007ade:	7873      	ldrb	r3, [r6, #1]
 8007ae0:	2b2b      	cmp	r3, #43	; 0x2b
 8007ae2:	d02c      	beq.n	8007b3e <__gethex+0x13e>
 8007ae4:	2b2d      	cmp	r3, #45	; 0x2d
 8007ae6:	d02e      	beq.n	8007b46 <__gethex+0x146>
 8007ae8:	1c71      	adds	r1, r6, #1
 8007aea:	f04f 0900 	mov.w	r9, #0
 8007aee:	7808      	ldrb	r0, [r1, #0]
 8007af0:	f7ff ff70 	bl	80079d4 <__hexdig_fun>
 8007af4:	1e43      	subs	r3, r0, #1
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b18      	cmp	r3, #24
 8007afa:	d82c      	bhi.n	8007b56 <__gethex+0x156>
 8007afc:	f1a0 0210 	sub.w	r2, r0, #16
 8007b00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b04:	f7ff ff66 	bl	80079d4 <__hexdig_fun>
 8007b08:	1e43      	subs	r3, r0, #1
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b18      	cmp	r3, #24
 8007b0e:	d91d      	bls.n	8007b4c <__gethex+0x14c>
 8007b10:	f1b9 0f00 	cmp.w	r9, #0
 8007b14:	d000      	beq.n	8007b18 <__gethex+0x118>
 8007b16:	4252      	negs	r2, r2
 8007b18:	4415      	add	r5, r2
 8007b1a:	f8cb 1000 	str.w	r1, [fp]
 8007b1e:	b1e4      	cbz	r4, 8007b5a <__gethex+0x15a>
 8007b20:	9b00      	ldr	r3, [sp, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bf14      	ite	ne
 8007b26:	2700      	movne	r7, #0
 8007b28:	2706      	moveq	r7, #6
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	b009      	add	sp, #36	; 0x24
 8007b2e:	ecbd 8b02 	vpop	{d8}
 8007b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b36:	463e      	mov	r6, r7
 8007b38:	4625      	mov	r5, r4
 8007b3a:	2401      	movs	r4, #1
 8007b3c:	e7ca      	b.n	8007ad4 <__gethex+0xd4>
 8007b3e:	f04f 0900 	mov.w	r9, #0
 8007b42:	1cb1      	adds	r1, r6, #2
 8007b44:	e7d3      	b.n	8007aee <__gethex+0xee>
 8007b46:	f04f 0901 	mov.w	r9, #1
 8007b4a:	e7fa      	b.n	8007b42 <__gethex+0x142>
 8007b4c:	230a      	movs	r3, #10
 8007b4e:	fb03 0202 	mla	r2, r3, r2, r0
 8007b52:	3a10      	subs	r2, #16
 8007b54:	e7d4      	b.n	8007b00 <__gethex+0x100>
 8007b56:	4631      	mov	r1, r6
 8007b58:	e7df      	b.n	8007b1a <__gethex+0x11a>
 8007b5a:	1bf3      	subs	r3, r6, r7
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	4621      	mov	r1, r4
 8007b60:	2b07      	cmp	r3, #7
 8007b62:	dc0b      	bgt.n	8007b7c <__gethex+0x17c>
 8007b64:	ee18 0a10 	vmov	r0, s16
 8007b68:	f000 fa7e 	bl	8008068 <_Balloc>
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	b940      	cbnz	r0, 8007b82 <__gethex+0x182>
 8007b70:	4b65      	ldr	r3, [pc, #404]	; (8007d08 <__gethex+0x308>)
 8007b72:	4602      	mov	r2, r0
 8007b74:	21de      	movs	r1, #222	; 0xde
 8007b76:	4865      	ldr	r0, [pc, #404]	; (8007d0c <__gethex+0x30c>)
 8007b78:	f001 f97e 	bl	8008e78 <__assert_func>
 8007b7c:	3101      	adds	r1, #1
 8007b7e:	105b      	asrs	r3, r3, #1
 8007b80:	e7ee      	b.n	8007b60 <__gethex+0x160>
 8007b82:	f100 0914 	add.w	r9, r0, #20
 8007b86:	f04f 0b00 	mov.w	fp, #0
 8007b8a:	f1ca 0301 	rsb	r3, sl, #1
 8007b8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b92:	f8cd b000 	str.w	fp, [sp]
 8007b96:	9306      	str	r3, [sp, #24]
 8007b98:	42b7      	cmp	r7, r6
 8007b9a:	d340      	bcc.n	8007c1e <__gethex+0x21e>
 8007b9c:	9802      	ldr	r0, [sp, #8]
 8007b9e:	9b00      	ldr	r3, [sp, #0]
 8007ba0:	f840 3b04 	str.w	r3, [r0], #4
 8007ba4:	eba0 0009 	sub.w	r0, r0, r9
 8007ba8:	1080      	asrs	r0, r0, #2
 8007baa:	0146      	lsls	r6, r0, #5
 8007bac:	6120      	str	r0, [r4, #16]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fb50 	bl	8008254 <__hi0bits>
 8007bb4:	1a30      	subs	r0, r6, r0
 8007bb6:	f8d8 6000 	ldr.w	r6, [r8]
 8007bba:	42b0      	cmp	r0, r6
 8007bbc:	dd63      	ble.n	8007c86 <__gethex+0x286>
 8007bbe:	1b87      	subs	r7, r0, r6
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f000 feea 	bl	800899c <__any_on>
 8007bc8:	4682      	mov	sl, r0
 8007bca:	b1a8      	cbz	r0, 8007bf8 <__gethex+0x1f8>
 8007bcc:	1e7b      	subs	r3, r7, #1
 8007bce:	1159      	asrs	r1, r3, #5
 8007bd0:	f003 021f 	and.w	r2, r3, #31
 8007bd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007bd8:	f04f 0a01 	mov.w	sl, #1
 8007bdc:	fa0a f202 	lsl.w	r2, sl, r2
 8007be0:	420a      	tst	r2, r1
 8007be2:	d009      	beq.n	8007bf8 <__gethex+0x1f8>
 8007be4:	4553      	cmp	r3, sl
 8007be6:	dd05      	ble.n	8007bf4 <__gethex+0x1f4>
 8007be8:	1eb9      	subs	r1, r7, #2
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 fed6 	bl	800899c <__any_on>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d145      	bne.n	8007c80 <__gethex+0x280>
 8007bf4:	f04f 0a02 	mov.w	sl, #2
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f7ff fe98 	bl	8007930 <rshift>
 8007c00:	443d      	add	r5, r7
 8007c02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c06:	42ab      	cmp	r3, r5
 8007c08:	da4c      	bge.n	8007ca4 <__gethex+0x2a4>
 8007c0a:	ee18 0a10 	vmov	r0, s16
 8007c0e:	4621      	mov	r1, r4
 8007c10:	f000 fa6a 	bl	80080e8 <_Bfree>
 8007c14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c16:	2300      	movs	r3, #0
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	27a3      	movs	r7, #163	; 0xa3
 8007c1c:	e785      	b.n	8007b2a <__gethex+0x12a>
 8007c1e:	1e73      	subs	r3, r6, #1
 8007c20:	9a05      	ldr	r2, [sp, #20]
 8007c22:	9303      	str	r3, [sp, #12]
 8007c24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d019      	beq.n	8007c60 <__gethex+0x260>
 8007c2c:	f1bb 0f20 	cmp.w	fp, #32
 8007c30:	d107      	bne.n	8007c42 <__gethex+0x242>
 8007c32:	9b02      	ldr	r3, [sp, #8]
 8007c34:	9a00      	ldr	r2, [sp, #0]
 8007c36:	f843 2b04 	str.w	r2, [r3], #4
 8007c3a:	9302      	str	r3, [sp, #8]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	469b      	mov	fp, r3
 8007c42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007c46:	f7ff fec5 	bl	80079d4 <__hexdig_fun>
 8007c4a:	9b00      	ldr	r3, [sp, #0]
 8007c4c:	f000 000f 	and.w	r0, r0, #15
 8007c50:	fa00 f00b 	lsl.w	r0, r0, fp
 8007c54:	4303      	orrs	r3, r0
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	f10b 0b04 	add.w	fp, fp, #4
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	e00d      	b.n	8007c7c <__gethex+0x27c>
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	9a06      	ldr	r2, [sp, #24]
 8007c64:	4413      	add	r3, r2
 8007c66:	42bb      	cmp	r3, r7
 8007c68:	d3e0      	bcc.n	8007c2c <__gethex+0x22c>
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	9901      	ldr	r1, [sp, #4]
 8007c6e:	9307      	str	r3, [sp, #28]
 8007c70:	4652      	mov	r2, sl
 8007c72:	f001 f8e1 	bl	8008e38 <strncmp>
 8007c76:	9b07      	ldr	r3, [sp, #28]
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d1d7      	bne.n	8007c2c <__gethex+0x22c>
 8007c7c:	461e      	mov	r6, r3
 8007c7e:	e78b      	b.n	8007b98 <__gethex+0x198>
 8007c80:	f04f 0a03 	mov.w	sl, #3
 8007c84:	e7b8      	b.n	8007bf8 <__gethex+0x1f8>
 8007c86:	da0a      	bge.n	8007c9e <__gethex+0x29e>
 8007c88:	1a37      	subs	r7, r6, r0
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	ee18 0a10 	vmov	r0, s16
 8007c90:	463a      	mov	r2, r7
 8007c92:	f000 fc45 	bl	8008520 <__lshift>
 8007c96:	1bed      	subs	r5, r5, r7
 8007c98:	4604      	mov	r4, r0
 8007c9a:	f100 0914 	add.w	r9, r0, #20
 8007c9e:	f04f 0a00 	mov.w	sl, #0
 8007ca2:	e7ae      	b.n	8007c02 <__gethex+0x202>
 8007ca4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ca8:	42a8      	cmp	r0, r5
 8007caa:	dd72      	ble.n	8007d92 <__gethex+0x392>
 8007cac:	1b45      	subs	r5, r0, r5
 8007cae:	42ae      	cmp	r6, r5
 8007cb0:	dc36      	bgt.n	8007d20 <__gethex+0x320>
 8007cb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d02a      	beq.n	8007d10 <__gethex+0x310>
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d02c      	beq.n	8007d18 <__gethex+0x318>
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d115      	bne.n	8007cee <__gethex+0x2ee>
 8007cc2:	42ae      	cmp	r6, r5
 8007cc4:	d113      	bne.n	8007cee <__gethex+0x2ee>
 8007cc6:	2e01      	cmp	r6, #1
 8007cc8:	d10b      	bne.n	8007ce2 <__gethex+0x2e2>
 8007cca:	9a04      	ldr	r2, [sp, #16]
 8007ccc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	6123      	str	r3, [r4, #16]
 8007cd6:	f8c9 3000 	str.w	r3, [r9]
 8007cda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cdc:	2762      	movs	r7, #98	; 0x62
 8007cde:	601c      	str	r4, [r3, #0]
 8007ce0:	e723      	b.n	8007b2a <__gethex+0x12a>
 8007ce2:	1e71      	subs	r1, r6, #1
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f000 fe59 	bl	800899c <__any_on>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d1ed      	bne.n	8007cca <__gethex+0x2ca>
 8007cee:	ee18 0a10 	vmov	r0, s16
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	f000 f9f8 	bl	80080e8 <_Bfree>
 8007cf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	2750      	movs	r7, #80	; 0x50
 8007d00:	e713      	b.n	8007b2a <__gethex+0x12a>
 8007d02:	bf00      	nop
 8007d04:	08009cb8 	.word	0x08009cb8
 8007d08:	08009c3c 	.word	0x08009c3c
 8007d0c:	08009c4d 	.word	0x08009c4d
 8007d10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1eb      	bne.n	8007cee <__gethex+0x2ee>
 8007d16:	e7d8      	b.n	8007cca <__gethex+0x2ca>
 8007d18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1d5      	bne.n	8007cca <__gethex+0x2ca>
 8007d1e:	e7e6      	b.n	8007cee <__gethex+0x2ee>
 8007d20:	1e6f      	subs	r7, r5, #1
 8007d22:	f1ba 0f00 	cmp.w	sl, #0
 8007d26:	d131      	bne.n	8007d8c <__gethex+0x38c>
 8007d28:	b127      	cbz	r7, 8007d34 <__gethex+0x334>
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 fe35 	bl	800899c <__any_on>
 8007d32:	4682      	mov	sl, r0
 8007d34:	117b      	asrs	r3, r7, #5
 8007d36:	2101      	movs	r1, #1
 8007d38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007d3c:	f007 071f 	and.w	r7, r7, #31
 8007d40:	fa01 f707 	lsl.w	r7, r1, r7
 8007d44:	421f      	tst	r7, r3
 8007d46:	4629      	mov	r1, r5
 8007d48:	4620      	mov	r0, r4
 8007d4a:	bf18      	it	ne
 8007d4c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007d50:	1b76      	subs	r6, r6, r5
 8007d52:	f7ff fded 	bl	8007930 <rshift>
 8007d56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007d5a:	2702      	movs	r7, #2
 8007d5c:	f1ba 0f00 	cmp.w	sl, #0
 8007d60:	d048      	beq.n	8007df4 <__gethex+0x3f4>
 8007d62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d015      	beq.n	8007d96 <__gethex+0x396>
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d017      	beq.n	8007d9e <__gethex+0x39e>
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d109      	bne.n	8007d86 <__gethex+0x386>
 8007d72:	f01a 0f02 	tst.w	sl, #2
 8007d76:	d006      	beq.n	8007d86 <__gethex+0x386>
 8007d78:	f8d9 0000 	ldr.w	r0, [r9]
 8007d7c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007d80:	f01a 0f01 	tst.w	sl, #1
 8007d84:	d10e      	bne.n	8007da4 <__gethex+0x3a4>
 8007d86:	f047 0710 	orr.w	r7, r7, #16
 8007d8a:	e033      	b.n	8007df4 <__gethex+0x3f4>
 8007d8c:	f04f 0a01 	mov.w	sl, #1
 8007d90:	e7d0      	b.n	8007d34 <__gethex+0x334>
 8007d92:	2701      	movs	r7, #1
 8007d94:	e7e2      	b.n	8007d5c <__gethex+0x35c>
 8007d96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d98:	f1c3 0301 	rsb	r3, r3, #1
 8007d9c:	9315      	str	r3, [sp, #84]	; 0x54
 8007d9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0f0      	beq.n	8007d86 <__gethex+0x386>
 8007da4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007da8:	f104 0314 	add.w	r3, r4, #20
 8007dac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007db0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007db4:	f04f 0c00 	mov.w	ip, #0
 8007db8:	4618      	mov	r0, r3
 8007dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dbe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007dc2:	d01c      	beq.n	8007dfe <__gethex+0x3fe>
 8007dc4:	3201      	adds	r2, #1
 8007dc6:	6002      	str	r2, [r0, #0]
 8007dc8:	2f02      	cmp	r7, #2
 8007dca:	f104 0314 	add.w	r3, r4, #20
 8007dce:	d13f      	bne.n	8007e50 <__gethex+0x450>
 8007dd0:	f8d8 2000 	ldr.w	r2, [r8]
 8007dd4:	3a01      	subs	r2, #1
 8007dd6:	42b2      	cmp	r2, r6
 8007dd8:	d10a      	bne.n	8007df0 <__gethex+0x3f0>
 8007dda:	1171      	asrs	r1, r6, #5
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007de2:	f006 061f 	and.w	r6, r6, #31
 8007de6:	fa02 f606 	lsl.w	r6, r2, r6
 8007dea:	421e      	tst	r6, r3
 8007dec:	bf18      	it	ne
 8007dee:	4617      	movne	r7, r2
 8007df0:	f047 0720 	orr.w	r7, r7, #32
 8007df4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007df6:	601c      	str	r4, [r3, #0]
 8007df8:	9b04      	ldr	r3, [sp, #16]
 8007dfa:	601d      	str	r5, [r3, #0]
 8007dfc:	e695      	b.n	8007b2a <__gethex+0x12a>
 8007dfe:	4299      	cmp	r1, r3
 8007e00:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e04:	d8d8      	bhi.n	8007db8 <__gethex+0x3b8>
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	459b      	cmp	fp, r3
 8007e0a:	db19      	blt.n	8007e40 <__gethex+0x440>
 8007e0c:	6861      	ldr	r1, [r4, #4]
 8007e0e:	ee18 0a10 	vmov	r0, s16
 8007e12:	3101      	adds	r1, #1
 8007e14:	f000 f928 	bl	8008068 <_Balloc>
 8007e18:	4681      	mov	r9, r0
 8007e1a:	b918      	cbnz	r0, 8007e24 <__gethex+0x424>
 8007e1c:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <__gethex+0x488>)
 8007e1e:	4602      	mov	r2, r0
 8007e20:	2184      	movs	r1, #132	; 0x84
 8007e22:	e6a8      	b.n	8007b76 <__gethex+0x176>
 8007e24:	6922      	ldr	r2, [r4, #16]
 8007e26:	3202      	adds	r2, #2
 8007e28:	f104 010c 	add.w	r1, r4, #12
 8007e2c:	0092      	lsls	r2, r2, #2
 8007e2e:	300c      	adds	r0, #12
 8007e30:	f000 f90c 	bl	800804c <memcpy>
 8007e34:	4621      	mov	r1, r4
 8007e36:	ee18 0a10 	vmov	r0, s16
 8007e3a:	f000 f955 	bl	80080e8 <_Bfree>
 8007e3e:	464c      	mov	r4, r9
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e48:	6122      	str	r2, [r4, #16]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	615a      	str	r2, [r3, #20]
 8007e4e:	e7bb      	b.n	8007dc8 <__gethex+0x3c8>
 8007e50:	6922      	ldr	r2, [r4, #16]
 8007e52:	455a      	cmp	r2, fp
 8007e54:	dd0b      	ble.n	8007e6e <__gethex+0x46e>
 8007e56:	2101      	movs	r1, #1
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f7ff fd69 	bl	8007930 <rshift>
 8007e5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e62:	3501      	adds	r5, #1
 8007e64:	42ab      	cmp	r3, r5
 8007e66:	f6ff aed0 	blt.w	8007c0a <__gethex+0x20a>
 8007e6a:	2701      	movs	r7, #1
 8007e6c:	e7c0      	b.n	8007df0 <__gethex+0x3f0>
 8007e6e:	f016 061f 	ands.w	r6, r6, #31
 8007e72:	d0fa      	beq.n	8007e6a <__gethex+0x46a>
 8007e74:	449a      	add	sl, r3
 8007e76:	f1c6 0620 	rsb	r6, r6, #32
 8007e7a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007e7e:	f000 f9e9 	bl	8008254 <__hi0bits>
 8007e82:	42b0      	cmp	r0, r6
 8007e84:	dbe7      	blt.n	8007e56 <__gethex+0x456>
 8007e86:	e7f0      	b.n	8007e6a <__gethex+0x46a>
 8007e88:	08009c3c 	.word	0x08009c3c

08007e8c <L_shift>:
 8007e8c:	f1c2 0208 	rsb	r2, r2, #8
 8007e90:	0092      	lsls	r2, r2, #2
 8007e92:	b570      	push	{r4, r5, r6, lr}
 8007e94:	f1c2 0620 	rsb	r6, r2, #32
 8007e98:	6843      	ldr	r3, [r0, #4]
 8007e9a:	6804      	ldr	r4, [r0, #0]
 8007e9c:	fa03 f506 	lsl.w	r5, r3, r6
 8007ea0:	432c      	orrs	r4, r5
 8007ea2:	40d3      	lsrs	r3, r2
 8007ea4:	6004      	str	r4, [r0, #0]
 8007ea6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007eaa:	4288      	cmp	r0, r1
 8007eac:	d3f4      	bcc.n	8007e98 <L_shift+0xc>
 8007eae:	bd70      	pop	{r4, r5, r6, pc}

08007eb0 <__match>:
 8007eb0:	b530      	push	{r4, r5, lr}
 8007eb2:	6803      	ldr	r3, [r0, #0]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eba:	b914      	cbnz	r4, 8007ec2 <__match+0x12>
 8007ebc:	6003      	str	r3, [r0, #0]
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	bd30      	pop	{r4, r5, pc}
 8007ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007eca:	2d19      	cmp	r5, #25
 8007ecc:	bf98      	it	ls
 8007ece:	3220      	addls	r2, #32
 8007ed0:	42a2      	cmp	r2, r4
 8007ed2:	d0f0      	beq.n	8007eb6 <__match+0x6>
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	e7f3      	b.n	8007ec0 <__match+0x10>

08007ed8 <__hexnan>:
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	680b      	ldr	r3, [r1, #0]
 8007ede:	6801      	ldr	r1, [r0, #0]
 8007ee0:	115e      	asrs	r6, r3, #5
 8007ee2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ee6:	f013 031f 	ands.w	r3, r3, #31
 8007eea:	b087      	sub	sp, #28
 8007eec:	bf18      	it	ne
 8007eee:	3604      	addne	r6, #4
 8007ef0:	2500      	movs	r5, #0
 8007ef2:	1f37      	subs	r7, r6, #4
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	4690      	mov	r8, r2
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	f846 5c04 	str.w	r5, [r6, #-4]
 8007efe:	46b9      	mov	r9, r7
 8007f00:	463c      	mov	r4, r7
 8007f02:	9502      	str	r5, [sp, #8]
 8007f04:	46ab      	mov	fp, r5
 8007f06:	784a      	ldrb	r2, [r1, #1]
 8007f08:	1c4b      	adds	r3, r1, #1
 8007f0a:	9303      	str	r3, [sp, #12]
 8007f0c:	b342      	cbz	r2, 8007f60 <__hexnan+0x88>
 8007f0e:	4610      	mov	r0, r2
 8007f10:	9105      	str	r1, [sp, #20]
 8007f12:	9204      	str	r2, [sp, #16]
 8007f14:	f7ff fd5e 	bl	80079d4 <__hexdig_fun>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d14f      	bne.n	8007fbc <__hexnan+0xe4>
 8007f1c:	9a04      	ldr	r2, [sp, #16]
 8007f1e:	9905      	ldr	r1, [sp, #20]
 8007f20:	2a20      	cmp	r2, #32
 8007f22:	d818      	bhi.n	8007f56 <__hexnan+0x7e>
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	459b      	cmp	fp, r3
 8007f28:	dd13      	ble.n	8007f52 <__hexnan+0x7a>
 8007f2a:	454c      	cmp	r4, r9
 8007f2c:	d206      	bcs.n	8007f3c <__hexnan+0x64>
 8007f2e:	2d07      	cmp	r5, #7
 8007f30:	dc04      	bgt.n	8007f3c <__hexnan+0x64>
 8007f32:	462a      	mov	r2, r5
 8007f34:	4649      	mov	r1, r9
 8007f36:	4620      	mov	r0, r4
 8007f38:	f7ff ffa8 	bl	8007e8c <L_shift>
 8007f3c:	4544      	cmp	r4, r8
 8007f3e:	d950      	bls.n	8007fe2 <__hexnan+0x10a>
 8007f40:	2300      	movs	r3, #0
 8007f42:	f1a4 0904 	sub.w	r9, r4, #4
 8007f46:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f4a:	f8cd b008 	str.w	fp, [sp, #8]
 8007f4e:	464c      	mov	r4, r9
 8007f50:	461d      	mov	r5, r3
 8007f52:	9903      	ldr	r1, [sp, #12]
 8007f54:	e7d7      	b.n	8007f06 <__hexnan+0x2e>
 8007f56:	2a29      	cmp	r2, #41	; 0x29
 8007f58:	d156      	bne.n	8008008 <__hexnan+0x130>
 8007f5a:	3102      	adds	r1, #2
 8007f5c:	f8ca 1000 	str.w	r1, [sl]
 8007f60:	f1bb 0f00 	cmp.w	fp, #0
 8007f64:	d050      	beq.n	8008008 <__hexnan+0x130>
 8007f66:	454c      	cmp	r4, r9
 8007f68:	d206      	bcs.n	8007f78 <__hexnan+0xa0>
 8007f6a:	2d07      	cmp	r5, #7
 8007f6c:	dc04      	bgt.n	8007f78 <__hexnan+0xa0>
 8007f6e:	462a      	mov	r2, r5
 8007f70:	4649      	mov	r1, r9
 8007f72:	4620      	mov	r0, r4
 8007f74:	f7ff ff8a 	bl	8007e8c <L_shift>
 8007f78:	4544      	cmp	r4, r8
 8007f7a:	d934      	bls.n	8007fe6 <__hexnan+0x10e>
 8007f7c:	f1a8 0204 	sub.w	r2, r8, #4
 8007f80:	4623      	mov	r3, r4
 8007f82:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f86:	f842 1f04 	str.w	r1, [r2, #4]!
 8007f8a:	429f      	cmp	r7, r3
 8007f8c:	d2f9      	bcs.n	8007f82 <__hexnan+0xaa>
 8007f8e:	1b3b      	subs	r3, r7, r4
 8007f90:	f023 0303 	bic.w	r3, r3, #3
 8007f94:	3304      	adds	r3, #4
 8007f96:	3401      	adds	r4, #1
 8007f98:	3e03      	subs	r6, #3
 8007f9a:	42b4      	cmp	r4, r6
 8007f9c:	bf88      	it	hi
 8007f9e:	2304      	movhi	r3, #4
 8007fa0:	4443      	add	r3, r8
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f843 2b04 	str.w	r2, [r3], #4
 8007fa8:	429f      	cmp	r7, r3
 8007faa:	d2fb      	bcs.n	8007fa4 <__hexnan+0xcc>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	b91b      	cbnz	r3, 8007fb8 <__hexnan+0xe0>
 8007fb0:	4547      	cmp	r7, r8
 8007fb2:	d127      	bne.n	8008004 <__hexnan+0x12c>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	2005      	movs	r0, #5
 8007fba:	e026      	b.n	800800a <__hexnan+0x132>
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	2d08      	cmp	r5, #8
 8007fc0:	f10b 0b01 	add.w	fp, fp, #1
 8007fc4:	dd06      	ble.n	8007fd4 <__hexnan+0xfc>
 8007fc6:	4544      	cmp	r4, r8
 8007fc8:	d9c3      	bls.n	8007f52 <__hexnan+0x7a>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fd0:	2501      	movs	r5, #1
 8007fd2:	3c04      	subs	r4, #4
 8007fd4:	6822      	ldr	r2, [r4, #0]
 8007fd6:	f000 000f 	and.w	r0, r0, #15
 8007fda:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007fde:	6022      	str	r2, [r4, #0]
 8007fe0:	e7b7      	b.n	8007f52 <__hexnan+0x7a>
 8007fe2:	2508      	movs	r5, #8
 8007fe4:	e7b5      	b.n	8007f52 <__hexnan+0x7a>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0df      	beq.n	8007fac <__hexnan+0xd4>
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff0:	f1c3 0320 	rsb	r3, r3, #32
 8007ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ffc:	401a      	ands	r2, r3
 8007ffe:	f846 2c04 	str.w	r2, [r6, #-4]
 8008002:	e7d3      	b.n	8007fac <__hexnan+0xd4>
 8008004:	3f04      	subs	r7, #4
 8008006:	e7d1      	b.n	8007fac <__hexnan+0xd4>
 8008008:	2004      	movs	r0, #4
 800800a:	b007      	add	sp, #28
 800800c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008010 <_localeconv_r>:
 8008010:	4800      	ldr	r0, [pc, #0]	; (8008014 <_localeconv_r+0x4>)
 8008012:	4770      	bx	lr
 8008014:	20000164 	.word	0x20000164

08008018 <malloc>:
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <malloc+0xc>)
 800801a:	4601      	mov	r1, r0
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	f000 bd3d 	b.w	8008a9c <_malloc_r>
 8008022:	bf00      	nop
 8008024:	2000000c 	.word	0x2000000c

08008028 <__ascii_mbtowc>:
 8008028:	b082      	sub	sp, #8
 800802a:	b901      	cbnz	r1, 800802e <__ascii_mbtowc+0x6>
 800802c:	a901      	add	r1, sp, #4
 800802e:	b142      	cbz	r2, 8008042 <__ascii_mbtowc+0x1a>
 8008030:	b14b      	cbz	r3, 8008046 <__ascii_mbtowc+0x1e>
 8008032:	7813      	ldrb	r3, [r2, #0]
 8008034:	600b      	str	r3, [r1, #0]
 8008036:	7812      	ldrb	r2, [r2, #0]
 8008038:	1e10      	subs	r0, r2, #0
 800803a:	bf18      	it	ne
 800803c:	2001      	movne	r0, #1
 800803e:	b002      	add	sp, #8
 8008040:	4770      	bx	lr
 8008042:	4610      	mov	r0, r2
 8008044:	e7fb      	b.n	800803e <__ascii_mbtowc+0x16>
 8008046:	f06f 0001 	mvn.w	r0, #1
 800804a:	e7f8      	b.n	800803e <__ascii_mbtowc+0x16>

0800804c <memcpy>:
 800804c:	440a      	add	r2, r1
 800804e:	4291      	cmp	r1, r2
 8008050:	f100 33ff 	add.w	r3, r0, #4294967295
 8008054:	d100      	bne.n	8008058 <memcpy+0xc>
 8008056:	4770      	bx	lr
 8008058:	b510      	push	{r4, lr}
 800805a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800805e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008062:	4291      	cmp	r1, r2
 8008064:	d1f9      	bne.n	800805a <memcpy+0xe>
 8008066:	bd10      	pop	{r4, pc}

08008068 <_Balloc>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800806c:	4604      	mov	r4, r0
 800806e:	460d      	mov	r5, r1
 8008070:	b976      	cbnz	r6, 8008090 <_Balloc+0x28>
 8008072:	2010      	movs	r0, #16
 8008074:	f7ff ffd0 	bl	8008018 <malloc>
 8008078:	4602      	mov	r2, r0
 800807a:	6260      	str	r0, [r4, #36]	; 0x24
 800807c:	b920      	cbnz	r0, 8008088 <_Balloc+0x20>
 800807e:	4b18      	ldr	r3, [pc, #96]	; (80080e0 <_Balloc+0x78>)
 8008080:	4818      	ldr	r0, [pc, #96]	; (80080e4 <_Balloc+0x7c>)
 8008082:	2166      	movs	r1, #102	; 0x66
 8008084:	f000 fef8 	bl	8008e78 <__assert_func>
 8008088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800808c:	6006      	str	r6, [r0, #0]
 800808e:	60c6      	str	r6, [r0, #12]
 8008090:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008092:	68f3      	ldr	r3, [r6, #12]
 8008094:	b183      	cbz	r3, 80080b8 <_Balloc+0x50>
 8008096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800809e:	b9b8      	cbnz	r0, 80080d0 <_Balloc+0x68>
 80080a0:	2101      	movs	r1, #1
 80080a2:	fa01 f605 	lsl.w	r6, r1, r5
 80080a6:	1d72      	adds	r2, r6, #5
 80080a8:	0092      	lsls	r2, r2, #2
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 fc97 	bl	80089de <_calloc_r>
 80080b0:	b160      	cbz	r0, 80080cc <_Balloc+0x64>
 80080b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080b6:	e00e      	b.n	80080d6 <_Balloc+0x6e>
 80080b8:	2221      	movs	r2, #33	; 0x21
 80080ba:	2104      	movs	r1, #4
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fc8e 	bl	80089de <_calloc_r>
 80080c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c4:	60f0      	str	r0, [r6, #12]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e4      	bne.n	8008096 <_Balloc+0x2e>
 80080cc:	2000      	movs	r0, #0
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	6802      	ldr	r2, [r0, #0]
 80080d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080d6:	2300      	movs	r3, #0
 80080d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080dc:	e7f7      	b.n	80080ce <_Balloc+0x66>
 80080de:	bf00      	nop
 80080e0:	08009bc6 	.word	0x08009bc6
 80080e4:	08009ccc 	.word	0x08009ccc

080080e8 <_Bfree>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080ec:	4605      	mov	r5, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	b976      	cbnz	r6, 8008110 <_Bfree+0x28>
 80080f2:	2010      	movs	r0, #16
 80080f4:	f7ff ff90 	bl	8008018 <malloc>
 80080f8:	4602      	mov	r2, r0
 80080fa:	6268      	str	r0, [r5, #36]	; 0x24
 80080fc:	b920      	cbnz	r0, 8008108 <_Bfree+0x20>
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <_Bfree+0x3c>)
 8008100:	4809      	ldr	r0, [pc, #36]	; (8008128 <_Bfree+0x40>)
 8008102:	218a      	movs	r1, #138	; 0x8a
 8008104:	f000 feb8 	bl	8008e78 <__assert_func>
 8008108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800810c:	6006      	str	r6, [r0, #0]
 800810e:	60c6      	str	r6, [r0, #12]
 8008110:	b13c      	cbz	r4, 8008122 <_Bfree+0x3a>
 8008112:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008114:	6862      	ldr	r2, [r4, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800811c:	6021      	str	r1, [r4, #0]
 800811e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	08009bc6 	.word	0x08009bc6
 8008128:	08009ccc 	.word	0x08009ccc

0800812c <__multadd>:
 800812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008130:	690e      	ldr	r6, [r1, #16]
 8008132:	4607      	mov	r7, r0
 8008134:	4698      	mov	r8, r3
 8008136:	460c      	mov	r4, r1
 8008138:	f101 0014 	add.w	r0, r1, #20
 800813c:	2300      	movs	r3, #0
 800813e:	6805      	ldr	r5, [r0, #0]
 8008140:	b2a9      	uxth	r1, r5
 8008142:	fb02 8101 	mla	r1, r2, r1, r8
 8008146:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800814a:	0c2d      	lsrs	r5, r5, #16
 800814c:	fb02 c505 	mla	r5, r2, r5, ip
 8008150:	b289      	uxth	r1, r1
 8008152:	3301      	adds	r3, #1
 8008154:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008158:	429e      	cmp	r6, r3
 800815a:	f840 1b04 	str.w	r1, [r0], #4
 800815e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008162:	dcec      	bgt.n	800813e <__multadd+0x12>
 8008164:	f1b8 0f00 	cmp.w	r8, #0
 8008168:	d022      	beq.n	80081b0 <__multadd+0x84>
 800816a:	68a3      	ldr	r3, [r4, #8]
 800816c:	42b3      	cmp	r3, r6
 800816e:	dc19      	bgt.n	80081a4 <__multadd+0x78>
 8008170:	6861      	ldr	r1, [r4, #4]
 8008172:	4638      	mov	r0, r7
 8008174:	3101      	adds	r1, #1
 8008176:	f7ff ff77 	bl	8008068 <_Balloc>
 800817a:	4605      	mov	r5, r0
 800817c:	b928      	cbnz	r0, 800818a <__multadd+0x5e>
 800817e:	4602      	mov	r2, r0
 8008180:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <__multadd+0x8c>)
 8008182:	480e      	ldr	r0, [pc, #56]	; (80081bc <__multadd+0x90>)
 8008184:	21b5      	movs	r1, #181	; 0xb5
 8008186:	f000 fe77 	bl	8008e78 <__assert_func>
 800818a:	6922      	ldr	r2, [r4, #16]
 800818c:	3202      	adds	r2, #2
 800818e:	f104 010c 	add.w	r1, r4, #12
 8008192:	0092      	lsls	r2, r2, #2
 8008194:	300c      	adds	r0, #12
 8008196:	f7ff ff59 	bl	800804c <memcpy>
 800819a:	4621      	mov	r1, r4
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff ffa3 	bl	80080e8 <_Bfree>
 80081a2:	462c      	mov	r4, r5
 80081a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80081a8:	3601      	adds	r6, #1
 80081aa:	f8c3 8014 	str.w	r8, [r3, #20]
 80081ae:	6126      	str	r6, [r4, #16]
 80081b0:	4620      	mov	r0, r4
 80081b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b6:	bf00      	nop
 80081b8:	08009c3c 	.word	0x08009c3c
 80081bc:	08009ccc 	.word	0x08009ccc

080081c0 <__s2b>:
 80081c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c4:	460c      	mov	r4, r1
 80081c6:	4615      	mov	r5, r2
 80081c8:	461f      	mov	r7, r3
 80081ca:	2209      	movs	r2, #9
 80081cc:	3308      	adds	r3, #8
 80081ce:	4606      	mov	r6, r0
 80081d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081d4:	2100      	movs	r1, #0
 80081d6:	2201      	movs	r2, #1
 80081d8:	429a      	cmp	r2, r3
 80081da:	db09      	blt.n	80081f0 <__s2b+0x30>
 80081dc:	4630      	mov	r0, r6
 80081de:	f7ff ff43 	bl	8008068 <_Balloc>
 80081e2:	b940      	cbnz	r0, 80081f6 <__s2b+0x36>
 80081e4:	4602      	mov	r2, r0
 80081e6:	4b19      	ldr	r3, [pc, #100]	; (800824c <__s2b+0x8c>)
 80081e8:	4819      	ldr	r0, [pc, #100]	; (8008250 <__s2b+0x90>)
 80081ea:	21ce      	movs	r1, #206	; 0xce
 80081ec:	f000 fe44 	bl	8008e78 <__assert_func>
 80081f0:	0052      	lsls	r2, r2, #1
 80081f2:	3101      	adds	r1, #1
 80081f4:	e7f0      	b.n	80081d8 <__s2b+0x18>
 80081f6:	9b08      	ldr	r3, [sp, #32]
 80081f8:	6143      	str	r3, [r0, #20]
 80081fa:	2d09      	cmp	r5, #9
 80081fc:	f04f 0301 	mov.w	r3, #1
 8008200:	6103      	str	r3, [r0, #16]
 8008202:	dd16      	ble.n	8008232 <__s2b+0x72>
 8008204:	f104 0909 	add.w	r9, r4, #9
 8008208:	46c8      	mov	r8, r9
 800820a:	442c      	add	r4, r5
 800820c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008210:	4601      	mov	r1, r0
 8008212:	3b30      	subs	r3, #48	; 0x30
 8008214:	220a      	movs	r2, #10
 8008216:	4630      	mov	r0, r6
 8008218:	f7ff ff88 	bl	800812c <__multadd>
 800821c:	45a0      	cmp	r8, r4
 800821e:	d1f5      	bne.n	800820c <__s2b+0x4c>
 8008220:	f1a5 0408 	sub.w	r4, r5, #8
 8008224:	444c      	add	r4, r9
 8008226:	1b2d      	subs	r5, r5, r4
 8008228:	1963      	adds	r3, r4, r5
 800822a:	42bb      	cmp	r3, r7
 800822c:	db04      	blt.n	8008238 <__s2b+0x78>
 800822e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008232:	340a      	adds	r4, #10
 8008234:	2509      	movs	r5, #9
 8008236:	e7f6      	b.n	8008226 <__s2b+0x66>
 8008238:	f814 3b01 	ldrb.w	r3, [r4], #1
 800823c:	4601      	mov	r1, r0
 800823e:	3b30      	subs	r3, #48	; 0x30
 8008240:	220a      	movs	r2, #10
 8008242:	4630      	mov	r0, r6
 8008244:	f7ff ff72 	bl	800812c <__multadd>
 8008248:	e7ee      	b.n	8008228 <__s2b+0x68>
 800824a:	bf00      	nop
 800824c:	08009c3c 	.word	0x08009c3c
 8008250:	08009ccc 	.word	0x08009ccc

08008254 <__hi0bits>:
 8008254:	0c03      	lsrs	r3, r0, #16
 8008256:	041b      	lsls	r3, r3, #16
 8008258:	b9d3      	cbnz	r3, 8008290 <__hi0bits+0x3c>
 800825a:	0400      	lsls	r0, r0, #16
 800825c:	2310      	movs	r3, #16
 800825e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008262:	bf04      	itt	eq
 8008264:	0200      	lsleq	r0, r0, #8
 8008266:	3308      	addeq	r3, #8
 8008268:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800826c:	bf04      	itt	eq
 800826e:	0100      	lsleq	r0, r0, #4
 8008270:	3304      	addeq	r3, #4
 8008272:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008276:	bf04      	itt	eq
 8008278:	0080      	lsleq	r0, r0, #2
 800827a:	3302      	addeq	r3, #2
 800827c:	2800      	cmp	r0, #0
 800827e:	db05      	blt.n	800828c <__hi0bits+0x38>
 8008280:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008284:	f103 0301 	add.w	r3, r3, #1
 8008288:	bf08      	it	eq
 800828a:	2320      	moveq	r3, #32
 800828c:	4618      	mov	r0, r3
 800828e:	4770      	bx	lr
 8008290:	2300      	movs	r3, #0
 8008292:	e7e4      	b.n	800825e <__hi0bits+0xa>

08008294 <__lo0bits>:
 8008294:	6803      	ldr	r3, [r0, #0]
 8008296:	f013 0207 	ands.w	r2, r3, #7
 800829a:	4601      	mov	r1, r0
 800829c:	d00b      	beq.n	80082b6 <__lo0bits+0x22>
 800829e:	07da      	lsls	r2, r3, #31
 80082a0:	d424      	bmi.n	80082ec <__lo0bits+0x58>
 80082a2:	0798      	lsls	r0, r3, #30
 80082a4:	bf49      	itett	mi
 80082a6:	085b      	lsrmi	r3, r3, #1
 80082a8:	089b      	lsrpl	r3, r3, #2
 80082aa:	2001      	movmi	r0, #1
 80082ac:	600b      	strmi	r3, [r1, #0]
 80082ae:	bf5c      	itt	pl
 80082b0:	600b      	strpl	r3, [r1, #0]
 80082b2:	2002      	movpl	r0, #2
 80082b4:	4770      	bx	lr
 80082b6:	b298      	uxth	r0, r3
 80082b8:	b9b0      	cbnz	r0, 80082e8 <__lo0bits+0x54>
 80082ba:	0c1b      	lsrs	r3, r3, #16
 80082bc:	2010      	movs	r0, #16
 80082be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082c2:	bf04      	itt	eq
 80082c4:	0a1b      	lsreq	r3, r3, #8
 80082c6:	3008      	addeq	r0, #8
 80082c8:	071a      	lsls	r2, r3, #28
 80082ca:	bf04      	itt	eq
 80082cc:	091b      	lsreq	r3, r3, #4
 80082ce:	3004      	addeq	r0, #4
 80082d0:	079a      	lsls	r2, r3, #30
 80082d2:	bf04      	itt	eq
 80082d4:	089b      	lsreq	r3, r3, #2
 80082d6:	3002      	addeq	r0, #2
 80082d8:	07da      	lsls	r2, r3, #31
 80082da:	d403      	bmi.n	80082e4 <__lo0bits+0x50>
 80082dc:	085b      	lsrs	r3, r3, #1
 80082de:	f100 0001 	add.w	r0, r0, #1
 80082e2:	d005      	beq.n	80082f0 <__lo0bits+0x5c>
 80082e4:	600b      	str	r3, [r1, #0]
 80082e6:	4770      	bx	lr
 80082e8:	4610      	mov	r0, r2
 80082ea:	e7e8      	b.n	80082be <__lo0bits+0x2a>
 80082ec:	2000      	movs	r0, #0
 80082ee:	4770      	bx	lr
 80082f0:	2020      	movs	r0, #32
 80082f2:	4770      	bx	lr

080082f4 <__i2b>:
 80082f4:	b510      	push	{r4, lr}
 80082f6:	460c      	mov	r4, r1
 80082f8:	2101      	movs	r1, #1
 80082fa:	f7ff feb5 	bl	8008068 <_Balloc>
 80082fe:	4602      	mov	r2, r0
 8008300:	b928      	cbnz	r0, 800830e <__i2b+0x1a>
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <__i2b+0x24>)
 8008304:	4805      	ldr	r0, [pc, #20]	; (800831c <__i2b+0x28>)
 8008306:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800830a:	f000 fdb5 	bl	8008e78 <__assert_func>
 800830e:	2301      	movs	r3, #1
 8008310:	6144      	str	r4, [r0, #20]
 8008312:	6103      	str	r3, [r0, #16]
 8008314:	bd10      	pop	{r4, pc}
 8008316:	bf00      	nop
 8008318:	08009c3c 	.word	0x08009c3c
 800831c:	08009ccc 	.word	0x08009ccc

08008320 <__multiply>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4614      	mov	r4, r2
 8008326:	690a      	ldr	r2, [r1, #16]
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	429a      	cmp	r2, r3
 800832c:	bfb8      	it	lt
 800832e:	460b      	movlt	r3, r1
 8008330:	460d      	mov	r5, r1
 8008332:	bfbc      	itt	lt
 8008334:	4625      	movlt	r5, r4
 8008336:	461c      	movlt	r4, r3
 8008338:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800833c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008340:	68ab      	ldr	r3, [r5, #8]
 8008342:	6869      	ldr	r1, [r5, #4]
 8008344:	eb0a 0709 	add.w	r7, sl, r9
 8008348:	42bb      	cmp	r3, r7
 800834a:	b085      	sub	sp, #20
 800834c:	bfb8      	it	lt
 800834e:	3101      	addlt	r1, #1
 8008350:	f7ff fe8a 	bl	8008068 <_Balloc>
 8008354:	b930      	cbnz	r0, 8008364 <__multiply+0x44>
 8008356:	4602      	mov	r2, r0
 8008358:	4b42      	ldr	r3, [pc, #264]	; (8008464 <__multiply+0x144>)
 800835a:	4843      	ldr	r0, [pc, #268]	; (8008468 <__multiply+0x148>)
 800835c:	f240 115d 	movw	r1, #349	; 0x15d
 8008360:	f000 fd8a 	bl	8008e78 <__assert_func>
 8008364:	f100 0614 	add.w	r6, r0, #20
 8008368:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800836c:	4633      	mov	r3, r6
 800836e:	2200      	movs	r2, #0
 8008370:	4543      	cmp	r3, r8
 8008372:	d31e      	bcc.n	80083b2 <__multiply+0x92>
 8008374:	f105 0c14 	add.w	ip, r5, #20
 8008378:	f104 0314 	add.w	r3, r4, #20
 800837c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008380:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008384:	9202      	str	r2, [sp, #8]
 8008386:	ebac 0205 	sub.w	r2, ip, r5
 800838a:	3a15      	subs	r2, #21
 800838c:	f022 0203 	bic.w	r2, r2, #3
 8008390:	3204      	adds	r2, #4
 8008392:	f105 0115 	add.w	r1, r5, #21
 8008396:	458c      	cmp	ip, r1
 8008398:	bf38      	it	cc
 800839a:	2204      	movcc	r2, #4
 800839c:	9201      	str	r2, [sp, #4]
 800839e:	9a02      	ldr	r2, [sp, #8]
 80083a0:	9303      	str	r3, [sp, #12]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d808      	bhi.n	80083b8 <__multiply+0x98>
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	dc55      	bgt.n	8008456 <__multiply+0x136>
 80083aa:	6107      	str	r7, [r0, #16]
 80083ac:	b005      	add	sp, #20
 80083ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b2:	f843 2b04 	str.w	r2, [r3], #4
 80083b6:	e7db      	b.n	8008370 <__multiply+0x50>
 80083b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80083bc:	f1ba 0f00 	cmp.w	sl, #0
 80083c0:	d020      	beq.n	8008404 <__multiply+0xe4>
 80083c2:	f105 0e14 	add.w	lr, r5, #20
 80083c6:	46b1      	mov	r9, r6
 80083c8:	2200      	movs	r2, #0
 80083ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 80083ce:	f8d9 b000 	ldr.w	fp, [r9]
 80083d2:	b2a1      	uxth	r1, r4
 80083d4:	fa1f fb8b 	uxth.w	fp, fp
 80083d8:	fb0a b101 	mla	r1, sl, r1, fp
 80083dc:	4411      	add	r1, r2
 80083de:	f8d9 2000 	ldr.w	r2, [r9]
 80083e2:	0c24      	lsrs	r4, r4, #16
 80083e4:	0c12      	lsrs	r2, r2, #16
 80083e6:	fb0a 2404 	mla	r4, sl, r4, r2
 80083ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80083ee:	b289      	uxth	r1, r1
 80083f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80083f4:	45f4      	cmp	ip, lr
 80083f6:	f849 1b04 	str.w	r1, [r9], #4
 80083fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80083fe:	d8e4      	bhi.n	80083ca <__multiply+0xaa>
 8008400:	9901      	ldr	r1, [sp, #4]
 8008402:	5072      	str	r2, [r6, r1]
 8008404:	9a03      	ldr	r2, [sp, #12]
 8008406:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800840a:	3304      	adds	r3, #4
 800840c:	f1b9 0f00 	cmp.w	r9, #0
 8008410:	d01f      	beq.n	8008452 <__multiply+0x132>
 8008412:	6834      	ldr	r4, [r6, #0]
 8008414:	f105 0114 	add.w	r1, r5, #20
 8008418:	46b6      	mov	lr, r6
 800841a:	f04f 0a00 	mov.w	sl, #0
 800841e:	880a      	ldrh	r2, [r1, #0]
 8008420:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008424:	fb09 b202 	mla	r2, r9, r2, fp
 8008428:	4492      	add	sl, r2
 800842a:	b2a4      	uxth	r4, r4
 800842c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008430:	f84e 4b04 	str.w	r4, [lr], #4
 8008434:	f851 4b04 	ldr.w	r4, [r1], #4
 8008438:	f8be 2000 	ldrh.w	r2, [lr]
 800843c:	0c24      	lsrs	r4, r4, #16
 800843e:	fb09 2404 	mla	r4, r9, r4, r2
 8008442:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008446:	458c      	cmp	ip, r1
 8008448:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800844c:	d8e7      	bhi.n	800841e <__multiply+0xfe>
 800844e:	9a01      	ldr	r2, [sp, #4]
 8008450:	50b4      	str	r4, [r6, r2]
 8008452:	3604      	adds	r6, #4
 8008454:	e7a3      	b.n	800839e <__multiply+0x7e>
 8008456:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1a5      	bne.n	80083aa <__multiply+0x8a>
 800845e:	3f01      	subs	r7, #1
 8008460:	e7a1      	b.n	80083a6 <__multiply+0x86>
 8008462:	bf00      	nop
 8008464:	08009c3c 	.word	0x08009c3c
 8008468:	08009ccc 	.word	0x08009ccc

0800846c <__pow5mult>:
 800846c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008470:	4615      	mov	r5, r2
 8008472:	f012 0203 	ands.w	r2, r2, #3
 8008476:	4606      	mov	r6, r0
 8008478:	460f      	mov	r7, r1
 800847a:	d007      	beq.n	800848c <__pow5mult+0x20>
 800847c:	4c25      	ldr	r4, [pc, #148]	; (8008514 <__pow5mult+0xa8>)
 800847e:	3a01      	subs	r2, #1
 8008480:	2300      	movs	r3, #0
 8008482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008486:	f7ff fe51 	bl	800812c <__multadd>
 800848a:	4607      	mov	r7, r0
 800848c:	10ad      	asrs	r5, r5, #2
 800848e:	d03d      	beq.n	800850c <__pow5mult+0xa0>
 8008490:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008492:	b97c      	cbnz	r4, 80084b4 <__pow5mult+0x48>
 8008494:	2010      	movs	r0, #16
 8008496:	f7ff fdbf 	bl	8008018 <malloc>
 800849a:	4602      	mov	r2, r0
 800849c:	6270      	str	r0, [r6, #36]	; 0x24
 800849e:	b928      	cbnz	r0, 80084ac <__pow5mult+0x40>
 80084a0:	4b1d      	ldr	r3, [pc, #116]	; (8008518 <__pow5mult+0xac>)
 80084a2:	481e      	ldr	r0, [pc, #120]	; (800851c <__pow5mult+0xb0>)
 80084a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084a8:	f000 fce6 	bl	8008e78 <__assert_func>
 80084ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084b0:	6004      	str	r4, [r0, #0]
 80084b2:	60c4      	str	r4, [r0, #12]
 80084b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084bc:	b94c      	cbnz	r4, 80084d2 <__pow5mult+0x66>
 80084be:	f240 2171 	movw	r1, #625	; 0x271
 80084c2:	4630      	mov	r0, r6
 80084c4:	f7ff ff16 	bl	80082f4 <__i2b>
 80084c8:	2300      	movs	r3, #0
 80084ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80084ce:	4604      	mov	r4, r0
 80084d0:	6003      	str	r3, [r0, #0]
 80084d2:	f04f 0900 	mov.w	r9, #0
 80084d6:	07eb      	lsls	r3, r5, #31
 80084d8:	d50a      	bpl.n	80084f0 <__pow5mult+0x84>
 80084da:	4639      	mov	r1, r7
 80084dc:	4622      	mov	r2, r4
 80084de:	4630      	mov	r0, r6
 80084e0:	f7ff ff1e 	bl	8008320 <__multiply>
 80084e4:	4639      	mov	r1, r7
 80084e6:	4680      	mov	r8, r0
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7ff fdfd 	bl	80080e8 <_Bfree>
 80084ee:	4647      	mov	r7, r8
 80084f0:	106d      	asrs	r5, r5, #1
 80084f2:	d00b      	beq.n	800850c <__pow5mult+0xa0>
 80084f4:	6820      	ldr	r0, [r4, #0]
 80084f6:	b938      	cbnz	r0, 8008508 <__pow5mult+0x9c>
 80084f8:	4622      	mov	r2, r4
 80084fa:	4621      	mov	r1, r4
 80084fc:	4630      	mov	r0, r6
 80084fe:	f7ff ff0f 	bl	8008320 <__multiply>
 8008502:	6020      	str	r0, [r4, #0]
 8008504:	f8c0 9000 	str.w	r9, [r0]
 8008508:	4604      	mov	r4, r0
 800850a:	e7e4      	b.n	80084d6 <__pow5mult+0x6a>
 800850c:	4638      	mov	r0, r7
 800850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008512:	bf00      	nop
 8008514:	08009e20 	.word	0x08009e20
 8008518:	08009bc6 	.word	0x08009bc6
 800851c:	08009ccc 	.word	0x08009ccc

08008520 <__lshift>:
 8008520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008524:	460c      	mov	r4, r1
 8008526:	6849      	ldr	r1, [r1, #4]
 8008528:	6923      	ldr	r3, [r4, #16]
 800852a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800852e:	68a3      	ldr	r3, [r4, #8]
 8008530:	4607      	mov	r7, r0
 8008532:	4691      	mov	r9, r2
 8008534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008538:	f108 0601 	add.w	r6, r8, #1
 800853c:	42b3      	cmp	r3, r6
 800853e:	db0b      	blt.n	8008558 <__lshift+0x38>
 8008540:	4638      	mov	r0, r7
 8008542:	f7ff fd91 	bl	8008068 <_Balloc>
 8008546:	4605      	mov	r5, r0
 8008548:	b948      	cbnz	r0, 800855e <__lshift+0x3e>
 800854a:	4602      	mov	r2, r0
 800854c:	4b28      	ldr	r3, [pc, #160]	; (80085f0 <__lshift+0xd0>)
 800854e:	4829      	ldr	r0, [pc, #164]	; (80085f4 <__lshift+0xd4>)
 8008550:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008554:	f000 fc90 	bl	8008e78 <__assert_func>
 8008558:	3101      	adds	r1, #1
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	e7ee      	b.n	800853c <__lshift+0x1c>
 800855e:	2300      	movs	r3, #0
 8008560:	f100 0114 	add.w	r1, r0, #20
 8008564:	f100 0210 	add.w	r2, r0, #16
 8008568:	4618      	mov	r0, r3
 800856a:	4553      	cmp	r3, sl
 800856c:	db33      	blt.n	80085d6 <__lshift+0xb6>
 800856e:	6920      	ldr	r0, [r4, #16]
 8008570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008574:	f104 0314 	add.w	r3, r4, #20
 8008578:	f019 091f 	ands.w	r9, r9, #31
 800857c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008580:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008584:	d02b      	beq.n	80085de <__lshift+0xbe>
 8008586:	f1c9 0e20 	rsb	lr, r9, #32
 800858a:	468a      	mov	sl, r1
 800858c:	2200      	movs	r2, #0
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	fa00 f009 	lsl.w	r0, r0, r9
 8008594:	4302      	orrs	r2, r0
 8008596:	f84a 2b04 	str.w	r2, [sl], #4
 800859a:	f853 2b04 	ldr.w	r2, [r3], #4
 800859e:	459c      	cmp	ip, r3
 80085a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80085a4:	d8f3      	bhi.n	800858e <__lshift+0x6e>
 80085a6:	ebac 0304 	sub.w	r3, ip, r4
 80085aa:	3b15      	subs	r3, #21
 80085ac:	f023 0303 	bic.w	r3, r3, #3
 80085b0:	3304      	adds	r3, #4
 80085b2:	f104 0015 	add.w	r0, r4, #21
 80085b6:	4584      	cmp	ip, r0
 80085b8:	bf38      	it	cc
 80085ba:	2304      	movcc	r3, #4
 80085bc:	50ca      	str	r2, [r1, r3]
 80085be:	b10a      	cbz	r2, 80085c4 <__lshift+0xa4>
 80085c0:	f108 0602 	add.w	r6, r8, #2
 80085c4:	3e01      	subs	r6, #1
 80085c6:	4638      	mov	r0, r7
 80085c8:	612e      	str	r6, [r5, #16]
 80085ca:	4621      	mov	r1, r4
 80085cc:	f7ff fd8c 	bl	80080e8 <_Bfree>
 80085d0:	4628      	mov	r0, r5
 80085d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80085da:	3301      	adds	r3, #1
 80085dc:	e7c5      	b.n	800856a <__lshift+0x4a>
 80085de:	3904      	subs	r1, #4
 80085e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80085e8:	459c      	cmp	ip, r3
 80085ea:	d8f9      	bhi.n	80085e0 <__lshift+0xc0>
 80085ec:	e7ea      	b.n	80085c4 <__lshift+0xa4>
 80085ee:	bf00      	nop
 80085f0:	08009c3c 	.word	0x08009c3c
 80085f4:	08009ccc 	.word	0x08009ccc

080085f8 <__mcmp>:
 80085f8:	b530      	push	{r4, r5, lr}
 80085fa:	6902      	ldr	r2, [r0, #16]
 80085fc:	690c      	ldr	r4, [r1, #16]
 80085fe:	1b12      	subs	r2, r2, r4
 8008600:	d10e      	bne.n	8008620 <__mcmp+0x28>
 8008602:	f100 0314 	add.w	r3, r0, #20
 8008606:	3114      	adds	r1, #20
 8008608:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800860c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008610:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008614:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008618:	42a5      	cmp	r5, r4
 800861a:	d003      	beq.n	8008624 <__mcmp+0x2c>
 800861c:	d305      	bcc.n	800862a <__mcmp+0x32>
 800861e:	2201      	movs	r2, #1
 8008620:	4610      	mov	r0, r2
 8008622:	bd30      	pop	{r4, r5, pc}
 8008624:	4283      	cmp	r3, r0
 8008626:	d3f3      	bcc.n	8008610 <__mcmp+0x18>
 8008628:	e7fa      	b.n	8008620 <__mcmp+0x28>
 800862a:	f04f 32ff 	mov.w	r2, #4294967295
 800862e:	e7f7      	b.n	8008620 <__mcmp+0x28>

08008630 <__mdiff>:
 8008630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	460c      	mov	r4, r1
 8008636:	4606      	mov	r6, r0
 8008638:	4611      	mov	r1, r2
 800863a:	4620      	mov	r0, r4
 800863c:	4617      	mov	r7, r2
 800863e:	f7ff ffdb 	bl	80085f8 <__mcmp>
 8008642:	1e05      	subs	r5, r0, #0
 8008644:	d110      	bne.n	8008668 <__mdiff+0x38>
 8008646:	4629      	mov	r1, r5
 8008648:	4630      	mov	r0, r6
 800864a:	f7ff fd0d 	bl	8008068 <_Balloc>
 800864e:	b930      	cbnz	r0, 800865e <__mdiff+0x2e>
 8008650:	4b39      	ldr	r3, [pc, #228]	; (8008738 <__mdiff+0x108>)
 8008652:	4602      	mov	r2, r0
 8008654:	f240 2132 	movw	r1, #562	; 0x232
 8008658:	4838      	ldr	r0, [pc, #224]	; (800873c <__mdiff+0x10c>)
 800865a:	f000 fc0d 	bl	8008e78 <__assert_func>
 800865e:	2301      	movs	r3, #1
 8008660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008668:	bfa4      	itt	ge
 800866a:	463b      	movge	r3, r7
 800866c:	4627      	movge	r7, r4
 800866e:	4630      	mov	r0, r6
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	bfa6      	itte	ge
 8008674:	461c      	movge	r4, r3
 8008676:	2500      	movge	r5, #0
 8008678:	2501      	movlt	r5, #1
 800867a:	f7ff fcf5 	bl	8008068 <_Balloc>
 800867e:	b920      	cbnz	r0, 800868a <__mdiff+0x5a>
 8008680:	4b2d      	ldr	r3, [pc, #180]	; (8008738 <__mdiff+0x108>)
 8008682:	4602      	mov	r2, r0
 8008684:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008688:	e7e6      	b.n	8008658 <__mdiff+0x28>
 800868a:	693e      	ldr	r6, [r7, #16]
 800868c:	60c5      	str	r5, [r0, #12]
 800868e:	6925      	ldr	r5, [r4, #16]
 8008690:	f107 0114 	add.w	r1, r7, #20
 8008694:	f104 0914 	add.w	r9, r4, #20
 8008698:	f100 0e14 	add.w	lr, r0, #20
 800869c:	f107 0210 	add.w	r2, r7, #16
 80086a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80086a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80086a8:	46f2      	mov	sl, lr
 80086aa:	2700      	movs	r7, #0
 80086ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80086b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086b4:	fa1f f883 	uxth.w	r8, r3
 80086b8:	fa17 f78b 	uxtah	r7, r7, fp
 80086bc:	0c1b      	lsrs	r3, r3, #16
 80086be:	eba7 0808 	sub.w	r8, r7, r8
 80086c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086ca:	fa1f f888 	uxth.w	r8, r8
 80086ce:	141f      	asrs	r7, r3, #16
 80086d0:	454d      	cmp	r5, r9
 80086d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086d6:	f84a 3b04 	str.w	r3, [sl], #4
 80086da:	d8e7      	bhi.n	80086ac <__mdiff+0x7c>
 80086dc:	1b2b      	subs	r3, r5, r4
 80086de:	3b15      	subs	r3, #21
 80086e0:	f023 0303 	bic.w	r3, r3, #3
 80086e4:	3304      	adds	r3, #4
 80086e6:	3415      	adds	r4, #21
 80086e8:	42a5      	cmp	r5, r4
 80086ea:	bf38      	it	cc
 80086ec:	2304      	movcc	r3, #4
 80086ee:	4419      	add	r1, r3
 80086f0:	4473      	add	r3, lr
 80086f2:	469e      	mov	lr, r3
 80086f4:	460d      	mov	r5, r1
 80086f6:	4565      	cmp	r5, ip
 80086f8:	d30e      	bcc.n	8008718 <__mdiff+0xe8>
 80086fa:	f10c 0203 	add.w	r2, ip, #3
 80086fe:	1a52      	subs	r2, r2, r1
 8008700:	f022 0203 	bic.w	r2, r2, #3
 8008704:	3903      	subs	r1, #3
 8008706:	458c      	cmp	ip, r1
 8008708:	bf38      	it	cc
 800870a:	2200      	movcc	r2, #0
 800870c:	441a      	add	r2, r3
 800870e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008712:	b17b      	cbz	r3, 8008734 <__mdiff+0x104>
 8008714:	6106      	str	r6, [r0, #16]
 8008716:	e7a5      	b.n	8008664 <__mdiff+0x34>
 8008718:	f855 8b04 	ldr.w	r8, [r5], #4
 800871c:	fa17 f488 	uxtah	r4, r7, r8
 8008720:	1422      	asrs	r2, r4, #16
 8008722:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008726:	b2a4      	uxth	r4, r4
 8008728:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800872c:	f84e 4b04 	str.w	r4, [lr], #4
 8008730:	1417      	asrs	r7, r2, #16
 8008732:	e7e0      	b.n	80086f6 <__mdiff+0xc6>
 8008734:	3e01      	subs	r6, #1
 8008736:	e7ea      	b.n	800870e <__mdiff+0xde>
 8008738:	08009c3c 	.word	0x08009c3c
 800873c:	08009ccc 	.word	0x08009ccc

08008740 <__ulp>:
 8008740:	b082      	sub	sp, #8
 8008742:	ed8d 0b00 	vstr	d0, [sp]
 8008746:	9b01      	ldr	r3, [sp, #4]
 8008748:	4912      	ldr	r1, [pc, #72]	; (8008794 <__ulp+0x54>)
 800874a:	4019      	ands	r1, r3
 800874c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008750:	2900      	cmp	r1, #0
 8008752:	dd05      	ble.n	8008760 <__ulp+0x20>
 8008754:	2200      	movs	r2, #0
 8008756:	460b      	mov	r3, r1
 8008758:	ec43 2b10 	vmov	d0, r2, r3
 800875c:	b002      	add	sp, #8
 800875e:	4770      	bx	lr
 8008760:	4249      	negs	r1, r1
 8008762:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008766:	ea4f 5021 	mov.w	r0, r1, asr #20
 800876a:	f04f 0200 	mov.w	r2, #0
 800876e:	f04f 0300 	mov.w	r3, #0
 8008772:	da04      	bge.n	800877e <__ulp+0x3e>
 8008774:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008778:	fa41 f300 	asr.w	r3, r1, r0
 800877c:	e7ec      	b.n	8008758 <__ulp+0x18>
 800877e:	f1a0 0114 	sub.w	r1, r0, #20
 8008782:	291e      	cmp	r1, #30
 8008784:	bfda      	itte	le
 8008786:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800878a:	fa20 f101 	lsrle.w	r1, r0, r1
 800878e:	2101      	movgt	r1, #1
 8008790:	460a      	mov	r2, r1
 8008792:	e7e1      	b.n	8008758 <__ulp+0x18>
 8008794:	7ff00000 	.word	0x7ff00000

08008798 <__b2d>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	6905      	ldr	r5, [r0, #16]
 800879c:	f100 0714 	add.w	r7, r0, #20
 80087a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80087a4:	1f2e      	subs	r6, r5, #4
 80087a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7ff fd52 	bl	8008254 <__hi0bits>
 80087b0:	f1c0 0320 	rsb	r3, r0, #32
 80087b4:	280a      	cmp	r0, #10
 80087b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008834 <__b2d+0x9c>
 80087ba:	600b      	str	r3, [r1, #0]
 80087bc:	dc14      	bgt.n	80087e8 <__b2d+0x50>
 80087be:	f1c0 0e0b 	rsb	lr, r0, #11
 80087c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80087c6:	42b7      	cmp	r7, r6
 80087c8:	ea41 030c 	orr.w	r3, r1, ip
 80087cc:	bf34      	ite	cc
 80087ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80087d2:	2100      	movcs	r1, #0
 80087d4:	3015      	adds	r0, #21
 80087d6:	fa04 f000 	lsl.w	r0, r4, r0
 80087da:	fa21 f10e 	lsr.w	r1, r1, lr
 80087de:	ea40 0201 	orr.w	r2, r0, r1
 80087e2:	ec43 2b10 	vmov	d0, r2, r3
 80087e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e8:	42b7      	cmp	r7, r6
 80087ea:	bf3a      	itte	cc
 80087ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80087f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80087f4:	2100      	movcs	r1, #0
 80087f6:	380b      	subs	r0, #11
 80087f8:	d017      	beq.n	800882a <__b2d+0x92>
 80087fa:	f1c0 0c20 	rsb	ip, r0, #32
 80087fe:	fa04 f500 	lsl.w	r5, r4, r0
 8008802:	42be      	cmp	r6, r7
 8008804:	fa21 f40c 	lsr.w	r4, r1, ip
 8008808:	ea45 0504 	orr.w	r5, r5, r4
 800880c:	bf8c      	ite	hi
 800880e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008812:	2400      	movls	r4, #0
 8008814:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008818:	fa01 f000 	lsl.w	r0, r1, r0
 800881c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008820:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008824:	ea40 0204 	orr.w	r2, r0, r4
 8008828:	e7db      	b.n	80087e2 <__b2d+0x4a>
 800882a:	ea44 030c 	orr.w	r3, r4, ip
 800882e:	460a      	mov	r2, r1
 8008830:	e7d7      	b.n	80087e2 <__b2d+0x4a>
 8008832:	bf00      	nop
 8008834:	3ff00000 	.word	0x3ff00000

08008838 <__d2b>:
 8008838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800883c:	4689      	mov	r9, r1
 800883e:	2101      	movs	r1, #1
 8008840:	ec57 6b10 	vmov	r6, r7, d0
 8008844:	4690      	mov	r8, r2
 8008846:	f7ff fc0f 	bl	8008068 <_Balloc>
 800884a:	4604      	mov	r4, r0
 800884c:	b930      	cbnz	r0, 800885c <__d2b+0x24>
 800884e:	4602      	mov	r2, r0
 8008850:	4b25      	ldr	r3, [pc, #148]	; (80088e8 <__d2b+0xb0>)
 8008852:	4826      	ldr	r0, [pc, #152]	; (80088ec <__d2b+0xb4>)
 8008854:	f240 310a 	movw	r1, #778	; 0x30a
 8008858:	f000 fb0e 	bl	8008e78 <__assert_func>
 800885c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008864:	bb35      	cbnz	r5, 80088b4 <__d2b+0x7c>
 8008866:	2e00      	cmp	r6, #0
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	d028      	beq.n	80088be <__d2b+0x86>
 800886c:	4668      	mov	r0, sp
 800886e:	9600      	str	r6, [sp, #0]
 8008870:	f7ff fd10 	bl	8008294 <__lo0bits>
 8008874:	9900      	ldr	r1, [sp, #0]
 8008876:	b300      	cbz	r0, 80088ba <__d2b+0x82>
 8008878:	9a01      	ldr	r2, [sp, #4]
 800887a:	f1c0 0320 	rsb	r3, r0, #32
 800887e:	fa02 f303 	lsl.w	r3, r2, r3
 8008882:	430b      	orrs	r3, r1
 8008884:	40c2      	lsrs	r2, r0
 8008886:	6163      	str	r3, [r4, #20]
 8008888:	9201      	str	r2, [sp, #4]
 800888a:	9b01      	ldr	r3, [sp, #4]
 800888c:	61a3      	str	r3, [r4, #24]
 800888e:	2b00      	cmp	r3, #0
 8008890:	bf14      	ite	ne
 8008892:	2202      	movne	r2, #2
 8008894:	2201      	moveq	r2, #1
 8008896:	6122      	str	r2, [r4, #16]
 8008898:	b1d5      	cbz	r5, 80088d0 <__d2b+0x98>
 800889a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800889e:	4405      	add	r5, r0
 80088a0:	f8c9 5000 	str.w	r5, [r9]
 80088a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088a8:	f8c8 0000 	str.w	r0, [r8]
 80088ac:	4620      	mov	r0, r4
 80088ae:	b003      	add	sp, #12
 80088b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088b8:	e7d5      	b.n	8008866 <__d2b+0x2e>
 80088ba:	6161      	str	r1, [r4, #20]
 80088bc:	e7e5      	b.n	800888a <__d2b+0x52>
 80088be:	a801      	add	r0, sp, #4
 80088c0:	f7ff fce8 	bl	8008294 <__lo0bits>
 80088c4:	9b01      	ldr	r3, [sp, #4]
 80088c6:	6163      	str	r3, [r4, #20]
 80088c8:	2201      	movs	r2, #1
 80088ca:	6122      	str	r2, [r4, #16]
 80088cc:	3020      	adds	r0, #32
 80088ce:	e7e3      	b.n	8008898 <__d2b+0x60>
 80088d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088d8:	f8c9 0000 	str.w	r0, [r9]
 80088dc:	6918      	ldr	r0, [r3, #16]
 80088de:	f7ff fcb9 	bl	8008254 <__hi0bits>
 80088e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088e6:	e7df      	b.n	80088a8 <__d2b+0x70>
 80088e8:	08009c3c 	.word	0x08009c3c
 80088ec:	08009ccc 	.word	0x08009ccc

080088f0 <__ratio>:
 80088f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	4688      	mov	r8, r1
 80088f6:	4669      	mov	r1, sp
 80088f8:	4681      	mov	r9, r0
 80088fa:	f7ff ff4d 	bl	8008798 <__b2d>
 80088fe:	a901      	add	r1, sp, #4
 8008900:	4640      	mov	r0, r8
 8008902:	ec55 4b10 	vmov	r4, r5, d0
 8008906:	f7ff ff47 	bl	8008798 <__b2d>
 800890a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800890e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008912:	eba3 0c02 	sub.w	ip, r3, r2
 8008916:	e9dd 3200 	ldrd	r3, r2, [sp]
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008920:	ec51 0b10 	vmov	r0, r1, d0
 8008924:	2b00      	cmp	r3, #0
 8008926:	bfd6      	itet	le
 8008928:	460a      	movle	r2, r1
 800892a:	462a      	movgt	r2, r5
 800892c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008930:	468b      	mov	fp, r1
 8008932:	462f      	mov	r7, r5
 8008934:	bfd4      	ite	le
 8008936:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800893a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800893e:	4620      	mov	r0, r4
 8008940:	ee10 2a10 	vmov	r2, s0
 8008944:	465b      	mov	r3, fp
 8008946:	4639      	mov	r1, r7
 8008948:	f7f7 ffa0 	bl	800088c <__aeabi_ddiv>
 800894c:	ec41 0b10 	vmov	d0, r0, r1
 8008950:	b003      	add	sp, #12
 8008952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008956 <__copybits>:
 8008956:	3901      	subs	r1, #1
 8008958:	b570      	push	{r4, r5, r6, lr}
 800895a:	1149      	asrs	r1, r1, #5
 800895c:	6914      	ldr	r4, [r2, #16]
 800895e:	3101      	adds	r1, #1
 8008960:	f102 0314 	add.w	r3, r2, #20
 8008964:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008968:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800896c:	1f05      	subs	r5, r0, #4
 800896e:	42a3      	cmp	r3, r4
 8008970:	d30c      	bcc.n	800898c <__copybits+0x36>
 8008972:	1aa3      	subs	r3, r4, r2
 8008974:	3b11      	subs	r3, #17
 8008976:	f023 0303 	bic.w	r3, r3, #3
 800897a:	3211      	adds	r2, #17
 800897c:	42a2      	cmp	r2, r4
 800897e:	bf88      	it	hi
 8008980:	2300      	movhi	r3, #0
 8008982:	4418      	add	r0, r3
 8008984:	2300      	movs	r3, #0
 8008986:	4288      	cmp	r0, r1
 8008988:	d305      	bcc.n	8008996 <__copybits+0x40>
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008990:	f845 6f04 	str.w	r6, [r5, #4]!
 8008994:	e7eb      	b.n	800896e <__copybits+0x18>
 8008996:	f840 3b04 	str.w	r3, [r0], #4
 800899a:	e7f4      	b.n	8008986 <__copybits+0x30>

0800899c <__any_on>:
 800899c:	f100 0214 	add.w	r2, r0, #20
 80089a0:	6900      	ldr	r0, [r0, #16]
 80089a2:	114b      	asrs	r3, r1, #5
 80089a4:	4298      	cmp	r0, r3
 80089a6:	b510      	push	{r4, lr}
 80089a8:	db11      	blt.n	80089ce <__any_on+0x32>
 80089aa:	dd0a      	ble.n	80089c2 <__any_on+0x26>
 80089ac:	f011 011f 	ands.w	r1, r1, #31
 80089b0:	d007      	beq.n	80089c2 <__any_on+0x26>
 80089b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089b6:	fa24 f001 	lsr.w	r0, r4, r1
 80089ba:	fa00 f101 	lsl.w	r1, r0, r1
 80089be:	428c      	cmp	r4, r1
 80089c0:	d10b      	bne.n	80089da <__any_on+0x3e>
 80089c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d803      	bhi.n	80089d2 <__any_on+0x36>
 80089ca:	2000      	movs	r0, #0
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	4603      	mov	r3, r0
 80089d0:	e7f7      	b.n	80089c2 <__any_on+0x26>
 80089d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089d6:	2900      	cmp	r1, #0
 80089d8:	d0f5      	beq.n	80089c6 <__any_on+0x2a>
 80089da:	2001      	movs	r0, #1
 80089dc:	e7f6      	b.n	80089cc <__any_on+0x30>

080089de <_calloc_r>:
 80089de:	b513      	push	{r0, r1, r4, lr}
 80089e0:	434a      	muls	r2, r1
 80089e2:	4611      	mov	r1, r2
 80089e4:	9201      	str	r2, [sp, #4]
 80089e6:	f000 f859 	bl	8008a9c <_malloc_r>
 80089ea:	4604      	mov	r4, r0
 80089ec:	b118      	cbz	r0, 80089f6 <_calloc_r+0x18>
 80089ee:	9a01      	ldr	r2, [sp, #4]
 80089f0:	2100      	movs	r1, #0
 80089f2:	f7fc fbc9 	bl	8005188 <memset>
 80089f6:	4620      	mov	r0, r4
 80089f8:	b002      	add	sp, #8
 80089fa:	bd10      	pop	{r4, pc}

080089fc <_free_r>:
 80089fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089fe:	2900      	cmp	r1, #0
 8008a00:	d048      	beq.n	8008a94 <_free_r+0x98>
 8008a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a06:	9001      	str	r0, [sp, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a0e:	bfb8      	it	lt
 8008a10:	18e4      	addlt	r4, r4, r3
 8008a12:	f000 fa7b 	bl	8008f0c <__malloc_lock>
 8008a16:	4a20      	ldr	r2, [pc, #128]	; (8008a98 <_free_r+0x9c>)
 8008a18:	9801      	ldr	r0, [sp, #4]
 8008a1a:	6813      	ldr	r3, [r2, #0]
 8008a1c:	4615      	mov	r5, r2
 8008a1e:	b933      	cbnz	r3, 8008a2e <_free_r+0x32>
 8008a20:	6063      	str	r3, [r4, #4]
 8008a22:	6014      	str	r4, [r2, #0]
 8008a24:	b003      	add	sp, #12
 8008a26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a2a:	f000 ba75 	b.w	8008f18 <__malloc_unlock>
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	d90b      	bls.n	8008a4a <_free_r+0x4e>
 8008a32:	6821      	ldr	r1, [r4, #0]
 8008a34:	1862      	adds	r2, r4, r1
 8008a36:	4293      	cmp	r3, r2
 8008a38:	bf04      	itt	eq
 8008a3a:	681a      	ldreq	r2, [r3, #0]
 8008a3c:	685b      	ldreq	r3, [r3, #4]
 8008a3e:	6063      	str	r3, [r4, #4]
 8008a40:	bf04      	itt	eq
 8008a42:	1852      	addeq	r2, r2, r1
 8008a44:	6022      	streq	r2, [r4, #0]
 8008a46:	602c      	str	r4, [r5, #0]
 8008a48:	e7ec      	b.n	8008a24 <_free_r+0x28>
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	b10b      	cbz	r3, 8008a54 <_free_r+0x58>
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	d9fa      	bls.n	8008a4a <_free_r+0x4e>
 8008a54:	6811      	ldr	r1, [r2, #0]
 8008a56:	1855      	adds	r5, r2, r1
 8008a58:	42a5      	cmp	r5, r4
 8008a5a:	d10b      	bne.n	8008a74 <_free_r+0x78>
 8008a5c:	6824      	ldr	r4, [r4, #0]
 8008a5e:	4421      	add	r1, r4
 8008a60:	1854      	adds	r4, r2, r1
 8008a62:	42a3      	cmp	r3, r4
 8008a64:	6011      	str	r1, [r2, #0]
 8008a66:	d1dd      	bne.n	8008a24 <_free_r+0x28>
 8008a68:	681c      	ldr	r4, [r3, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	6053      	str	r3, [r2, #4]
 8008a6e:	4421      	add	r1, r4
 8008a70:	6011      	str	r1, [r2, #0]
 8008a72:	e7d7      	b.n	8008a24 <_free_r+0x28>
 8008a74:	d902      	bls.n	8008a7c <_free_r+0x80>
 8008a76:	230c      	movs	r3, #12
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	e7d3      	b.n	8008a24 <_free_r+0x28>
 8008a7c:	6825      	ldr	r5, [r4, #0]
 8008a7e:	1961      	adds	r1, r4, r5
 8008a80:	428b      	cmp	r3, r1
 8008a82:	bf04      	itt	eq
 8008a84:	6819      	ldreq	r1, [r3, #0]
 8008a86:	685b      	ldreq	r3, [r3, #4]
 8008a88:	6063      	str	r3, [r4, #4]
 8008a8a:	bf04      	itt	eq
 8008a8c:	1949      	addeq	r1, r1, r5
 8008a8e:	6021      	streq	r1, [r4, #0]
 8008a90:	6054      	str	r4, [r2, #4]
 8008a92:	e7c7      	b.n	8008a24 <_free_r+0x28>
 8008a94:	b003      	add	sp, #12
 8008a96:	bd30      	pop	{r4, r5, pc}
 8008a98:	200004ac 	.word	0x200004ac

08008a9c <_malloc_r>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	1ccd      	adds	r5, r1, #3
 8008aa0:	f025 0503 	bic.w	r5, r5, #3
 8008aa4:	3508      	adds	r5, #8
 8008aa6:	2d0c      	cmp	r5, #12
 8008aa8:	bf38      	it	cc
 8008aaa:	250c      	movcc	r5, #12
 8008aac:	2d00      	cmp	r5, #0
 8008aae:	4606      	mov	r6, r0
 8008ab0:	db01      	blt.n	8008ab6 <_malloc_r+0x1a>
 8008ab2:	42a9      	cmp	r1, r5
 8008ab4:	d903      	bls.n	8008abe <_malloc_r+0x22>
 8008ab6:	230c      	movs	r3, #12
 8008ab8:	6033      	str	r3, [r6, #0]
 8008aba:	2000      	movs	r0, #0
 8008abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008abe:	f000 fa25 	bl	8008f0c <__malloc_lock>
 8008ac2:	4921      	ldr	r1, [pc, #132]	; (8008b48 <_malloc_r+0xac>)
 8008ac4:	680a      	ldr	r2, [r1, #0]
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	b99c      	cbnz	r4, 8008af2 <_malloc_r+0x56>
 8008aca:	4f20      	ldr	r7, [pc, #128]	; (8008b4c <_malloc_r+0xb0>)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	b923      	cbnz	r3, 8008ada <_malloc_r+0x3e>
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f000 f9a0 	bl	8008e18 <_sbrk_r>
 8008ad8:	6038      	str	r0, [r7, #0]
 8008ada:	4629      	mov	r1, r5
 8008adc:	4630      	mov	r0, r6
 8008ade:	f000 f99b 	bl	8008e18 <_sbrk_r>
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	d123      	bne.n	8008b2e <_malloc_r+0x92>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	6033      	str	r3, [r6, #0]
 8008aea:	4630      	mov	r0, r6
 8008aec:	f000 fa14 	bl	8008f18 <__malloc_unlock>
 8008af0:	e7e3      	b.n	8008aba <_malloc_r+0x1e>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	1b5b      	subs	r3, r3, r5
 8008af6:	d417      	bmi.n	8008b28 <_malloc_r+0x8c>
 8008af8:	2b0b      	cmp	r3, #11
 8008afa:	d903      	bls.n	8008b04 <_malloc_r+0x68>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	441c      	add	r4, r3
 8008b00:	6025      	str	r5, [r4, #0]
 8008b02:	e004      	b.n	8008b0e <_malloc_r+0x72>
 8008b04:	6863      	ldr	r3, [r4, #4]
 8008b06:	42a2      	cmp	r2, r4
 8008b08:	bf0c      	ite	eq
 8008b0a:	600b      	streq	r3, [r1, #0]
 8008b0c:	6053      	strne	r3, [r2, #4]
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f000 fa02 	bl	8008f18 <__malloc_unlock>
 8008b14:	f104 000b 	add.w	r0, r4, #11
 8008b18:	1d23      	adds	r3, r4, #4
 8008b1a:	f020 0007 	bic.w	r0, r0, #7
 8008b1e:	1ac2      	subs	r2, r0, r3
 8008b20:	d0cc      	beq.n	8008abc <_malloc_r+0x20>
 8008b22:	1a1b      	subs	r3, r3, r0
 8008b24:	50a3      	str	r3, [r4, r2]
 8008b26:	e7c9      	b.n	8008abc <_malloc_r+0x20>
 8008b28:	4622      	mov	r2, r4
 8008b2a:	6864      	ldr	r4, [r4, #4]
 8008b2c:	e7cc      	b.n	8008ac8 <_malloc_r+0x2c>
 8008b2e:	1cc4      	adds	r4, r0, #3
 8008b30:	f024 0403 	bic.w	r4, r4, #3
 8008b34:	42a0      	cmp	r0, r4
 8008b36:	d0e3      	beq.n	8008b00 <_malloc_r+0x64>
 8008b38:	1a21      	subs	r1, r4, r0
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f000 f96c 	bl	8008e18 <_sbrk_r>
 8008b40:	3001      	adds	r0, #1
 8008b42:	d1dd      	bne.n	8008b00 <_malloc_r+0x64>
 8008b44:	e7cf      	b.n	8008ae6 <_malloc_r+0x4a>
 8008b46:	bf00      	nop
 8008b48:	200004ac 	.word	0x200004ac
 8008b4c:	200004b0 	.word	0x200004b0

08008b50 <__ssputs_r>:
 8008b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b54:	688e      	ldr	r6, [r1, #8]
 8008b56:	429e      	cmp	r6, r3
 8008b58:	4682      	mov	sl, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	4690      	mov	r8, r2
 8008b5e:	461f      	mov	r7, r3
 8008b60:	d838      	bhi.n	8008bd4 <__ssputs_r+0x84>
 8008b62:	898a      	ldrh	r2, [r1, #12]
 8008b64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b68:	d032      	beq.n	8008bd0 <__ssputs_r+0x80>
 8008b6a:	6825      	ldr	r5, [r4, #0]
 8008b6c:	6909      	ldr	r1, [r1, #16]
 8008b6e:	eba5 0901 	sub.w	r9, r5, r1
 8008b72:	6965      	ldr	r5, [r4, #20]
 8008b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	444b      	add	r3, r9
 8008b80:	106d      	asrs	r5, r5, #1
 8008b82:	429d      	cmp	r5, r3
 8008b84:	bf38      	it	cc
 8008b86:	461d      	movcc	r5, r3
 8008b88:	0553      	lsls	r3, r2, #21
 8008b8a:	d531      	bpl.n	8008bf0 <__ssputs_r+0xa0>
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	f7ff ff85 	bl	8008a9c <_malloc_r>
 8008b92:	4606      	mov	r6, r0
 8008b94:	b950      	cbnz	r0, 8008bac <__ssputs_r+0x5c>
 8008b96:	230c      	movs	r3, #12
 8008b98:	f8ca 3000 	str.w	r3, [sl]
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba2:	81a3      	strh	r3, [r4, #12]
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bac:	6921      	ldr	r1, [r4, #16]
 8008bae:	464a      	mov	r2, r9
 8008bb0:	f7ff fa4c 	bl	800804c <memcpy>
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbe:	81a3      	strh	r3, [r4, #12]
 8008bc0:	6126      	str	r6, [r4, #16]
 8008bc2:	6165      	str	r5, [r4, #20]
 8008bc4:	444e      	add	r6, r9
 8008bc6:	eba5 0509 	sub.w	r5, r5, r9
 8008bca:	6026      	str	r6, [r4, #0]
 8008bcc:	60a5      	str	r5, [r4, #8]
 8008bce:	463e      	mov	r6, r7
 8008bd0:	42be      	cmp	r6, r7
 8008bd2:	d900      	bls.n	8008bd6 <__ssputs_r+0x86>
 8008bd4:	463e      	mov	r6, r7
 8008bd6:	4632      	mov	r2, r6
 8008bd8:	6820      	ldr	r0, [r4, #0]
 8008bda:	4641      	mov	r1, r8
 8008bdc:	f000 f97c 	bl	8008ed8 <memmove>
 8008be0:	68a3      	ldr	r3, [r4, #8]
 8008be2:	6822      	ldr	r2, [r4, #0]
 8008be4:	1b9b      	subs	r3, r3, r6
 8008be6:	4432      	add	r2, r6
 8008be8:	60a3      	str	r3, [r4, #8]
 8008bea:	6022      	str	r2, [r4, #0]
 8008bec:	2000      	movs	r0, #0
 8008bee:	e7db      	b.n	8008ba8 <__ssputs_r+0x58>
 8008bf0:	462a      	mov	r2, r5
 8008bf2:	f000 f997 	bl	8008f24 <_realloc_r>
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d1e1      	bne.n	8008bc0 <__ssputs_r+0x70>
 8008bfc:	6921      	ldr	r1, [r4, #16]
 8008bfe:	4650      	mov	r0, sl
 8008c00:	f7ff fefc 	bl	80089fc <_free_r>
 8008c04:	e7c7      	b.n	8008b96 <__ssputs_r+0x46>
	...

08008c08 <_svfiprintf_r>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	4698      	mov	r8, r3
 8008c0e:	898b      	ldrh	r3, [r1, #12]
 8008c10:	061b      	lsls	r3, r3, #24
 8008c12:	b09d      	sub	sp, #116	; 0x74
 8008c14:	4607      	mov	r7, r0
 8008c16:	460d      	mov	r5, r1
 8008c18:	4614      	mov	r4, r2
 8008c1a:	d50e      	bpl.n	8008c3a <_svfiprintf_r+0x32>
 8008c1c:	690b      	ldr	r3, [r1, #16]
 8008c1e:	b963      	cbnz	r3, 8008c3a <_svfiprintf_r+0x32>
 8008c20:	2140      	movs	r1, #64	; 0x40
 8008c22:	f7ff ff3b 	bl	8008a9c <_malloc_r>
 8008c26:	6028      	str	r0, [r5, #0]
 8008c28:	6128      	str	r0, [r5, #16]
 8008c2a:	b920      	cbnz	r0, 8008c36 <_svfiprintf_r+0x2e>
 8008c2c:	230c      	movs	r3, #12
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	e0d1      	b.n	8008dda <_svfiprintf_r+0x1d2>
 8008c36:	2340      	movs	r3, #64	; 0x40
 8008c38:	616b      	str	r3, [r5, #20]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c3e:	2320      	movs	r3, #32
 8008c40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c48:	2330      	movs	r3, #48	; 0x30
 8008c4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008df4 <_svfiprintf_r+0x1ec>
 8008c4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c52:	f04f 0901 	mov.w	r9, #1
 8008c56:	4623      	mov	r3, r4
 8008c58:	469a      	mov	sl, r3
 8008c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c5e:	b10a      	cbz	r2, 8008c64 <_svfiprintf_r+0x5c>
 8008c60:	2a25      	cmp	r2, #37	; 0x25
 8008c62:	d1f9      	bne.n	8008c58 <_svfiprintf_r+0x50>
 8008c64:	ebba 0b04 	subs.w	fp, sl, r4
 8008c68:	d00b      	beq.n	8008c82 <_svfiprintf_r+0x7a>
 8008c6a:	465b      	mov	r3, fp
 8008c6c:	4622      	mov	r2, r4
 8008c6e:	4629      	mov	r1, r5
 8008c70:	4638      	mov	r0, r7
 8008c72:	f7ff ff6d 	bl	8008b50 <__ssputs_r>
 8008c76:	3001      	adds	r0, #1
 8008c78:	f000 80aa 	beq.w	8008dd0 <_svfiprintf_r+0x1c8>
 8008c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c7e:	445a      	add	r2, fp
 8008c80:	9209      	str	r2, [sp, #36]	; 0x24
 8008c82:	f89a 3000 	ldrb.w	r3, [sl]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80a2 	beq.w	8008dd0 <_svfiprintf_r+0x1c8>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c96:	f10a 0a01 	add.w	sl, sl, #1
 8008c9a:	9304      	str	r3, [sp, #16]
 8008c9c:	9307      	str	r3, [sp, #28]
 8008c9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ca4:	4654      	mov	r4, sl
 8008ca6:	2205      	movs	r2, #5
 8008ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cac:	4851      	ldr	r0, [pc, #324]	; (8008df4 <_svfiprintf_r+0x1ec>)
 8008cae:	f7f7 fab7 	bl	8000220 <memchr>
 8008cb2:	9a04      	ldr	r2, [sp, #16]
 8008cb4:	b9d8      	cbnz	r0, 8008cee <_svfiprintf_r+0xe6>
 8008cb6:	06d0      	lsls	r0, r2, #27
 8008cb8:	bf44      	itt	mi
 8008cba:	2320      	movmi	r3, #32
 8008cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cc0:	0711      	lsls	r1, r2, #28
 8008cc2:	bf44      	itt	mi
 8008cc4:	232b      	movmi	r3, #43	; 0x2b
 8008cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cca:	f89a 3000 	ldrb.w	r3, [sl]
 8008cce:	2b2a      	cmp	r3, #42	; 0x2a
 8008cd0:	d015      	beq.n	8008cfe <_svfiprintf_r+0xf6>
 8008cd2:	9a07      	ldr	r2, [sp, #28]
 8008cd4:	4654      	mov	r4, sl
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	f04f 0c0a 	mov.w	ip, #10
 8008cdc:	4621      	mov	r1, r4
 8008cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ce2:	3b30      	subs	r3, #48	; 0x30
 8008ce4:	2b09      	cmp	r3, #9
 8008ce6:	d94e      	bls.n	8008d86 <_svfiprintf_r+0x17e>
 8008ce8:	b1b0      	cbz	r0, 8008d18 <_svfiprintf_r+0x110>
 8008cea:	9207      	str	r2, [sp, #28]
 8008cec:	e014      	b.n	8008d18 <_svfiprintf_r+0x110>
 8008cee:	eba0 0308 	sub.w	r3, r0, r8
 8008cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	46a2      	mov	sl, r4
 8008cfc:	e7d2      	b.n	8008ca4 <_svfiprintf_r+0x9c>
 8008cfe:	9b03      	ldr	r3, [sp, #12]
 8008d00:	1d19      	adds	r1, r3, #4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	9103      	str	r1, [sp, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	bfbb      	ittet	lt
 8008d0a:	425b      	neglt	r3, r3
 8008d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d10:	9307      	strge	r3, [sp, #28]
 8008d12:	9307      	strlt	r3, [sp, #28]
 8008d14:	bfb8      	it	lt
 8008d16:	9204      	strlt	r2, [sp, #16]
 8008d18:	7823      	ldrb	r3, [r4, #0]
 8008d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d1c:	d10c      	bne.n	8008d38 <_svfiprintf_r+0x130>
 8008d1e:	7863      	ldrb	r3, [r4, #1]
 8008d20:	2b2a      	cmp	r3, #42	; 0x2a
 8008d22:	d135      	bne.n	8008d90 <_svfiprintf_r+0x188>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	1d1a      	adds	r2, r3, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	9203      	str	r2, [sp, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bfb8      	it	lt
 8008d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d34:	3402      	adds	r4, #2
 8008d36:	9305      	str	r3, [sp, #20]
 8008d38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e04 <_svfiprintf_r+0x1fc>
 8008d3c:	7821      	ldrb	r1, [r4, #0]
 8008d3e:	2203      	movs	r2, #3
 8008d40:	4650      	mov	r0, sl
 8008d42:	f7f7 fa6d 	bl	8000220 <memchr>
 8008d46:	b140      	cbz	r0, 8008d5a <_svfiprintf_r+0x152>
 8008d48:	2340      	movs	r3, #64	; 0x40
 8008d4a:	eba0 000a 	sub.w	r0, r0, sl
 8008d4e:	fa03 f000 	lsl.w	r0, r3, r0
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	4303      	orrs	r3, r0
 8008d56:	3401      	adds	r4, #1
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5e:	4826      	ldr	r0, [pc, #152]	; (8008df8 <_svfiprintf_r+0x1f0>)
 8008d60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d64:	2206      	movs	r2, #6
 8008d66:	f7f7 fa5b 	bl	8000220 <memchr>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d038      	beq.n	8008de0 <_svfiprintf_r+0x1d8>
 8008d6e:	4b23      	ldr	r3, [pc, #140]	; (8008dfc <_svfiprintf_r+0x1f4>)
 8008d70:	bb1b      	cbnz	r3, 8008dba <_svfiprintf_r+0x1b2>
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	3307      	adds	r3, #7
 8008d76:	f023 0307 	bic.w	r3, r3, #7
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	9303      	str	r3, [sp, #12]
 8008d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d80:	4433      	add	r3, r6
 8008d82:	9309      	str	r3, [sp, #36]	; 0x24
 8008d84:	e767      	b.n	8008c56 <_svfiprintf_r+0x4e>
 8008d86:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	2001      	movs	r0, #1
 8008d8e:	e7a5      	b.n	8008cdc <_svfiprintf_r+0xd4>
 8008d90:	2300      	movs	r3, #0
 8008d92:	3401      	adds	r4, #1
 8008d94:	9305      	str	r3, [sp, #20]
 8008d96:	4619      	mov	r1, r3
 8008d98:	f04f 0c0a 	mov.w	ip, #10
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008da2:	3a30      	subs	r2, #48	; 0x30
 8008da4:	2a09      	cmp	r2, #9
 8008da6:	d903      	bls.n	8008db0 <_svfiprintf_r+0x1a8>
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d0c5      	beq.n	8008d38 <_svfiprintf_r+0x130>
 8008dac:	9105      	str	r1, [sp, #20]
 8008dae:	e7c3      	b.n	8008d38 <_svfiprintf_r+0x130>
 8008db0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008db4:	4604      	mov	r4, r0
 8008db6:	2301      	movs	r3, #1
 8008db8:	e7f0      	b.n	8008d9c <_svfiprintf_r+0x194>
 8008dba:	ab03      	add	r3, sp, #12
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	462a      	mov	r2, r5
 8008dc0:	4b0f      	ldr	r3, [pc, #60]	; (8008e00 <_svfiprintf_r+0x1f8>)
 8008dc2:	a904      	add	r1, sp, #16
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	f7fc fa87 	bl	80052d8 <_printf_float>
 8008dca:	1c42      	adds	r2, r0, #1
 8008dcc:	4606      	mov	r6, r0
 8008dce:	d1d6      	bne.n	8008d7e <_svfiprintf_r+0x176>
 8008dd0:	89ab      	ldrh	r3, [r5, #12]
 8008dd2:	065b      	lsls	r3, r3, #25
 8008dd4:	f53f af2c 	bmi.w	8008c30 <_svfiprintf_r+0x28>
 8008dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dda:	b01d      	add	sp, #116	; 0x74
 8008ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de0:	ab03      	add	r3, sp, #12
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	462a      	mov	r2, r5
 8008de6:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <_svfiprintf_r+0x1f8>)
 8008de8:	a904      	add	r1, sp, #16
 8008dea:	4638      	mov	r0, r7
 8008dec:	f7fc fd18 	bl	8005820 <_printf_i>
 8008df0:	e7eb      	b.n	8008dca <_svfiprintf_r+0x1c2>
 8008df2:	bf00      	nop
 8008df4:	08009e2c 	.word	0x08009e2c
 8008df8:	08009e36 	.word	0x08009e36
 8008dfc:	080052d9 	.word	0x080052d9
 8008e00:	08008b51 	.word	0x08008b51
 8008e04:	08009e32 	.word	0x08009e32

08008e08 <nan>:
 8008e08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008e10 <nan+0x8>
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	00000000 	.word	0x00000000
 8008e14:	7ff80000 	.word	0x7ff80000

08008e18 <_sbrk_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d06      	ldr	r5, [pc, #24]	; (8008e34 <_sbrk_r+0x1c>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	602b      	str	r3, [r5, #0]
 8008e24:	f7f9 f882 	bl	8001f2c <_sbrk>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_sbrk_r+0x1a>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_sbrk_r+0x1a>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	200004b8 	.word	0x200004b8

08008e38 <strncmp>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	b16a      	cbz	r2, 8008e58 <strncmp+0x20>
 8008e3c:	3901      	subs	r1, #1
 8008e3e:	1884      	adds	r4, r0, r2
 8008e40:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008e44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d103      	bne.n	8008e54 <strncmp+0x1c>
 8008e4c:	42a0      	cmp	r0, r4
 8008e4e:	d001      	beq.n	8008e54 <strncmp+0x1c>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1f5      	bne.n	8008e40 <strncmp+0x8>
 8008e54:	1a98      	subs	r0, r3, r2
 8008e56:	bd10      	pop	{r4, pc}
 8008e58:	4610      	mov	r0, r2
 8008e5a:	e7fc      	b.n	8008e56 <strncmp+0x1e>

08008e5c <__ascii_wctomb>:
 8008e5c:	b149      	cbz	r1, 8008e72 <__ascii_wctomb+0x16>
 8008e5e:	2aff      	cmp	r2, #255	; 0xff
 8008e60:	bf85      	ittet	hi
 8008e62:	238a      	movhi	r3, #138	; 0x8a
 8008e64:	6003      	strhi	r3, [r0, #0]
 8008e66:	700a      	strbls	r2, [r1, #0]
 8008e68:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e6c:	bf98      	it	ls
 8008e6e:	2001      	movls	r0, #1
 8008e70:	4770      	bx	lr
 8008e72:	4608      	mov	r0, r1
 8008e74:	4770      	bx	lr
	...

08008e78 <__assert_func>:
 8008e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <__assert_func+0x2c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4605      	mov	r5, r0
 8008e84:	68d8      	ldr	r0, [r3, #12]
 8008e86:	b14c      	cbz	r4, 8008e9c <__assert_func+0x24>
 8008e88:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <__assert_func+0x30>)
 8008e8a:	9100      	str	r1, [sp, #0]
 8008e8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e90:	4906      	ldr	r1, [pc, #24]	; (8008eac <__assert_func+0x34>)
 8008e92:	462b      	mov	r3, r5
 8008e94:	f000 f80e 	bl	8008eb4 <fiprintf>
 8008e98:	f000 fa84 	bl	80093a4 <abort>
 8008e9c:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <__assert_func+0x38>)
 8008e9e:	461c      	mov	r4, r3
 8008ea0:	e7f3      	b.n	8008e8a <__assert_func+0x12>
 8008ea2:	bf00      	nop
 8008ea4:	2000000c 	.word	0x2000000c
 8008ea8:	08009e3d 	.word	0x08009e3d
 8008eac:	08009e4a 	.word	0x08009e4a
 8008eb0:	08009e78 	.word	0x08009e78

08008eb4 <fiprintf>:
 8008eb4:	b40e      	push	{r1, r2, r3}
 8008eb6:	b503      	push	{r0, r1, lr}
 8008eb8:	4601      	mov	r1, r0
 8008eba:	ab03      	add	r3, sp, #12
 8008ebc:	4805      	ldr	r0, [pc, #20]	; (8008ed4 <fiprintf+0x20>)
 8008ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec2:	6800      	ldr	r0, [r0, #0]
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	f000 f87d 	bl	8008fc4 <_vfiprintf_r>
 8008eca:	b002      	add	sp, #8
 8008ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ed0:	b003      	add	sp, #12
 8008ed2:	4770      	bx	lr
 8008ed4:	2000000c 	.word	0x2000000c

08008ed8 <memmove>:
 8008ed8:	4288      	cmp	r0, r1
 8008eda:	b510      	push	{r4, lr}
 8008edc:	eb01 0402 	add.w	r4, r1, r2
 8008ee0:	d902      	bls.n	8008ee8 <memmove+0x10>
 8008ee2:	4284      	cmp	r4, r0
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	d807      	bhi.n	8008ef8 <memmove+0x20>
 8008ee8:	1e43      	subs	r3, r0, #1
 8008eea:	42a1      	cmp	r1, r4
 8008eec:	d008      	beq.n	8008f00 <memmove+0x28>
 8008eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ef6:	e7f8      	b.n	8008eea <memmove+0x12>
 8008ef8:	4402      	add	r2, r0
 8008efa:	4601      	mov	r1, r0
 8008efc:	428a      	cmp	r2, r1
 8008efe:	d100      	bne.n	8008f02 <memmove+0x2a>
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f0a:	e7f7      	b.n	8008efc <memmove+0x24>

08008f0c <__malloc_lock>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	; (8008f14 <__malloc_lock+0x8>)
 8008f0e:	f000 bc09 	b.w	8009724 <__retarget_lock_acquire_recursive>
 8008f12:	bf00      	nop
 8008f14:	200004c0 	.word	0x200004c0

08008f18 <__malloc_unlock>:
 8008f18:	4801      	ldr	r0, [pc, #4]	; (8008f20 <__malloc_unlock+0x8>)
 8008f1a:	f000 bc04 	b.w	8009726 <__retarget_lock_release_recursive>
 8008f1e:	bf00      	nop
 8008f20:	200004c0 	.word	0x200004c0

08008f24 <_realloc_r>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	4607      	mov	r7, r0
 8008f28:	4614      	mov	r4, r2
 8008f2a:	460e      	mov	r6, r1
 8008f2c:	b921      	cbnz	r1, 8008f38 <_realloc_r+0x14>
 8008f2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f32:	4611      	mov	r1, r2
 8008f34:	f7ff bdb2 	b.w	8008a9c <_malloc_r>
 8008f38:	b922      	cbnz	r2, 8008f44 <_realloc_r+0x20>
 8008f3a:	f7ff fd5f 	bl	80089fc <_free_r>
 8008f3e:	4625      	mov	r5, r4
 8008f40:	4628      	mov	r0, r5
 8008f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f44:	f000 fc54 	bl	80097f0 <_malloc_usable_size_r>
 8008f48:	42a0      	cmp	r0, r4
 8008f4a:	d20f      	bcs.n	8008f6c <_realloc_r+0x48>
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	4638      	mov	r0, r7
 8008f50:	f7ff fda4 	bl	8008a9c <_malloc_r>
 8008f54:	4605      	mov	r5, r0
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d0f2      	beq.n	8008f40 <_realloc_r+0x1c>
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	f7ff f875 	bl	800804c <memcpy>
 8008f62:	4631      	mov	r1, r6
 8008f64:	4638      	mov	r0, r7
 8008f66:	f7ff fd49 	bl	80089fc <_free_r>
 8008f6a:	e7e9      	b.n	8008f40 <_realloc_r+0x1c>
 8008f6c:	4635      	mov	r5, r6
 8008f6e:	e7e7      	b.n	8008f40 <_realloc_r+0x1c>

08008f70 <__sfputc_r>:
 8008f70:	6893      	ldr	r3, [r2, #8]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	b410      	push	{r4}
 8008f78:	6093      	str	r3, [r2, #8]
 8008f7a:	da08      	bge.n	8008f8e <__sfputc_r+0x1e>
 8008f7c:	6994      	ldr	r4, [r2, #24]
 8008f7e:	42a3      	cmp	r3, r4
 8008f80:	db01      	blt.n	8008f86 <__sfputc_r+0x16>
 8008f82:	290a      	cmp	r1, #10
 8008f84:	d103      	bne.n	8008f8e <__sfputc_r+0x1e>
 8008f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f8a:	f000 b94b 	b.w	8009224 <__swbuf_r>
 8008f8e:	6813      	ldr	r3, [r2, #0]
 8008f90:	1c58      	adds	r0, r3, #1
 8008f92:	6010      	str	r0, [r2, #0]
 8008f94:	7019      	strb	r1, [r3, #0]
 8008f96:	4608      	mov	r0, r1
 8008f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <__sfputs_r>:
 8008f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	460f      	mov	r7, r1
 8008fa4:	4614      	mov	r4, r2
 8008fa6:	18d5      	adds	r5, r2, r3
 8008fa8:	42ac      	cmp	r4, r5
 8008faa:	d101      	bne.n	8008fb0 <__sfputs_r+0x12>
 8008fac:	2000      	movs	r0, #0
 8008fae:	e007      	b.n	8008fc0 <__sfputs_r+0x22>
 8008fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb4:	463a      	mov	r2, r7
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7ff ffda 	bl	8008f70 <__sfputc_r>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d1f3      	bne.n	8008fa8 <__sfputs_r+0xa>
 8008fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fc4 <_vfiprintf_r>:
 8008fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc8:	460d      	mov	r5, r1
 8008fca:	b09d      	sub	sp, #116	; 0x74
 8008fcc:	4614      	mov	r4, r2
 8008fce:	4698      	mov	r8, r3
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	b118      	cbz	r0, 8008fdc <_vfiprintf_r+0x18>
 8008fd4:	6983      	ldr	r3, [r0, #24]
 8008fd6:	b90b      	cbnz	r3, 8008fdc <_vfiprintf_r+0x18>
 8008fd8:	f000 fb06 	bl	80095e8 <__sinit>
 8008fdc:	4b89      	ldr	r3, [pc, #548]	; (8009204 <_vfiprintf_r+0x240>)
 8008fde:	429d      	cmp	r5, r3
 8008fe0:	d11b      	bne.n	800901a <_vfiprintf_r+0x56>
 8008fe2:	6875      	ldr	r5, [r6, #4]
 8008fe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fe6:	07d9      	lsls	r1, r3, #31
 8008fe8:	d405      	bmi.n	8008ff6 <_vfiprintf_r+0x32>
 8008fea:	89ab      	ldrh	r3, [r5, #12]
 8008fec:	059a      	lsls	r2, r3, #22
 8008fee:	d402      	bmi.n	8008ff6 <_vfiprintf_r+0x32>
 8008ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ff2:	f000 fb97 	bl	8009724 <__retarget_lock_acquire_recursive>
 8008ff6:	89ab      	ldrh	r3, [r5, #12]
 8008ff8:	071b      	lsls	r3, r3, #28
 8008ffa:	d501      	bpl.n	8009000 <_vfiprintf_r+0x3c>
 8008ffc:	692b      	ldr	r3, [r5, #16]
 8008ffe:	b9eb      	cbnz	r3, 800903c <_vfiprintf_r+0x78>
 8009000:	4629      	mov	r1, r5
 8009002:	4630      	mov	r0, r6
 8009004:	f000 f960 	bl	80092c8 <__swsetup_r>
 8009008:	b1c0      	cbz	r0, 800903c <_vfiprintf_r+0x78>
 800900a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800900c:	07dc      	lsls	r4, r3, #31
 800900e:	d50e      	bpl.n	800902e <_vfiprintf_r+0x6a>
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	b01d      	add	sp, #116	; 0x74
 8009016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901a:	4b7b      	ldr	r3, [pc, #492]	; (8009208 <_vfiprintf_r+0x244>)
 800901c:	429d      	cmp	r5, r3
 800901e:	d101      	bne.n	8009024 <_vfiprintf_r+0x60>
 8009020:	68b5      	ldr	r5, [r6, #8]
 8009022:	e7df      	b.n	8008fe4 <_vfiprintf_r+0x20>
 8009024:	4b79      	ldr	r3, [pc, #484]	; (800920c <_vfiprintf_r+0x248>)
 8009026:	429d      	cmp	r5, r3
 8009028:	bf08      	it	eq
 800902a:	68f5      	ldreq	r5, [r6, #12]
 800902c:	e7da      	b.n	8008fe4 <_vfiprintf_r+0x20>
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	0598      	lsls	r0, r3, #22
 8009032:	d4ed      	bmi.n	8009010 <_vfiprintf_r+0x4c>
 8009034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009036:	f000 fb76 	bl	8009726 <__retarget_lock_release_recursive>
 800903a:	e7e9      	b.n	8009010 <_vfiprintf_r+0x4c>
 800903c:	2300      	movs	r3, #0
 800903e:	9309      	str	r3, [sp, #36]	; 0x24
 8009040:	2320      	movs	r3, #32
 8009042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009046:	f8cd 800c 	str.w	r8, [sp, #12]
 800904a:	2330      	movs	r3, #48	; 0x30
 800904c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009210 <_vfiprintf_r+0x24c>
 8009050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009054:	f04f 0901 	mov.w	r9, #1
 8009058:	4623      	mov	r3, r4
 800905a:	469a      	mov	sl, r3
 800905c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009060:	b10a      	cbz	r2, 8009066 <_vfiprintf_r+0xa2>
 8009062:	2a25      	cmp	r2, #37	; 0x25
 8009064:	d1f9      	bne.n	800905a <_vfiprintf_r+0x96>
 8009066:	ebba 0b04 	subs.w	fp, sl, r4
 800906a:	d00b      	beq.n	8009084 <_vfiprintf_r+0xc0>
 800906c:	465b      	mov	r3, fp
 800906e:	4622      	mov	r2, r4
 8009070:	4629      	mov	r1, r5
 8009072:	4630      	mov	r0, r6
 8009074:	f7ff ff93 	bl	8008f9e <__sfputs_r>
 8009078:	3001      	adds	r0, #1
 800907a:	f000 80aa 	beq.w	80091d2 <_vfiprintf_r+0x20e>
 800907e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009080:	445a      	add	r2, fp
 8009082:	9209      	str	r2, [sp, #36]	; 0x24
 8009084:	f89a 3000 	ldrb.w	r3, [sl]
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 80a2 	beq.w	80091d2 <_vfiprintf_r+0x20e>
 800908e:	2300      	movs	r3, #0
 8009090:	f04f 32ff 	mov.w	r2, #4294967295
 8009094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009098:	f10a 0a01 	add.w	sl, sl, #1
 800909c:	9304      	str	r3, [sp, #16]
 800909e:	9307      	str	r3, [sp, #28]
 80090a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090a4:	931a      	str	r3, [sp, #104]	; 0x68
 80090a6:	4654      	mov	r4, sl
 80090a8:	2205      	movs	r2, #5
 80090aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ae:	4858      	ldr	r0, [pc, #352]	; (8009210 <_vfiprintf_r+0x24c>)
 80090b0:	f7f7 f8b6 	bl	8000220 <memchr>
 80090b4:	9a04      	ldr	r2, [sp, #16]
 80090b6:	b9d8      	cbnz	r0, 80090f0 <_vfiprintf_r+0x12c>
 80090b8:	06d1      	lsls	r1, r2, #27
 80090ba:	bf44      	itt	mi
 80090bc:	2320      	movmi	r3, #32
 80090be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c2:	0713      	lsls	r3, r2, #28
 80090c4:	bf44      	itt	mi
 80090c6:	232b      	movmi	r3, #43	; 0x2b
 80090c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090cc:	f89a 3000 	ldrb.w	r3, [sl]
 80090d0:	2b2a      	cmp	r3, #42	; 0x2a
 80090d2:	d015      	beq.n	8009100 <_vfiprintf_r+0x13c>
 80090d4:	9a07      	ldr	r2, [sp, #28]
 80090d6:	4654      	mov	r4, sl
 80090d8:	2000      	movs	r0, #0
 80090da:	f04f 0c0a 	mov.w	ip, #10
 80090de:	4621      	mov	r1, r4
 80090e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090e4:	3b30      	subs	r3, #48	; 0x30
 80090e6:	2b09      	cmp	r3, #9
 80090e8:	d94e      	bls.n	8009188 <_vfiprintf_r+0x1c4>
 80090ea:	b1b0      	cbz	r0, 800911a <_vfiprintf_r+0x156>
 80090ec:	9207      	str	r2, [sp, #28]
 80090ee:	e014      	b.n	800911a <_vfiprintf_r+0x156>
 80090f0:	eba0 0308 	sub.w	r3, r0, r8
 80090f4:	fa09 f303 	lsl.w	r3, r9, r3
 80090f8:	4313      	orrs	r3, r2
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	46a2      	mov	sl, r4
 80090fe:	e7d2      	b.n	80090a6 <_vfiprintf_r+0xe2>
 8009100:	9b03      	ldr	r3, [sp, #12]
 8009102:	1d19      	adds	r1, r3, #4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	9103      	str	r1, [sp, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfbb      	ittet	lt
 800910c:	425b      	neglt	r3, r3
 800910e:	f042 0202 	orrlt.w	r2, r2, #2
 8009112:	9307      	strge	r3, [sp, #28]
 8009114:	9307      	strlt	r3, [sp, #28]
 8009116:	bfb8      	it	lt
 8009118:	9204      	strlt	r2, [sp, #16]
 800911a:	7823      	ldrb	r3, [r4, #0]
 800911c:	2b2e      	cmp	r3, #46	; 0x2e
 800911e:	d10c      	bne.n	800913a <_vfiprintf_r+0x176>
 8009120:	7863      	ldrb	r3, [r4, #1]
 8009122:	2b2a      	cmp	r3, #42	; 0x2a
 8009124:	d135      	bne.n	8009192 <_vfiprintf_r+0x1ce>
 8009126:	9b03      	ldr	r3, [sp, #12]
 8009128:	1d1a      	adds	r2, r3, #4
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	9203      	str	r2, [sp, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	bfb8      	it	lt
 8009132:	f04f 33ff 	movlt.w	r3, #4294967295
 8009136:	3402      	adds	r4, #2
 8009138:	9305      	str	r3, [sp, #20]
 800913a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009220 <_vfiprintf_r+0x25c>
 800913e:	7821      	ldrb	r1, [r4, #0]
 8009140:	2203      	movs	r2, #3
 8009142:	4650      	mov	r0, sl
 8009144:	f7f7 f86c 	bl	8000220 <memchr>
 8009148:	b140      	cbz	r0, 800915c <_vfiprintf_r+0x198>
 800914a:	2340      	movs	r3, #64	; 0x40
 800914c:	eba0 000a 	sub.w	r0, r0, sl
 8009150:	fa03 f000 	lsl.w	r0, r3, r0
 8009154:	9b04      	ldr	r3, [sp, #16]
 8009156:	4303      	orrs	r3, r0
 8009158:	3401      	adds	r4, #1
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009160:	482c      	ldr	r0, [pc, #176]	; (8009214 <_vfiprintf_r+0x250>)
 8009162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009166:	2206      	movs	r2, #6
 8009168:	f7f7 f85a 	bl	8000220 <memchr>
 800916c:	2800      	cmp	r0, #0
 800916e:	d03f      	beq.n	80091f0 <_vfiprintf_r+0x22c>
 8009170:	4b29      	ldr	r3, [pc, #164]	; (8009218 <_vfiprintf_r+0x254>)
 8009172:	bb1b      	cbnz	r3, 80091bc <_vfiprintf_r+0x1f8>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	3307      	adds	r3, #7
 8009178:	f023 0307 	bic.w	r3, r3, #7
 800917c:	3308      	adds	r3, #8
 800917e:	9303      	str	r3, [sp, #12]
 8009180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009182:	443b      	add	r3, r7
 8009184:	9309      	str	r3, [sp, #36]	; 0x24
 8009186:	e767      	b.n	8009058 <_vfiprintf_r+0x94>
 8009188:	fb0c 3202 	mla	r2, ip, r2, r3
 800918c:	460c      	mov	r4, r1
 800918e:	2001      	movs	r0, #1
 8009190:	e7a5      	b.n	80090de <_vfiprintf_r+0x11a>
 8009192:	2300      	movs	r3, #0
 8009194:	3401      	adds	r4, #1
 8009196:	9305      	str	r3, [sp, #20]
 8009198:	4619      	mov	r1, r3
 800919a:	f04f 0c0a 	mov.w	ip, #10
 800919e:	4620      	mov	r0, r4
 80091a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091a4:	3a30      	subs	r2, #48	; 0x30
 80091a6:	2a09      	cmp	r2, #9
 80091a8:	d903      	bls.n	80091b2 <_vfiprintf_r+0x1ee>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0c5      	beq.n	800913a <_vfiprintf_r+0x176>
 80091ae:	9105      	str	r1, [sp, #20]
 80091b0:	e7c3      	b.n	800913a <_vfiprintf_r+0x176>
 80091b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80091b6:	4604      	mov	r4, r0
 80091b8:	2301      	movs	r3, #1
 80091ba:	e7f0      	b.n	800919e <_vfiprintf_r+0x1da>
 80091bc:	ab03      	add	r3, sp, #12
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	462a      	mov	r2, r5
 80091c2:	4b16      	ldr	r3, [pc, #88]	; (800921c <_vfiprintf_r+0x258>)
 80091c4:	a904      	add	r1, sp, #16
 80091c6:	4630      	mov	r0, r6
 80091c8:	f7fc f886 	bl	80052d8 <_printf_float>
 80091cc:	4607      	mov	r7, r0
 80091ce:	1c78      	adds	r0, r7, #1
 80091d0:	d1d6      	bne.n	8009180 <_vfiprintf_r+0x1bc>
 80091d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091d4:	07d9      	lsls	r1, r3, #31
 80091d6:	d405      	bmi.n	80091e4 <_vfiprintf_r+0x220>
 80091d8:	89ab      	ldrh	r3, [r5, #12]
 80091da:	059a      	lsls	r2, r3, #22
 80091dc:	d402      	bmi.n	80091e4 <_vfiprintf_r+0x220>
 80091de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091e0:	f000 faa1 	bl	8009726 <__retarget_lock_release_recursive>
 80091e4:	89ab      	ldrh	r3, [r5, #12]
 80091e6:	065b      	lsls	r3, r3, #25
 80091e8:	f53f af12 	bmi.w	8009010 <_vfiprintf_r+0x4c>
 80091ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ee:	e711      	b.n	8009014 <_vfiprintf_r+0x50>
 80091f0:	ab03      	add	r3, sp, #12
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	462a      	mov	r2, r5
 80091f6:	4b09      	ldr	r3, [pc, #36]	; (800921c <_vfiprintf_r+0x258>)
 80091f8:	a904      	add	r1, sp, #16
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7fc fb10 	bl	8005820 <_printf_i>
 8009200:	e7e4      	b.n	80091cc <_vfiprintf_r+0x208>
 8009202:	bf00      	nop
 8009204:	08009e9c 	.word	0x08009e9c
 8009208:	08009ebc 	.word	0x08009ebc
 800920c:	08009e7c 	.word	0x08009e7c
 8009210:	08009e2c 	.word	0x08009e2c
 8009214:	08009e36 	.word	0x08009e36
 8009218:	080052d9 	.word	0x080052d9
 800921c:	08008f9f 	.word	0x08008f9f
 8009220:	08009e32 	.word	0x08009e32

08009224 <__swbuf_r>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	460e      	mov	r6, r1
 8009228:	4614      	mov	r4, r2
 800922a:	4605      	mov	r5, r0
 800922c:	b118      	cbz	r0, 8009236 <__swbuf_r+0x12>
 800922e:	6983      	ldr	r3, [r0, #24]
 8009230:	b90b      	cbnz	r3, 8009236 <__swbuf_r+0x12>
 8009232:	f000 f9d9 	bl	80095e8 <__sinit>
 8009236:	4b21      	ldr	r3, [pc, #132]	; (80092bc <__swbuf_r+0x98>)
 8009238:	429c      	cmp	r4, r3
 800923a:	d12b      	bne.n	8009294 <__swbuf_r+0x70>
 800923c:	686c      	ldr	r4, [r5, #4]
 800923e:	69a3      	ldr	r3, [r4, #24]
 8009240:	60a3      	str	r3, [r4, #8]
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	071a      	lsls	r2, r3, #28
 8009246:	d52f      	bpl.n	80092a8 <__swbuf_r+0x84>
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	b36b      	cbz	r3, 80092a8 <__swbuf_r+0x84>
 800924c:	6923      	ldr	r3, [r4, #16]
 800924e:	6820      	ldr	r0, [r4, #0]
 8009250:	1ac0      	subs	r0, r0, r3
 8009252:	6963      	ldr	r3, [r4, #20]
 8009254:	b2f6      	uxtb	r6, r6
 8009256:	4283      	cmp	r3, r0
 8009258:	4637      	mov	r7, r6
 800925a:	dc04      	bgt.n	8009266 <__swbuf_r+0x42>
 800925c:	4621      	mov	r1, r4
 800925e:	4628      	mov	r0, r5
 8009260:	f000 f92e 	bl	80094c0 <_fflush_r>
 8009264:	bb30      	cbnz	r0, 80092b4 <__swbuf_r+0x90>
 8009266:	68a3      	ldr	r3, [r4, #8]
 8009268:	3b01      	subs	r3, #1
 800926a:	60a3      	str	r3, [r4, #8]
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	6022      	str	r2, [r4, #0]
 8009272:	701e      	strb	r6, [r3, #0]
 8009274:	6963      	ldr	r3, [r4, #20]
 8009276:	3001      	adds	r0, #1
 8009278:	4283      	cmp	r3, r0
 800927a:	d004      	beq.n	8009286 <__swbuf_r+0x62>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	07db      	lsls	r3, r3, #31
 8009280:	d506      	bpl.n	8009290 <__swbuf_r+0x6c>
 8009282:	2e0a      	cmp	r6, #10
 8009284:	d104      	bne.n	8009290 <__swbuf_r+0x6c>
 8009286:	4621      	mov	r1, r4
 8009288:	4628      	mov	r0, r5
 800928a:	f000 f919 	bl	80094c0 <_fflush_r>
 800928e:	b988      	cbnz	r0, 80092b4 <__swbuf_r+0x90>
 8009290:	4638      	mov	r0, r7
 8009292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009294:	4b0a      	ldr	r3, [pc, #40]	; (80092c0 <__swbuf_r+0x9c>)
 8009296:	429c      	cmp	r4, r3
 8009298:	d101      	bne.n	800929e <__swbuf_r+0x7a>
 800929a:	68ac      	ldr	r4, [r5, #8]
 800929c:	e7cf      	b.n	800923e <__swbuf_r+0x1a>
 800929e:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <__swbuf_r+0xa0>)
 80092a0:	429c      	cmp	r4, r3
 80092a2:	bf08      	it	eq
 80092a4:	68ec      	ldreq	r4, [r5, #12]
 80092a6:	e7ca      	b.n	800923e <__swbuf_r+0x1a>
 80092a8:	4621      	mov	r1, r4
 80092aa:	4628      	mov	r0, r5
 80092ac:	f000 f80c 	bl	80092c8 <__swsetup_r>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d0cb      	beq.n	800924c <__swbuf_r+0x28>
 80092b4:	f04f 37ff 	mov.w	r7, #4294967295
 80092b8:	e7ea      	b.n	8009290 <__swbuf_r+0x6c>
 80092ba:	bf00      	nop
 80092bc:	08009e9c 	.word	0x08009e9c
 80092c0:	08009ebc 	.word	0x08009ebc
 80092c4:	08009e7c 	.word	0x08009e7c

080092c8 <__swsetup_r>:
 80092c8:	4b32      	ldr	r3, [pc, #200]	; (8009394 <__swsetup_r+0xcc>)
 80092ca:	b570      	push	{r4, r5, r6, lr}
 80092cc:	681d      	ldr	r5, [r3, #0]
 80092ce:	4606      	mov	r6, r0
 80092d0:	460c      	mov	r4, r1
 80092d2:	b125      	cbz	r5, 80092de <__swsetup_r+0x16>
 80092d4:	69ab      	ldr	r3, [r5, #24]
 80092d6:	b913      	cbnz	r3, 80092de <__swsetup_r+0x16>
 80092d8:	4628      	mov	r0, r5
 80092da:	f000 f985 	bl	80095e8 <__sinit>
 80092de:	4b2e      	ldr	r3, [pc, #184]	; (8009398 <__swsetup_r+0xd0>)
 80092e0:	429c      	cmp	r4, r3
 80092e2:	d10f      	bne.n	8009304 <__swsetup_r+0x3c>
 80092e4:	686c      	ldr	r4, [r5, #4]
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092ec:	0719      	lsls	r1, r3, #28
 80092ee:	d42c      	bmi.n	800934a <__swsetup_r+0x82>
 80092f0:	06dd      	lsls	r5, r3, #27
 80092f2:	d411      	bmi.n	8009318 <__swsetup_r+0x50>
 80092f4:	2309      	movs	r3, #9
 80092f6:	6033      	str	r3, [r6, #0]
 80092f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009302:	e03e      	b.n	8009382 <__swsetup_r+0xba>
 8009304:	4b25      	ldr	r3, [pc, #148]	; (800939c <__swsetup_r+0xd4>)
 8009306:	429c      	cmp	r4, r3
 8009308:	d101      	bne.n	800930e <__swsetup_r+0x46>
 800930a:	68ac      	ldr	r4, [r5, #8]
 800930c:	e7eb      	b.n	80092e6 <__swsetup_r+0x1e>
 800930e:	4b24      	ldr	r3, [pc, #144]	; (80093a0 <__swsetup_r+0xd8>)
 8009310:	429c      	cmp	r4, r3
 8009312:	bf08      	it	eq
 8009314:	68ec      	ldreq	r4, [r5, #12]
 8009316:	e7e6      	b.n	80092e6 <__swsetup_r+0x1e>
 8009318:	0758      	lsls	r0, r3, #29
 800931a:	d512      	bpl.n	8009342 <__swsetup_r+0x7a>
 800931c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800931e:	b141      	cbz	r1, 8009332 <__swsetup_r+0x6a>
 8009320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009324:	4299      	cmp	r1, r3
 8009326:	d002      	beq.n	800932e <__swsetup_r+0x66>
 8009328:	4630      	mov	r0, r6
 800932a:	f7ff fb67 	bl	80089fc <_free_r>
 800932e:	2300      	movs	r3, #0
 8009330:	6363      	str	r3, [r4, #52]	; 0x34
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	2300      	movs	r3, #0
 800933c:	6063      	str	r3, [r4, #4]
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	f043 0308 	orr.w	r3, r3, #8
 8009348:	81a3      	strh	r3, [r4, #12]
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	b94b      	cbnz	r3, 8009362 <__swsetup_r+0x9a>
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009358:	d003      	beq.n	8009362 <__swsetup_r+0x9a>
 800935a:	4621      	mov	r1, r4
 800935c:	4630      	mov	r0, r6
 800935e:	f000 fa07 	bl	8009770 <__smakebuf_r>
 8009362:	89a0      	ldrh	r0, [r4, #12]
 8009364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009368:	f010 0301 	ands.w	r3, r0, #1
 800936c:	d00a      	beq.n	8009384 <__swsetup_r+0xbc>
 800936e:	2300      	movs	r3, #0
 8009370:	60a3      	str	r3, [r4, #8]
 8009372:	6963      	ldr	r3, [r4, #20]
 8009374:	425b      	negs	r3, r3
 8009376:	61a3      	str	r3, [r4, #24]
 8009378:	6923      	ldr	r3, [r4, #16]
 800937a:	b943      	cbnz	r3, 800938e <__swsetup_r+0xc6>
 800937c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009380:	d1ba      	bne.n	80092f8 <__swsetup_r+0x30>
 8009382:	bd70      	pop	{r4, r5, r6, pc}
 8009384:	0781      	lsls	r1, r0, #30
 8009386:	bf58      	it	pl
 8009388:	6963      	ldrpl	r3, [r4, #20]
 800938a:	60a3      	str	r3, [r4, #8]
 800938c:	e7f4      	b.n	8009378 <__swsetup_r+0xb0>
 800938e:	2000      	movs	r0, #0
 8009390:	e7f7      	b.n	8009382 <__swsetup_r+0xba>
 8009392:	bf00      	nop
 8009394:	2000000c 	.word	0x2000000c
 8009398:	08009e9c 	.word	0x08009e9c
 800939c:	08009ebc 	.word	0x08009ebc
 80093a0:	08009e7c 	.word	0x08009e7c

080093a4 <abort>:
 80093a4:	b508      	push	{r3, lr}
 80093a6:	2006      	movs	r0, #6
 80093a8:	f000 fa52 	bl	8009850 <raise>
 80093ac:	2001      	movs	r0, #1
 80093ae:	f7f8 fd45 	bl	8001e3c <_exit>
	...

080093b4 <__sflush_r>:
 80093b4:	898a      	ldrh	r2, [r1, #12]
 80093b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ba:	4605      	mov	r5, r0
 80093bc:	0710      	lsls	r0, r2, #28
 80093be:	460c      	mov	r4, r1
 80093c0:	d458      	bmi.n	8009474 <__sflush_r+0xc0>
 80093c2:	684b      	ldr	r3, [r1, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	dc05      	bgt.n	80093d4 <__sflush_r+0x20>
 80093c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	dc02      	bgt.n	80093d4 <__sflush_r+0x20>
 80093ce:	2000      	movs	r0, #0
 80093d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093d6:	2e00      	cmp	r6, #0
 80093d8:	d0f9      	beq.n	80093ce <__sflush_r+0x1a>
 80093da:	2300      	movs	r3, #0
 80093dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093e0:	682f      	ldr	r7, [r5, #0]
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	d032      	beq.n	800944c <__sflush_r+0x98>
 80093e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	075a      	lsls	r2, r3, #29
 80093ec:	d505      	bpl.n	80093fa <__sflush_r+0x46>
 80093ee:	6863      	ldr	r3, [r4, #4]
 80093f0:	1ac0      	subs	r0, r0, r3
 80093f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093f4:	b10b      	cbz	r3, 80093fa <__sflush_r+0x46>
 80093f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093f8:	1ac0      	subs	r0, r0, r3
 80093fa:	2300      	movs	r3, #0
 80093fc:	4602      	mov	r2, r0
 80093fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009400:	6a21      	ldr	r1, [r4, #32]
 8009402:	4628      	mov	r0, r5
 8009404:	47b0      	blx	r6
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	d106      	bne.n	800941a <__sflush_r+0x66>
 800940c:	6829      	ldr	r1, [r5, #0]
 800940e:	291d      	cmp	r1, #29
 8009410:	d82c      	bhi.n	800946c <__sflush_r+0xb8>
 8009412:	4a2a      	ldr	r2, [pc, #168]	; (80094bc <__sflush_r+0x108>)
 8009414:	40ca      	lsrs	r2, r1
 8009416:	07d6      	lsls	r6, r2, #31
 8009418:	d528      	bpl.n	800946c <__sflush_r+0xb8>
 800941a:	2200      	movs	r2, #0
 800941c:	6062      	str	r2, [r4, #4]
 800941e:	04d9      	lsls	r1, r3, #19
 8009420:	6922      	ldr	r2, [r4, #16]
 8009422:	6022      	str	r2, [r4, #0]
 8009424:	d504      	bpl.n	8009430 <__sflush_r+0x7c>
 8009426:	1c42      	adds	r2, r0, #1
 8009428:	d101      	bne.n	800942e <__sflush_r+0x7a>
 800942a:	682b      	ldr	r3, [r5, #0]
 800942c:	b903      	cbnz	r3, 8009430 <__sflush_r+0x7c>
 800942e:	6560      	str	r0, [r4, #84]	; 0x54
 8009430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009432:	602f      	str	r7, [r5, #0]
 8009434:	2900      	cmp	r1, #0
 8009436:	d0ca      	beq.n	80093ce <__sflush_r+0x1a>
 8009438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800943c:	4299      	cmp	r1, r3
 800943e:	d002      	beq.n	8009446 <__sflush_r+0x92>
 8009440:	4628      	mov	r0, r5
 8009442:	f7ff fadb 	bl	80089fc <_free_r>
 8009446:	2000      	movs	r0, #0
 8009448:	6360      	str	r0, [r4, #52]	; 0x34
 800944a:	e7c1      	b.n	80093d0 <__sflush_r+0x1c>
 800944c:	6a21      	ldr	r1, [r4, #32]
 800944e:	2301      	movs	r3, #1
 8009450:	4628      	mov	r0, r5
 8009452:	47b0      	blx	r6
 8009454:	1c41      	adds	r1, r0, #1
 8009456:	d1c7      	bne.n	80093e8 <__sflush_r+0x34>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0c4      	beq.n	80093e8 <__sflush_r+0x34>
 800945e:	2b1d      	cmp	r3, #29
 8009460:	d001      	beq.n	8009466 <__sflush_r+0xb2>
 8009462:	2b16      	cmp	r3, #22
 8009464:	d101      	bne.n	800946a <__sflush_r+0xb6>
 8009466:	602f      	str	r7, [r5, #0]
 8009468:	e7b1      	b.n	80093ce <__sflush_r+0x1a>
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	e7ad      	b.n	80093d0 <__sflush_r+0x1c>
 8009474:	690f      	ldr	r7, [r1, #16]
 8009476:	2f00      	cmp	r7, #0
 8009478:	d0a9      	beq.n	80093ce <__sflush_r+0x1a>
 800947a:	0793      	lsls	r3, r2, #30
 800947c:	680e      	ldr	r6, [r1, #0]
 800947e:	bf08      	it	eq
 8009480:	694b      	ldreq	r3, [r1, #20]
 8009482:	600f      	str	r7, [r1, #0]
 8009484:	bf18      	it	ne
 8009486:	2300      	movne	r3, #0
 8009488:	eba6 0807 	sub.w	r8, r6, r7
 800948c:	608b      	str	r3, [r1, #8]
 800948e:	f1b8 0f00 	cmp.w	r8, #0
 8009492:	dd9c      	ble.n	80093ce <__sflush_r+0x1a>
 8009494:	6a21      	ldr	r1, [r4, #32]
 8009496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009498:	4643      	mov	r3, r8
 800949a:	463a      	mov	r2, r7
 800949c:	4628      	mov	r0, r5
 800949e:	47b0      	blx	r6
 80094a0:	2800      	cmp	r0, #0
 80094a2:	dc06      	bgt.n	80094b2 <__sflush_r+0xfe>
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094aa:	81a3      	strh	r3, [r4, #12]
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295
 80094b0:	e78e      	b.n	80093d0 <__sflush_r+0x1c>
 80094b2:	4407      	add	r7, r0
 80094b4:	eba8 0800 	sub.w	r8, r8, r0
 80094b8:	e7e9      	b.n	800948e <__sflush_r+0xda>
 80094ba:	bf00      	nop
 80094bc:	20400001 	.word	0x20400001

080094c0 <_fflush_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	690b      	ldr	r3, [r1, #16]
 80094c4:	4605      	mov	r5, r0
 80094c6:	460c      	mov	r4, r1
 80094c8:	b913      	cbnz	r3, 80094d0 <_fflush_r+0x10>
 80094ca:	2500      	movs	r5, #0
 80094cc:	4628      	mov	r0, r5
 80094ce:	bd38      	pop	{r3, r4, r5, pc}
 80094d0:	b118      	cbz	r0, 80094da <_fflush_r+0x1a>
 80094d2:	6983      	ldr	r3, [r0, #24]
 80094d4:	b90b      	cbnz	r3, 80094da <_fflush_r+0x1a>
 80094d6:	f000 f887 	bl	80095e8 <__sinit>
 80094da:	4b14      	ldr	r3, [pc, #80]	; (800952c <_fflush_r+0x6c>)
 80094dc:	429c      	cmp	r4, r3
 80094de:	d11b      	bne.n	8009518 <_fflush_r+0x58>
 80094e0:	686c      	ldr	r4, [r5, #4]
 80094e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d0ef      	beq.n	80094ca <_fflush_r+0xa>
 80094ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094ec:	07d0      	lsls	r0, r2, #31
 80094ee:	d404      	bmi.n	80094fa <_fflush_r+0x3a>
 80094f0:	0599      	lsls	r1, r3, #22
 80094f2:	d402      	bmi.n	80094fa <_fflush_r+0x3a>
 80094f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094f6:	f000 f915 	bl	8009724 <__retarget_lock_acquire_recursive>
 80094fa:	4628      	mov	r0, r5
 80094fc:	4621      	mov	r1, r4
 80094fe:	f7ff ff59 	bl	80093b4 <__sflush_r>
 8009502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009504:	07da      	lsls	r2, r3, #31
 8009506:	4605      	mov	r5, r0
 8009508:	d4e0      	bmi.n	80094cc <_fflush_r+0xc>
 800950a:	89a3      	ldrh	r3, [r4, #12]
 800950c:	059b      	lsls	r3, r3, #22
 800950e:	d4dd      	bmi.n	80094cc <_fflush_r+0xc>
 8009510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009512:	f000 f908 	bl	8009726 <__retarget_lock_release_recursive>
 8009516:	e7d9      	b.n	80094cc <_fflush_r+0xc>
 8009518:	4b05      	ldr	r3, [pc, #20]	; (8009530 <_fflush_r+0x70>)
 800951a:	429c      	cmp	r4, r3
 800951c:	d101      	bne.n	8009522 <_fflush_r+0x62>
 800951e:	68ac      	ldr	r4, [r5, #8]
 8009520:	e7df      	b.n	80094e2 <_fflush_r+0x22>
 8009522:	4b04      	ldr	r3, [pc, #16]	; (8009534 <_fflush_r+0x74>)
 8009524:	429c      	cmp	r4, r3
 8009526:	bf08      	it	eq
 8009528:	68ec      	ldreq	r4, [r5, #12]
 800952a:	e7da      	b.n	80094e2 <_fflush_r+0x22>
 800952c:	08009e9c 	.word	0x08009e9c
 8009530:	08009ebc 	.word	0x08009ebc
 8009534:	08009e7c 	.word	0x08009e7c

08009538 <std>:
 8009538:	2300      	movs	r3, #0
 800953a:	b510      	push	{r4, lr}
 800953c:	4604      	mov	r4, r0
 800953e:	e9c0 3300 	strd	r3, r3, [r0]
 8009542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009546:	6083      	str	r3, [r0, #8]
 8009548:	8181      	strh	r1, [r0, #12]
 800954a:	6643      	str	r3, [r0, #100]	; 0x64
 800954c:	81c2      	strh	r2, [r0, #14]
 800954e:	6183      	str	r3, [r0, #24]
 8009550:	4619      	mov	r1, r3
 8009552:	2208      	movs	r2, #8
 8009554:	305c      	adds	r0, #92	; 0x5c
 8009556:	f7fb fe17 	bl	8005188 <memset>
 800955a:	4b05      	ldr	r3, [pc, #20]	; (8009570 <std+0x38>)
 800955c:	6263      	str	r3, [r4, #36]	; 0x24
 800955e:	4b05      	ldr	r3, [pc, #20]	; (8009574 <std+0x3c>)
 8009560:	62a3      	str	r3, [r4, #40]	; 0x28
 8009562:	4b05      	ldr	r3, [pc, #20]	; (8009578 <std+0x40>)
 8009564:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009566:	4b05      	ldr	r3, [pc, #20]	; (800957c <std+0x44>)
 8009568:	6224      	str	r4, [r4, #32]
 800956a:	6323      	str	r3, [r4, #48]	; 0x30
 800956c:	bd10      	pop	{r4, pc}
 800956e:	bf00      	nop
 8009570:	08009889 	.word	0x08009889
 8009574:	080098ab 	.word	0x080098ab
 8009578:	080098e3 	.word	0x080098e3
 800957c:	08009907 	.word	0x08009907

08009580 <_cleanup_r>:
 8009580:	4901      	ldr	r1, [pc, #4]	; (8009588 <_cleanup_r+0x8>)
 8009582:	f000 b8af 	b.w	80096e4 <_fwalk_reent>
 8009586:	bf00      	nop
 8009588:	080094c1 	.word	0x080094c1

0800958c <__sfmoreglue>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	1e4a      	subs	r2, r1, #1
 8009590:	2568      	movs	r5, #104	; 0x68
 8009592:	4355      	muls	r5, r2
 8009594:	460e      	mov	r6, r1
 8009596:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800959a:	f7ff fa7f 	bl	8008a9c <_malloc_r>
 800959e:	4604      	mov	r4, r0
 80095a0:	b140      	cbz	r0, 80095b4 <__sfmoreglue+0x28>
 80095a2:	2100      	movs	r1, #0
 80095a4:	e9c0 1600 	strd	r1, r6, [r0]
 80095a8:	300c      	adds	r0, #12
 80095aa:	60a0      	str	r0, [r4, #8]
 80095ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095b0:	f7fb fdea 	bl	8005188 <memset>
 80095b4:	4620      	mov	r0, r4
 80095b6:	bd70      	pop	{r4, r5, r6, pc}

080095b8 <__sfp_lock_acquire>:
 80095b8:	4801      	ldr	r0, [pc, #4]	; (80095c0 <__sfp_lock_acquire+0x8>)
 80095ba:	f000 b8b3 	b.w	8009724 <__retarget_lock_acquire_recursive>
 80095be:	bf00      	nop
 80095c0:	200004c4 	.word	0x200004c4

080095c4 <__sfp_lock_release>:
 80095c4:	4801      	ldr	r0, [pc, #4]	; (80095cc <__sfp_lock_release+0x8>)
 80095c6:	f000 b8ae 	b.w	8009726 <__retarget_lock_release_recursive>
 80095ca:	bf00      	nop
 80095cc:	200004c4 	.word	0x200004c4

080095d0 <__sinit_lock_acquire>:
 80095d0:	4801      	ldr	r0, [pc, #4]	; (80095d8 <__sinit_lock_acquire+0x8>)
 80095d2:	f000 b8a7 	b.w	8009724 <__retarget_lock_acquire_recursive>
 80095d6:	bf00      	nop
 80095d8:	200004bf 	.word	0x200004bf

080095dc <__sinit_lock_release>:
 80095dc:	4801      	ldr	r0, [pc, #4]	; (80095e4 <__sinit_lock_release+0x8>)
 80095de:	f000 b8a2 	b.w	8009726 <__retarget_lock_release_recursive>
 80095e2:	bf00      	nop
 80095e4:	200004bf 	.word	0x200004bf

080095e8 <__sinit>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4604      	mov	r4, r0
 80095ec:	f7ff fff0 	bl	80095d0 <__sinit_lock_acquire>
 80095f0:	69a3      	ldr	r3, [r4, #24]
 80095f2:	b11b      	cbz	r3, 80095fc <__sinit+0x14>
 80095f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095f8:	f7ff bff0 	b.w	80095dc <__sinit_lock_release>
 80095fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009600:	6523      	str	r3, [r4, #80]	; 0x50
 8009602:	4b13      	ldr	r3, [pc, #76]	; (8009650 <__sinit+0x68>)
 8009604:	4a13      	ldr	r2, [pc, #76]	; (8009654 <__sinit+0x6c>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	62a2      	str	r2, [r4, #40]	; 0x28
 800960a:	42a3      	cmp	r3, r4
 800960c:	bf04      	itt	eq
 800960e:	2301      	moveq	r3, #1
 8009610:	61a3      	streq	r3, [r4, #24]
 8009612:	4620      	mov	r0, r4
 8009614:	f000 f820 	bl	8009658 <__sfp>
 8009618:	6060      	str	r0, [r4, #4]
 800961a:	4620      	mov	r0, r4
 800961c:	f000 f81c 	bl	8009658 <__sfp>
 8009620:	60a0      	str	r0, [r4, #8]
 8009622:	4620      	mov	r0, r4
 8009624:	f000 f818 	bl	8009658 <__sfp>
 8009628:	2200      	movs	r2, #0
 800962a:	60e0      	str	r0, [r4, #12]
 800962c:	2104      	movs	r1, #4
 800962e:	6860      	ldr	r0, [r4, #4]
 8009630:	f7ff ff82 	bl	8009538 <std>
 8009634:	68a0      	ldr	r0, [r4, #8]
 8009636:	2201      	movs	r2, #1
 8009638:	2109      	movs	r1, #9
 800963a:	f7ff ff7d 	bl	8009538 <std>
 800963e:	68e0      	ldr	r0, [r4, #12]
 8009640:	2202      	movs	r2, #2
 8009642:	2112      	movs	r1, #18
 8009644:	f7ff ff78 	bl	8009538 <std>
 8009648:	2301      	movs	r3, #1
 800964a:	61a3      	str	r3, [r4, #24]
 800964c:	e7d2      	b.n	80095f4 <__sinit+0xc>
 800964e:	bf00      	nop
 8009650:	08009a28 	.word	0x08009a28
 8009654:	08009581 	.word	0x08009581

08009658 <__sfp>:
 8009658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965a:	4607      	mov	r7, r0
 800965c:	f7ff ffac 	bl	80095b8 <__sfp_lock_acquire>
 8009660:	4b1e      	ldr	r3, [pc, #120]	; (80096dc <__sfp+0x84>)
 8009662:	681e      	ldr	r6, [r3, #0]
 8009664:	69b3      	ldr	r3, [r6, #24]
 8009666:	b913      	cbnz	r3, 800966e <__sfp+0x16>
 8009668:	4630      	mov	r0, r6
 800966a:	f7ff ffbd 	bl	80095e8 <__sinit>
 800966e:	3648      	adds	r6, #72	; 0x48
 8009670:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009674:	3b01      	subs	r3, #1
 8009676:	d503      	bpl.n	8009680 <__sfp+0x28>
 8009678:	6833      	ldr	r3, [r6, #0]
 800967a:	b30b      	cbz	r3, 80096c0 <__sfp+0x68>
 800967c:	6836      	ldr	r6, [r6, #0]
 800967e:	e7f7      	b.n	8009670 <__sfp+0x18>
 8009680:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009684:	b9d5      	cbnz	r5, 80096bc <__sfp+0x64>
 8009686:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <__sfp+0x88>)
 8009688:	60e3      	str	r3, [r4, #12]
 800968a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800968e:	6665      	str	r5, [r4, #100]	; 0x64
 8009690:	f000 f847 	bl	8009722 <__retarget_lock_init_recursive>
 8009694:	f7ff ff96 	bl	80095c4 <__sfp_lock_release>
 8009698:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800969c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096a0:	6025      	str	r5, [r4, #0]
 80096a2:	61a5      	str	r5, [r4, #24]
 80096a4:	2208      	movs	r2, #8
 80096a6:	4629      	mov	r1, r5
 80096a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096ac:	f7fb fd6c 	bl	8005188 <memset>
 80096b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096b8:	4620      	mov	r0, r4
 80096ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096bc:	3468      	adds	r4, #104	; 0x68
 80096be:	e7d9      	b.n	8009674 <__sfp+0x1c>
 80096c0:	2104      	movs	r1, #4
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7ff ff62 	bl	800958c <__sfmoreglue>
 80096c8:	4604      	mov	r4, r0
 80096ca:	6030      	str	r0, [r6, #0]
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d1d5      	bne.n	800967c <__sfp+0x24>
 80096d0:	f7ff ff78 	bl	80095c4 <__sfp_lock_release>
 80096d4:	230c      	movs	r3, #12
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	e7ee      	b.n	80096b8 <__sfp+0x60>
 80096da:	bf00      	nop
 80096dc:	08009a28 	.word	0x08009a28
 80096e0:	ffff0001 	.word	0xffff0001

080096e4 <_fwalk_reent>:
 80096e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e8:	4606      	mov	r6, r0
 80096ea:	4688      	mov	r8, r1
 80096ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096f0:	2700      	movs	r7, #0
 80096f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096f6:	f1b9 0901 	subs.w	r9, r9, #1
 80096fa:	d505      	bpl.n	8009708 <_fwalk_reent+0x24>
 80096fc:	6824      	ldr	r4, [r4, #0]
 80096fe:	2c00      	cmp	r4, #0
 8009700:	d1f7      	bne.n	80096f2 <_fwalk_reent+0xe>
 8009702:	4638      	mov	r0, r7
 8009704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009708:	89ab      	ldrh	r3, [r5, #12]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d907      	bls.n	800971e <_fwalk_reent+0x3a>
 800970e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009712:	3301      	adds	r3, #1
 8009714:	d003      	beq.n	800971e <_fwalk_reent+0x3a>
 8009716:	4629      	mov	r1, r5
 8009718:	4630      	mov	r0, r6
 800971a:	47c0      	blx	r8
 800971c:	4307      	orrs	r7, r0
 800971e:	3568      	adds	r5, #104	; 0x68
 8009720:	e7e9      	b.n	80096f6 <_fwalk_reent+0x12>

08009722 <__retarget_lock_init_recursive>:
 8009722:	4770      	bx	lr

08009724 <__retarget_lock_acquire_recursive>:
 8009724:	4770      	bx	lr

08009726 <__retarget_lock_release_recursive>:
 8009726:	4770      	bx	lr

08009728 <__swhatbuf_r>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	460e      	mov	r6, r1
 800972c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009730:	2900      	cmp	r1, #0
 8009732:	b096      	sub	sp, #88	; 0x58
 8009734:	4614      	mov	r4, r2
 8009736:	461d      	mov	r5, r3
 8009738:	da07      	bge.n	800974a <__swhatbuf_r+0x22>
 800973a:	2300      	movs	r3, #0
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	89b3      	ldrh	r3, [r6, #12]
 8009740:	061a      	lsls	r2, r3, #24
 8009742:	d410      	bmi.n	8009766 <__swhatbuf_r+0x3e>
 8009744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009748:	e00e      	b.n	8009768 <__swhatbuf_r+0x40>
 800974a:	466a      	mov	r2, sp
 800974c:	f000 f902 	bl	8009954 <_fstat_r>
 8009750:	2800      	cmp	r0, #0
 8009752:	dbf2      	blt.n	800973a <__swhatbuf_r+0x12>
 8009754:	9a01      	ldr	r2, [sp, #4]
 8009756:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800975a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800975e:	425a      	negs	r2, r3
 8009760:	415a      	adcs	r2, r3
 8009762:	602a      	str	r2, [r5, #0]
 8009764:	e7ee      	b.n	8009744 <__swhatbuf_r+0x1c>
 8009766:	2340      	movs	r3, #64	; 0x40
 8009768:	2000      	movs	r0, #0
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	b016      	add	sp, #88	; 0x58
 800976e:	bd70      	pop	{r4, r5, r6, pc}

08009770 <__smakebuf_r>:
 8009770:	898b      	ldrh	r3, [r1, #12]
 8009772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009774:	079d      	lsls	r5, r3, #30
 8009776:	4606      	mov	r6, r0
 8009778:	460c      	mov	r4, r1
 800977a:	d507      	bpl.n	800978c <__smakebuf_r+0x1c>
 800977c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	6123      	str	r3, [r4, #16]
 8009784:	2301      	movs	r3, #1
 8009786:	6163      	str	r3, [r4, #20]
 8009788:	b002      	add	sp, #8
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	ab01      	add	r3, sp, #4
 800978e:	466a      	mov	r2, sp
 8009790:	f7ff ffca 	bl	8009728 <__swhatbuf_r>
 8009794:	9900      	ldr	r1, [sp, #0]
 8009796:	4605      	mov	r5, r0
 8009798:	4630      	mov	r0, r6
 800979a:	f7ff f97f 	bl	8008a9c <_malloc_r>
 800979e:	b948      	cbnz	r0, 80097b4 <__smakebuf_r+0x44>
 80097a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097a4:	059a      	lsls	r2, r3, #22
 80097a6:	d4ef      	bmi.n	8009788 <__smakebuf_r+0x18>
 80097a8:	f023 0303 	bic.w	r3, r3, #3
 80097ac:	f043 0302 	orr.w	r3, r3, #2
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	e7e3      	b.n	800977c <__smakebuf_r+0xc>
 80097b4:	4b0d      	ldr	r3, [pc, #52]	; (80097ec <__smakebuf_r+0x7c>)
 80097b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	6020      	str	r0, [r4, #0]
 80097bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c0:	81a3      	strh	r3, [r4, #12]
 80097c2:	9b00      	ldr	r3, [sp, #0]
 80097c4:	6163      	str	r3, [r4, #20]
 80097c6:	9b01      	ldr	r3, [sp, #4]
 80097c8:	6120      	str	r0, [r4, #16]
 80097ca:	b15b      	cbz	r3, 80097e4 <__smakebuf_r+0x74>
 80097cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097d0:	4630      	mov	r0, r6
 80097d2:	f000 f8d1 	bl	8009978 <_isatty_r>
 80097d6:	b128      	cbz	r0, 80097e4 <__smakebuf_r+0x74>
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	f023 0303 	bic.w	r3, r3, #3
 80097de:	f043 0301 	orr.w	r3, r3, #1
 80097e2:	81a3      	strh	r3, [r4, #12]
 80097e4:	89a0      	ldrh	r0, [r4, #12]
 80097e6:	4305      	orrs	r5, r0
 80097e8:	81a5      	strh	r5, [r4, #12]
 80097ea:	e7cd      	b.n	8009788 <__smakebuf_r+0x18>
 80097ec:	08009581 	.word	0x08009581

080097f0 <_malloc_usable_size_r>:
 80097f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097f4:	1f18      	subs	r0, r3, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfbc      	itt	lt
 80097fa:	580b      	ldrlt	r3, [r1, r0]
 80097fc:	18c0      	addlt	r0, r0, r3
 80097fe:	4770      	bx	lr

08009800 <_raise_r>:
 8009800:	291f      	cmp	r1, #31
 8009802:	b538      	push	{r3, r4, r5, lr}
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	d904      	bls.n	8009814 <_raise_r+0x14>
 800980a:	2316      	movs	r3, #22
 800980c:	6003      	str	r3, [r0, #0]
 800980e:	f04f 30ff 	mov.w	r0, #4294967295
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009816:	b112      	cbz	r2, 800981e <_raise_r+0x1e>
 8009818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800981c:	b94b      	cbnz	r3, 8009832 <_raise_r+0x32>
 800981e:	4620      	mov	r0, r4
 8009820:	f000 f830 	bl	8009884 <_getpid_r>
 8009824:	462a      	mov	r2, r5
 8009826:	4601      	mov	r1, r0
 8009828:	4620      	mov	r0, r4
 800982a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800982e:	f000 b817 	b.w	8009860 <_kill_r>
 8009832:	2b01      	cmp	r3, #1
 8009834:	d00a      	beq.n	800984c <_raise_r+0x4c>
 8009836:	1c59      	adds	r1, r3, #1
 8009838:	d103      	bne.n	8009842 <_raise_r+0x42>
 800983a:	2316      	movs	r3, #22
 800983c:	6003      	str	r3, [r0, #0]
 800983e:	2001      	movs	r0, #1
 8009840:	e7e7      	b.n	8009812 <_raise_r+0x12>
 8009842:	2400      	movs	r4, #0
 8009844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009848:	4628      	mov	r0, r5
 800984a:	4798      	blx	r3
 800984c:	2000      	movs	r0, #0
 800984e:	e7e0      	b.n	8009812 <_raise_r+0x12>

08009850 <raise>:
 8009850:	4b02      	ldr	r3, [pc, #8]	; (800985c <raise+0xc>)
 8009852:	4601      	mov	r1, r0
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	f7ff bfd3 	b.w	8009800 <_raise_r>
 800985a:	bf00      	nop
 800985c:	2000000c 	.word	0x2000000c

08009860 <_kill_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4d07      	ldr	r5, [pc, #28]	; (8009880 <_kill_r+0x20>)
 8009864:	2300      	movs	r3, #0
 8009866:	4604      	mov	r4, r0
 8009868:	4608      	mov	r0, r1
 800986a:	4611      	mov	r1, r2
 800986c:	602b      	str	r3, [r5, #0]
 800986e:	f7f8 fad5 	bl	8001e1c <_kill>
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	d102      	bne.n	800987c <_kill_r+0x1c>
 8009876:	682b      	ldr	r3, [r5, #0]
 8009878:	b103      	cbz	r3, 800987c <_kill_r+0x1c>
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	bd38      	pop	{r3, r4, r5, pc}
 800987e:	bf00      	nop
 8009880:	200004b8 	.word	0x200004b8

08009884 <_getpid_r>:
 8009884:	f7f8 bac2 	b.w	8001e0c <_getpid>

08009888 <__sread>:
 8009888:	b510      	push	{r4, lr}
 800988a:	460c      	mov	r4, r1
 800988c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009890:	f000 f894 	bl	80099bc <_read_r>
 8009894:	2800      	cmp	r0, #0
 8009896:	bfab      	itete	ge
 8009898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800989a:	89a3      	ldrhlt	r3, [r4, #12]
 800989c:	181b      	addge	r3, r3, r0
 800989e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098a2:	bfac      	ite	ge
 80098a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098a6:	81a3      	strhlt	r3, [r4, #12]
 80098a8:	bd10      	pop	{r4, pc}

080098aa <__swrite>:
 80098aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ae:	461f      	mov	r7, r3
 80098b0:	898b      	ldrh	r3, [r1, #12]
 80098b2:	05db      	lsls	r3, r3, #23
 80098b4:	4605      	mov	r5, r0
 80098b6:	460c      	mov	r4, r1
 80098b8:	4616      	mov	r6, r2
 80098ba:	d505      	bpl.n	80098c8 <__swrite+0x1e>
 80098bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c0:	2302      	movs	r3, #2
 80098c2:	2200      	movs	r2, #0
 80098c4:	f000 f868 	bl	8009998 <_lseek_r>
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	4632      	mov	r2, r6
 80098d6:	463b      	mov	r3, r7
 80098d8:	4628      	mov	r0, r5
 80098da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098de:	f000 b817 	b.w	8009910 <_write_r>

080098e2 <__sseek>:
 80098e2:	b510      	push	{r4, lr}
 80098e4:	460c      	mov	r4, r1
 80098e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ea:	f000 f855 	bl	8009998 <_lseek_r>
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	bf15      	itete	ne
 80098f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80098f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098fe:	81a3      	strheq	r3, [r4, #12]
 8009900:	bf18      	it	ne
 8009902:	81a3      	strhne	r3, [r4, #12]
 8009904:	bd10      	pop	{r4, pc}

08009906 <__sclose>:
 8009906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990a:	f000 b813 	b.w	8009934 <_close_r>
	...

08009910 <_write_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d07      	ldr	r5, [pc, #28]	; (8009930 <_write_r+0x20>)
 8009914:	4604      	mov	r4, r0
 8009916:	4608      	mov	r0, r1
 8009918:	4611      	mov	r1, r2
 800991a:	2200      	movs	r2, #0
 800991c:	602a      	str	r2, [r5, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	f7f8 fab3 	bl	8001e8a <_write>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d102      	bne.n	800992e <_write_r+0x1e>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	b103      	cbz	r3, 800992e <_write_r+0x1e>
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	200004b8 	.word	0x200004b8

08009934 <_close_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4d06      	ldr	r5, [pc, #24]	; (8009950 <_close_r+0x1c>)
 8009938:	2300      	movs	r3, #0
 800993a:	4604      	mov	r4, r0
 800993c:	4608      	mov	r0, r1
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	f7f8 fabf 	bl	8001ec2 <_close>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_close_r+0x1a>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	b103      	cbz	r3, 800994e <_close_r+0x1a>
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	200004b8 	.word	0x200004b8

08009954 <_fstat_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d07      	ldr	r5, [pc, #28]	; (8009974 <_fstat_r+0x20>)
 8009958:	2300      	movs	r3, #0
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	4611      	mov	r1, r2
 8009960:	602b      	str	r3, [r5, #0]
 8009962:	f7f8 faba 	bl	8001eda <_fstat>
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	d102      	bne.n	8009970 <_fstat_r+0x1c>
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	b103      	cbz	r3, 8009970 <_fstat_r+0x1c>
 800996e:	6023      	str	r3, [r4, #0]
 8009970:	bd38      	pop	{r3, r4, r5, pc}
 8009972:	bf00      	nop
 8009974:	200004b8 	.word	0x200004b8

08009978 <_isatty_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4d06      	ldr	r5, [pc, #24]	; (8009994 <_isatty_r+0x1c>)
 800997c:	2300      	movs	r3, #0
 800997e:	4604      	mov	r4, r0
 8009980:	4608      	mov	r0, r1
 8009982:	602b      	str	r3, [r5, #0]
 8009984:	f7f8 fab9 	bl	8001efa <_isatty>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d102      	bne.n	8009992 <_isatty_r+0x1a>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	b103      	cbz	r3, 8009992 <_isatty_r+0x1a>
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	200004b8 	.word	0x200004b8

08009998 <_lseek_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	; (80099b8 <_lseek_r+0x20>)
 800999c:	4604      	mov	r4, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	2200      	movs	r2, #0
 80099a4:	602a      	str	r2, [r5, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7f8 fab2 	bl	8001f10 <_lseek>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_lseek_r+0x1e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_lseek_r+0x1e>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	200004b8 	.word	0x200004b8

080099bc <_read_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d07      	ldr	r5, [pc, #28]	; (80099dc <_read_r+0x20>)
 80099c0:	4604      	mov	r4, r0
 80099c2:	4608      	mov	r0, r1
 80099c4:	4611      	mov	r1, r2
 80099c6:	2200      	movs	r2, #0
 80099c8:	602a      	str	r2, [r5, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f7f8 fa40 	bl	8001e50 <_read>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_read_r+0x1e>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b103      	cbz	r3, 80099da <_read_r+0x1e>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	200004b8 	.word	0x200004b8

080099e0 <_init>:
 80099e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e2:	bf00      	nop
 80099e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099e6:	bc08      	pop	{r3}
 80099e8:	469e      	mov	lr, r3
 80099ea:	4770      	bx	lr

080099ec <_fini>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	bf00      	nop
 80099f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f2:	bc08      	pop	{r3}
 80099f4:	469e      	mov	lr, r3
 80099f6:	4770      	bx	lr
